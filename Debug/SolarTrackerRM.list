
SolarTrackerRM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800bce4  0800bce4  0000cce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda0  0800bda0  0000d098  2**0
                  CONTENTS
  4 .ARM          00000008  0800bda0  0800bda0  0000cda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda8  0800bda8  0000d098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda8  0800bda8  0000cda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdac  0800bdac  0000cdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800bdb0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d098  2**0
                  CONTENTS
 10 .bss          00000b68  20000098  20000098  0000d098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c00  20000c00  0000d098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cdda  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047cc  00000000  00000000  00029ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  0002e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c7  00000000  00000000  00030008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275ac  00000000  00000000  000313cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022275  00000000  00000000  0005897b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a8e  00000000  00000000  0007abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015d67e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007490  00000000  00000000  0015d6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00164b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bccc 	.word	0x0800bccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800bccc 	.word	0x0800bccc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b086      	sub	sp, #24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
  int i;

  for (i = 0; i < len; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e009      	b.n	80005d4 <_write+0x26>
  {
   ITM_SendChar (*ptr++);
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffc9 	bl	8000560 <ITM_SendChar>
  for (i = 0; i < len; i++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf1      	blt.n	80005c0 <_write+0x12>
  }
  return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 ffff 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f931 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fba5 	bl	8000d44 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 fb83 	bl	8000d04 <MX_DMA_Init>
  MX_I2C1_Init();
 80005fe:	f000 fa11 	bl	8000a24 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000602:	f000 fa3d 	bl	8000a80 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000606:	f000 fa6b 	bl	8000ae0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800060a:	f00a f8b7 	bl	800a77c <MX_USB_HOST_Init>
  MX_TIM1_Init();
 800060e:	f000 fa9d 	bl	8000b4c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000612:	f000 fb1f 	bl	8000c54 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000616:	f000 f989 	bl	800092c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  /* USER CODE END 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)raw,4);
 800061a:	2204      	movs	r2, #4
 800061c:	4970      	ldr	r1, [pc, #448]	@ (80007e0 <main+0x1f8>)
 800061e:	4871      	ldr	r0, [pc, #452]	@ (80007e4 <main+0x1fc>)
 8000620:	f001 f9d0 	bl	80019c4 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8000624:	2100      	movs	r1, #0
 8000626:	4870      	ldr	r0, [pc, #448]	@ (80007e8 <main+0x200>)
 8000628:	f006 f992 	bl	8006950 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_1);
 800062c:	2100      	movs	r1, #0
 800062e:	486f      	ldr	r0, [pc, #444]	@ (80007ec <main+0x204>)
 8000630:	f006 f98e 	bl	8006950 <HAL_TIM_PWM_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000634:	f00a f8c8 	bl	800a7c8 <MX_USB_HOST_Process>
    tl=(uint16_t)raw[0];
 8000638:	4b69      	ldr	r3, [pc, #420]	@ (80007e0 <main+0x1f8>)
 800063a:	881a      	ldrh	r2, [r3, #0]
 800063c:	4b6c      	ldr	r3, [pc, #432]	@ (80007f0 <main+0x208>)
 800063e:	801a      	strh	r2, [r3, #0]
    bl=(uint16_t)raw[1];
 8000640:	4b67      	ldr	r3, [pc, #412]	@ (80007e0 <main+0x1f8>)
 8000642:	885a      	ldrh	r2, [r3, #2]
 8000644:	4b6b      	ldr	r3, [pc, #428]	@ (80007f4 <main+0x20c>)
 8000646:	801a      	strh	r2, [r3, #0]
    tr=(uint16_t)raw[2];
 8000648:	4b65      	ldr	r3, [pc, #404]	@ (80007e0 <main+0x1f8>)
 800064a:	889a      	ldrh	r2, [r3, #4]
 800064c:	4b6a      	ldr	r3, [pc, #424]	@ (80007f8 <main+0x210>)
 800064e:	801a      	strh	r2, [r3, #0]
    br=(uint16_t)raw[3];
 8000650:	4b63      	ldr	r3, [pc, #396]	@ (80007e0 <main+0x1f8>)
 8000652:	88da      	ldrh	r2, [r3, #6]
 8000654:	4b69      	ldr	r3, [pc, #420]	@ (80007fc <main+0x214>)
 8000656:	801a      	strh	r2, [r3, #0]

    printf("topleft = %hu\n",tl);
 8000658:	4b65      	ldr	r3, [pc, #404]	@ (80007f0 <main+0x208>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	4868      	ldr	r0, [pc, #416]	@ (8000800 <main+0x218>)
 8000660:	f00a fd16 	bl	800b090 <iprintf>
    printf("topright = %hu\n",tr);
 8000664:	4b64      	ldr	r3, [pc, #400]	@ (80007f8 <main+0x210>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	4866      	ldr	r0, [pc, #408]	@ (8000804 <main+0x21c>)
 800066c:	f00a fd10 	bl	800b090 <iprintf>
    printf("botleft = %hu\n",bl);
 8000670:	4b60      	ldr	r3, [pc, #384]	@ (80007f4 <main+0x20c>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	4864      	ldr	r0, [pc, #400]	@ (8000808 <main+0x220>)
 8000678:	f00a fd0a 	bl	800b090 <iprintf>
    printf("botright = %hu\n\n",br);
 800067c:	4b5f      	ldr	r3, [pc, #380]	@ (80007fc <main+0x214>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	4862      	ldr	r0, [pc, #392]	@ (800080c <main+0x224>)
 8000684:	f00a fd04 	bl	800b090 <iprintf>

    uint16_t avgtop=tl+tr;
 8000688:	4b59      	ldr	r3, [pc, #356]	@ (80007f0 <main+0x208>)
 800068a:	881a      	ldrh	r2, [r3, #0]
 800068c:	4b5a      	ldr	r3, [pc, #360]	@ (80007f8 <main+0x210>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	4413      	add	r3, r2
 8000692:	80fb      	strh	r3, [r7, #6]
    uint16_t avgbot=bl+br;
 8000694:	4b57      	ldr	r3, [pc, #348]	@ (80007f4 <main+0x20c>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	4b58      	ldr	r3, [pc, #352]	@ (80007fc <main+0x214>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	4413      	add	r3, r2
 800069e:	80bb      	strh	r3, [r7, #4]
    uint16_t avglef=tl+bl;
 80006a0:	4b53      	ldr	r3, [pc, #332]	@ (80007f0 <main+0x208>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b53      	ldr	r3, [pc, #332]	@ (80007f4 <main+0x20c>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	807b      	strh	r3, [r7, #2]
    uint16_t avgrig=tr+br;
 80006ac:	4b52      	ldr	r3, [pc, #328]	@ (80007f8 <main+0x210>)
 80006ae:	881a      	ldrh	r2, [r3, #0]
 80006b0:	4b52      	ldr	r3, [pc, #328]	@ (80007fc <main+0x214>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	803b      	strh	r3, [r7, #0]
    printf("avgtop = %hu\n",avgtop);
    printf("avgbot = %hu\n",avgbot);
    printf("avgleft = %hu\n",avglef);
    printf("avgright = %hu\n",avgrig);
    */
    if(avgtop>avgbot){
 80006b8:	88fa      	ldrh	r2, [r7, #6]
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d91d      	bls.n	80006fc <main+0x114>
    	printf("top \n");
 80006c0:	4853      	ldr	r0, [pc, #332]	@ (8000810 <main+0x228>)
 80006c2:	f00a fd4d 	bl	800b160 <puts>
        servo_v-=10;
 80006c6:	4b53      	ldr	r3, [pc, #332]	@ (8000814 <main+0x22c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	3b0a      	subs	r3, #10
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b51      	ldr	r3, [pc, #324]	@ (8000814 <main+0x22c>)
 80006d0:	801a      	strh	r2, [r3, #0]
        if(servo_v<=servo_L_limit){
 80006d2:	4b50      	ldr	r3, [pc, #320]	@ (8000814 <main+0x22c>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b4f      	ldr	r3, [pc, #316]	@ (8000818 <main+0x230>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dc04      	bgt.n	80006ea <main+0x102>
        	servo_v=servo_L_limit;
 80006e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000818 <main+0x230>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000814 <main+0x22c>)
 80006e8:	801a      	strh	r2, [r3, #0]
        }
        __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,servo_v);
 80006ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000814 <main+0x22c>)
 80006ec:	881a      	ldrh	r2, [r3, #0]
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <main+0x200>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_Delay(100);
 80006f4:	2064      	movs	r0, #100	@ 0x64
 80006f6:	f000 ffed 	bl	80016d4 <HAL_Delay>
 80006fa:	e026      	b.n	800074a <main+0x162>
    }
    else if(avgbot>avgtop){
 80006fc:	88ba      	ldrh	r2, [r7, #4]
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	429a      	cmp	r2, r3
 8000702:	d91d      	bls.n	8000740 <main+0x158>
        printf("bottom\n");
 8000704:	4845      	ldr	r0, [pc, #276]	@ (800081c <main+0x234>)
 8000706:	f00a fd2b 	bl	800b160 <puts>
        servo_v+=10;
 800070a:	4b42      	ldr	r3, [pc, #264]	@ (8000814 <main+0x22c>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	330a      	adds	r3, #10
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b40      	ldr	r3, [pc, #256]	@ (8000814 <main+0x22c>)
 8000714:	801a      	strh	r2, [r3, #0]
        if(servo_v>=servo_H_limit2){
 8000716:	4b3f      	ldr	r3, [pc, #252]	@ (8000814 <main+0x22c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	4b40      	ldr	r3, [pc, #256]	@ (8000820 <main+0x238>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	db04      	blt.n	800072e <main+0x146>
           servo_v=servo_H_limit2;
 8000724:	4b3e      	ldr	r3, [pc, #248]	@ (8000820 <main+0x238>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b3a      	ldr	r3, [pc, #232]	@ (8000814 <main+0x22c>)
 800072c:	801a      	strh	r2, [r3, #0]
        }
        __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,servo_v);
 800072e:	4b39      	ldr	r3, [pc, #228]	@ (8000814 <main+0x22c>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <main+0x200>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	@ 0x64
 800073a:	f000 ffcb 	bl	80016d4 <HAL_Delay>
 800073e:	e004      	b.n	800074a <main+0x162>
    }
    else{
        __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,500);
 8000740:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <main+0x200>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000748:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    if(avglef>avgrig){
 800074a:	887a      	ldrh	r2, [r7, #2]
 800074c:	883b      	ldrh	r3, [r7, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d91d      	bls.n	800078e <main+0x1a6>
        printf("left\n");
 8000752:	4834      	ldr	r0, [pc, #208]	@ (8000824 <main+0x23c>)
 8000754:	f00a fd04 	bl	800b160 <puts>
        servo_h-=10;
 8000758:	4b33      	ldr	r3, [pc, #204]	@ (8000828 <main+0x240>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	3b0a      	subs	r3, #10
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b31      	ldr	r3, [pc, #196]	@ (8000828 <main+0x240>)
 8000762:	801a      	strh	r2, [r3, #0]
        if(servo_h<=servo_L_limit){
 8000764:	4b30      	ldr	r3, [pc, #192]	@ (8000828 <main+0x240>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <main+0x230>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	dc04      	bgt.n	800077c <main+0x194>
            servo_h=servo_L_limit;
 8000772:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <main+0x230>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <main+0x240>)
 800077a:	801a      	strh	r2, [r3, #0]
        }
        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,servo_h);
 800077c:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <main+0x240>)
 800077e:	881a      	ldrh	r2, [r3, #0]
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <main+0x204>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_Delay(100);
 8000786:	2064      	movs	r0, #100	@ 0x64
 8000788:	f000 ffa4 	bl	80016d4 <HAL_Delay>
 800078c:	e752      	b.n	8000634 <main+0x4c>

    }

    else if(avgrig>avglef){
 800078e:	883a      	ldrh	r2, [r7, #0]
 8000790:	887b      	ldrh	r3, [r7, #2]
 8000792:	429a      	cmp	r2, r3
 8000794:	d91d      	bls.n	80007d2 <main+0x1ea>
        printf("right\n");
 8000796:	4825      	ldr	r0, [pc, #148]	@ (800082c <main+0x244>)
 8000798:	f00a fce2 	bl	800b160 <puts>
        servo_h+=10;
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <main+0x240>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	330a      	adds	r3, #10
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <main+0x240>)
 80007a6:	801a      	strh	r2, [r3, #0]
        if(servo_h>=servo_H_limit){
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <main+0x240>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <main+0x248>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	db04      	blt.n	80007c0 <main+0x1d8>
            servo_h=servo_H_limit;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <main+0x248>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <main+0x240>)
 80007be:	801a      	strh	r2, [r3, #0]
        }
        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,servo_h);
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <main+0x240>)
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <main+0x204>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_Delay(100);
 80007ca:	2064      	movs	r0, #100	@ 0x64
 80007cc:	f000 ff82 	bl	80016d4 <HAL_Delay>
 80007d0:	e730      	b.n	8000634 <main+0x4c>

    }
    else{
        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,750);
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <main+0x204>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80007da:	635a      	str	r2, [r3, #52]	@ 0x34
  {
 80007dc:	e72a      	b.n	8000634 <main+0x4c>
 80007de:	bf00      	nop
 80007e0:	200002e8 	.word	0x200002e8
 80007e4:	200000b4 	.word	0x200000b4
 80007e8:	20000250 	.word	0x20000250
 80007ec:	20000298 	.word	0x20000298
 80007f0:	200002e0 	.word	0x200002e0
 80007f4:	200002e2 	.word	0x200002e2
 80007f8:	200002e4 	.word	0x200002e4
 80007fc:	200002e6 	.word	0x200002e6
 8000800:	0800bce4 	.word	0x0800bce4
 8000804:	0800bcf4 	.word	0x0800bcf4
 8000808:	0800bd04 	.word	0x0800bd04
 800080c:	0800bd14 	.word	0x0800bd14
 8000810:	0800bd28 	.word	0x0800bd28
 8000814:	20000000 	.word	0x20000000
 8000818:	2000000c 	.word	0x2000000c
 800081c:	0800bd30 	.word	0x0800bd30
 8000820:	20000004 	.word	0x20000004
 8000824:	0800bd38 	.word	0x0800bd38
 8000828:	20000002 	.word	0x20000002
 800082c:	0800bd40 	.word	0x0800bd40
 8000830:	20000008 	.word	0x20000008

08000834 <HAL_ADC_ConvCpltCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)raw,4);
 800083c:	2204      	movs	r2, #4
 800083e:	4904      	ldr	r1, [pc, #16]	@ (8000850 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <HAL_ADC_ConvCpltCallback+0x20>)
 8000842:	f001 f8bf 	bl	80019c4 <HAL_ADC_Start_DMA>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200002e8 	.word	0x200002e8
 8000854:	200000b4 	.word	0x200000b4

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	@ 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	@ 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f00a fd5a 	bl	800b320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	@ (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	@ 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d6:	2307      	movs	r3, #7
 80008d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 f998 	bl	8005c14 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ea:	f000 fb19 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000900:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2105      	movs	r1, #5
 800090c:	4618      	mov	r0, r3
 800090e:	f005 fbf9 	bl	8006104 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000918:	f000 fb02 	bl	8000f20 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093e:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000940:	4a36      	ldr	r2, [pc, #216]	@ (8000a1c <MX_ADC1_Init+0xf0>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000944:	4b34      	ldr	r3, [pc, #208]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094a:	4b33      	ldr	r3, [pc, #204]	@ (8000a18 <MX_ADC1_Init+0xec>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000950:	4b31      	ldr	r3, [pc, #196]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000952:	2201      	movs	r2, #1
 8000954:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000958:	2201      	movs	r2, #1
 800095a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <MX_ADC1_Init+0xec>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000964:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <MX_ADC1_Init+0xec>)
 800096c:	4a2c      	ldr	r2, [pc, #176]	@ (8000a20 <MX_ADC1_Init+0xf4>)
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000970:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000976:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000978:	2204      	movs	r2, #4
 800097a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800097c:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_ADC1_Init+0xec>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000984:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000986:	2201      	movs	r2, #1
 8000988:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098a:	4823      	ldr	r0, [pc, #140]	@ (8000a18 <MX_ADC1_Init+0xec>)
 800098c:	f000 fec6 	bl	800171c <HAL_ADC_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 fac3 	bl	8000f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009a2:	2307      	movs	r3, #7
 80009a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	481b      	ldr	r0, [pc, #108]	@ (8000a18 <MX_ADC1_Init+0xec>)
 80009ac:	f001 f938 	bl	8001c20 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009b6:	f000 fab3 	bl	8000f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4814      	ldr	r0, [pc, #80]	@ (8000a18 <MX_ADC1_Init+0xec>)
 80009c8:	f001 f92a 	bl	8001c20 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009d2:	f000 faa5 	bl	8000f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009da:	2303      	movs	r3, #3
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <MX_ADC1_Init+0xec>)
 80009e4:	f001 f91c 	bl	8001c20 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80009ee:	f000 fa97 	bl	8000f20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009f2:	2303      	movs	r3, #3
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009f6:	2304      	movs	r3, #4
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <MX_ADC1_Init+0xec>)
 8000a00:	f001 f90e 	bl	8001c20 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a0a:	f000 fa89 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000b4 	.word	0x200000b4
 8000a1c:	40012000 	.word	0x40012000
 8000a20:	0f000001 	.word	0x0f000001

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f004 faf3 	bl	800504c <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 fa58 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000015c 	.word	0x2000015c
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	000186a0 	.word	0x000186a0

08000a80 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000a86:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <MX_I2S3_Init+0x58>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a90:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000adc <MX_I2S3_Init+0x5c>)
 8000aaa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_I2S3_Init+0x54>)
 8000ac0:	f004 fc08 	bl	80052d4 <HAL_I2S_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000aca:	f000 fa29 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001b0 	.word	0x200001b0
 8000ad8:	40003c00 	.word	0x40003c00
 8000adc:	00017700 	.word	0x00017700

08000ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000ae6:	4a18      	ldr	r2, [pc, #96]	@ (8000b48 <MX_SPI1_Init+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000aec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <MX_SPI1_Init+0x64>)
 8000b32:	f005 fe35 	bl	80067a0 <HAL_SPI_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b3c:	f000 f9f0 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200001f8 	.word	0x200001f8
 8000b48:	40013000 	.word	0x40013000

08000b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b092      	sub	sp, #72	@ 0x48
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2220      	movs	r2, #32
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00a fbd2 	bl	800b320 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b7c:	4b33      	ldr	r3, [pc, #204]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000b7e:	4a34      	ldr	r2, [pc, #208]	@ (8000c50 <MX_TIM1_Init+0x104>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8000b82:	4b32      	ldr	r3, [pc, #200]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000b84:	22a7      	movs	r2, #167	@ 0xa7
 8000b86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b30      	ldr	r3, [pc, #192]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000b90:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b2d      	ldr	r3, [pc, #180]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ba8:	4828      	ldr	r0, [pc, #160]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000baa:	f005 fe82 	bl	80068b2 <HAL_TIM_PWM_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000bb4:	f000 f9b4 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4821      	ldr	r0, [pc, #132]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000bc8:	f006 fb1c 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000bd2:	f000 f9a5 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd6:	2360      	movs	r3, #96	@ 0x60
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4814      	ldr	r0, [pc, #80]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000bfc:	f005 ffbe 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c06:	f000 f98b 	bl	8000f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000c2e:	f006 fb65 	bl	80072fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000c38:	f000 f972 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c3c:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <MX_TIM1_Init+0x100>)
 8000c3e:	f000 fb63 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000c42:	bf00      	nop
 8000c44:	3748      	adds	r7, #72	@ 0x48
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000250 	.word	0x20000250
 8000c50:	40010000 	.word	0x40010000

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	615a      	str	r2, [r3, #20]
 8000c74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c76:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000c80:	22a7      	movs	r2, #167	@ 0xa7
 8000c82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000c8c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c9e:	4818      	ldr	r0, [pc, #96]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000ca0:	f005 fe07 	bl	80068b2 <HAL_TIM_PWM_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000caa:	f000 f939 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4810      	ldr	r0, [pc, #64]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000cbe:	f006 faa1 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000cc8:	f000 f92a 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ccc:	2360      	movs	r3, #96	@ 0x60
 8000cce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000ce4:	f005 ff4a 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000cee:	f000 f917 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cf2:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <MX_TIM2_Init+0xac>)
 8000cf4:	f000 fb08 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	@ 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000298 	.word	0x20000298

08000d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_DMA_Init+0x3c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <MX_DMA_Init+0x3c>)
 8000d14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_DMA_Init+0x3c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2038      	movs	r0, #56	@ 0x38
 8000d2c:	f001 fafd 	bl	800232a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d30:	2038      	movs	r0, #56	@ 0x38
 8000d32:	f001 fb16 	bl	8002362 <HAL_NVIC_EnableIRQ>

}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	@ 0x30
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	4b6b      	ldr	r3, [pc, #428]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a6a      	ldr	r2, [pc, #424]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000d64:	f043 0310 	orr.w	r3, r3, #16
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b68      	ldr	r3, [pc, #416]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0310 	and.w	r3, r3, #16
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	4b64      	ldr	r3, [pc, #400]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a63      	ldr	r2, [pc, #396]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b61      	ldr	r3, [pc, #388]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b5d      	ldr	r3, [pc, #372]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a5c      	ldr	r2, [pc, #368]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b56      	ldr	r3, [pc, #344]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a55      	ldr	r2, [pc, #340]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b53      	ldr	r3, [pc, #332]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b4f      	ldr	r3, [pc, #316]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a4e      	ldr	r2, [pc, #312]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b48      	ldr	r3, [pc, #288]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a47      	ldr	r2, [pc, #284]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b45      	ldr	r3, [pc, #276]	@ (8000f0c <MX_GPIO_Init+0x1c8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2108      	movs	r1, #8
 8000e06:	4842      	ldr	r0, [pc, #264]	@ (8000f10 <MX_GPIO_Init+0x1cc>)
 8000e08:	f001 ffd2 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4840      	ldr	r0, [pc, #256]	@ (8000f14 <MX_GPIO_Init+0x1d0>)
 8000e12:	f001 ffcd 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e16:	2200      	movs	r2, #0
 8000e18:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000e1c:	483e      	ldr	r0, [pc, #248]	@ (8000f18 <MX_GPIO_Init+0x1d4>)
 8000e1e:	f001 ffc7 	bl	8002db0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e22:	2308      	movs	r3, #8
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4835      	ldr	r0, [pc, #212]	@ (8000f10 <MX_GPIO_Init+0x1cc>)
 8000e3a:	f001 fe1d 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	482f      	ldr	r0, [pc, #188]	@ (8000f14 <MX_GPIO_Init+0x1d0>)
 8000e56:	f001 fe0f 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4827      	ldr	r0, [pc, #156]	@ (8000f14 <MX_GPIO_Init+0x1d0>)
 8000e76:	f001 fdff 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4823      	ldr	r0, [pc, #140]	@ (8000f1c <MX_GPIO_Init+0x1d8>)
 8000e8e:	f001 fdf3 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	481b      	ldr	r0, [pc, #108]	@ (8000f1c <MX_GPIO_Init+0x1d8>)
 8000eb0:	f001 fde2 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000eb4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000eb8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <MX_GPIO_Init+0x1d4>)
 8000ece:	f001 fdd3 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <MX_GPIO_Init+0x1d4>)
 8000ee6:	f001 fdc7 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_GPIO_Init+0x1cc>)
 8000f00:	f001 fdba 	bl	8002a78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	@ 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	40020400 	.word	0x40020400

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f6a:	2007      	movs	r0, #7
 8000f6c:	f001 f9d2 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a33      	ldr	r2, [pc, #204]	@ (8001068 <HAL_ADC_MspInit+0xec>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d15f      	bne.n	800105e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a31      	ldr	r2, [pc, #196]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4821      	ldr	r0, [pc, #132]	@ (8001070 <HAL_ADC_MspInit+0xf4>)
 8000fea:	f001 fd45 	bl	8002a78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ff0:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <HAL_ADC_MspInit+0xfc>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001024:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001032:	4810      	ldr	r0, [pc, #64]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001034:	f001 f9b0 	bl	8002398 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800103e:	f7ff ff6f 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001046:	639a      	str	r2, [r3, #56]	@ 0x38
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2012      	movs	r0, #18
 8001054:	f001 f969 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001058:	2012      	movs	r0, #18
 800105a:	f001 f982 	bl	8002362 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40012000 	.word	0x40012000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	200000fc 	.word	0x200000fc
 8001078:	40026410 	.word	0x40026410

0800107c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <HAL_I2C_MspInit+0x84>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12c      	bne.n	80010f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_I2C_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a17      	ldr	r2, [pc, #92]	@ (8001104 <HAL_I2C_MspInit+0x88>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_I2C_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010ba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010cc:	2304      	movs	r3, #4
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480c      	ldr	r0, [pc, #48]	@ (8001108 <HAL_I2C_MspInit+0x8c>)
 80010d8:	f001 fcce 	bl	8002a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0x88>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_I2C_MspInit+0x88>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_I2C_MspInit+0x88>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	@ 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40005400 	.word	0x40005400
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400

0800110c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	@ 0x38
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a31      	ldr	r2, [pc, #196]	@ (80011fc <HAL_I2S_MspInit+0xf0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d15a      	bne.n	80011f2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001140:	23c0      	movs	r3, #192	@ 0xc0
 8001142:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4618      	mov	r0, r3
 800114e:	f005 f9e5 	bl	800651c <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001158:	f7ff fee2 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	4a26      	ldr	r2, [pc, #152]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 8001166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800116a:	6413      	str	r3, [r2, #64]	@ 0x40
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	4a1f      	ldr	r2, [pc, #124]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6313      	str	r3, [r2, #48]	@ 0x30
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119c:	4a18      	ldr	r2, [pc, #96]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <HAL_I2S_MspInit+0xf4>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011b0:	2310      	movs	r3, #16
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011c0:	2306      	movs	r3, #6
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <HAL_I2S_MspInit+0xf8>)
 80011cc:	f001 fc54 	bl	8002a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011d0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e2:	2306      	movs	r3, #6
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	4806      	ldr	r0, [pc, #24]	@ (8001208 <HAL_I2S_MspInit+0xfc>)
 80011ee:	f001 fc43 	bl	8002a78 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80011f2:	bf00      	nop
 80011f4:	3738      	adds	r7, #56	@ 0x38
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40003c00 	.word	0x40003c00
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020800 	.word	0x40020800

0800120c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	@ (8001290 <HAL_SPI_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12b      	bne.n	8001286 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_SPI_MspInit+0x88>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_SPI_MspInit+0x88>)
 8001238:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800123c:	6453      	str	r3, [r2, #68]	@ 0x44
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_SPI_MspInit+0x88>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_SPI_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a10      	ldr	r2, [pc, #64]	@ (8001294 <HAL_SPI_MspInit+0x88>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_SPI_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001266:	23e0      	movs	r3, #224	@ 0xe0
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001276:	2305      	movs	r3, #5
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <HAL_SPI_MspInit+0x8c>)
 8001282:	f001 fbf9 	bl	8002a78 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40013000 	.word	0x40013000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a15      	ldr	r2, [pc, #84]	@ (8001300 <HAL_TIM_PWM_MspInit+0x64>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10e      	bne.n	80012cc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_TIM_PWM_MspInit+0x68>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a13      	ldr	r2, [pc, #76]	@ (8001304 <HAL_TIM_PWM_MspInit+0x68>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <HAL_TIM_PWM_MspInit+0x68>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ca:	e012      	b.n	80012f2 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d4:	d10d      	bne.n	80012f2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_TIM_PWM_MspInit+0x68>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <HAL_TIM_PWM_MspInit+0x68>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_TIM_PWM_MspInit+0x68>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40010000 	.word	0x40010000
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	@ (80013bc <HAL_TIM_MspPostInit+0xb4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d11f      	bne.n	800136a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a23      	ldr	r2, [pc, #140]	@ (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001358:	2301      	movs	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4818      	ldr	r0, [pc, #96]	@ (80013c4 <HAL_TIM_MspPostInit+0xbc>)
 8001364:	f001 fb88 	bl	8002a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001368:	e023      	b.n	80013b2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001372:	d11e      	bne.n	80013b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6313      	str	r3, [r2, #48]	@ 0x30
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013a2:	2301      	movs	r3, #1
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <HAL_TIM_MspPostInit+0xc0>)
 80013ae:	f001 fb63 	bl	8002a78 <HAL_GPIO_Init>
}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	@ 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40020000 	.word	0x40020000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f000 f937 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <ADC_IRQHandler+0x10>)
 8001432:	f000 f9b6 	bl	80017a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000b4 	.word	0x200000b4

08001440 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <DMA2_Stream0_IRQHandler+0x10>)
 8001446:	f001 f8ad 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000fc 	.word	0x200000fc

08001454 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <OTG_FS_IRQHandler+0x10>)
 800145a:	f001 ffa3 	bl	80033a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200006d4 	.word	0x200006d4

08001468 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e00a      	b.n	8001490 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800147a:	f3af 8000 	nop.w
 800147e:	4601      	mov	r1, r0
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	60ba      	str	r2, [r7, #8]
 8001486:	b2ca      	uxtb	r2, r1
 8001488:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbf0      	blt.n	800147a <_read+0x12>
  }

  return len;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ca:	605a      	str	r2, [r3, #4]
  return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_isatty>:

int _isatty(int file)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f009 ff4e 	bl	800b3dc <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20020000 	.word	0x20020000
 800156c:	00000400 	.word	0x00000400
 8001570:	200002f0 	.word	0x200002f0
 8001574:	20000c00 	.word	0x20000c00

08001578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800159c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015a0:	f7ff ffea 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	@ (80015dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	@ (80015e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ca:	f009 ff0d 	bl	800b3e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ce:	f7ff f80b 	bl	80005e8 <main>
  bx  lr    
 80015d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80015e0:	0800bdb0 	.word	0x0800bdb0
  ldr r2, =_sbss
 80015e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80015e8:	20000c00 	.word	0x20000c00

080015ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <CAN1_RX0_IRQHandler>
	...

080015f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <HAL_Init+0x40>)
 80015fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <HAL_Init+0x40>)
 8001606:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800160a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <HAL_Init+0x40>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 fe7b 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fc82 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023c00 	.word	0x40023c00

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fe93 	bl	800237e <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 fe5b 	bl	800232a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	@ (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000010 	.word	0x20000010
 800168c:	20000018 	.word	0x20000018
 8001690:	20000014 	.word	0x20000014

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000018 	.word	0x20000018
 80016b8:	200002f4 	.word	0x200002f4

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	200002f4 	.word	0x200002f4

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff ffee 	bl	80016bc <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffde 	bl	80016bc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000018 	.word	0x20000018

0800171c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e033      	b.n	800179a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fc1e 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001762:	f023 0302 	bic.w	r3, r3, #2
 8001766:	f043 0202 	orr.w	r2, r3, #2
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fb78 	bl	8001e64 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f023 0303 	bic.w	r3, r3, #3
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	641a      	str	r2, [r3, #64]	@ 0x40
 800178a:	e001      	b.n	8001790 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d049      	beq.n	800186c <HAL_ADC_IRQHandler+0xca>
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d046      	beq.n	800186c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d12b      	bne.n	800185c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001808:	2b00      	cmp	r3, #0
 800180a:	d127      	bne.n	800185c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001812:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001824:	2b00      	cmp	r3, #0
 8001826:	d119      	bne.n	800185c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0220 	bic.w	r2, r2, #32
 8001836:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe ffe9 	bl	8000834 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f06f 0212 	mvn.w	r2, #18
 800186a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d057      	beq.n	8001932 <HAL_ADC_IRQHandler+0x190>
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d054      	beq.n	8001932 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d139      	bne.n	8001922 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d12b      	bne.n	8001922 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d124      	bne.n	8001922 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11d      	bne.n	8001922 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d119      	bne.n	8001922 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018fc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fc1c 	bl	8002160 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f06f 020c 	mvn.w	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001940:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d017      	beq.n	8001978 <HAL_ADC_IRQHandler+0x1d6>
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d014      	beq.n	8001978 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10d      	bne.n	8001978 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f945 	bl	8001bf8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f06f 0201 	mvn.w	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001986:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d015      	beq.n	80019ba <HAL_ADC_IRQHandler+0x218>
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d012      	beq.n	80019ba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	f043 0202 	orr.w	r2, r3, #2
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0220 	mvn.w	r2, #32
 80019a8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f92e 	bl	8001c0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f06f 0220 	mvn.w	r2, #32
 80019b8:	601a      	str	r2, [r3, #0]
  }
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Start_DMA+0x1e>
 80019de:	2302      	movs	r3, #2
 80019e0:	e0e9      	b.n	8001bb6 <HAL_ADC_Start_DMA+0x1f2>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d018      	beq.n	8001a2a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a08:	4b6d      	ldr	r3, [pc, #436]	@ (8001bc0 <HAL_ADC_Start_DMA+0x1fc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a6d      	ldr	r2, [pc, #436]	@ (8001bc4 <HAL_ADC_Start_DMA+0x200>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0c9a      	lsrs	r2, r3, #18
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a38:	d107      	bne.n	8001a4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a48:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	f040 80a1 	bne.w	8001b9c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a98:	d106      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f023 0206 	bic.w	r2, r3, #6
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001aa6:	e002      	b.n	8001aae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab6:	4b44      	ldr	r3, [pc, #272]	@ (8001bc8 <HAL_ADC_Start_DMA+0x204>)
 8001ab8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001abe:	4a43      	ldr	r2, [pc, #268]	@ (8001bcc <HAL_ADC_Start_DMA+0x208>)
 8001ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac6:	4a42      	ldr	r2, [pc, #264]	@ (8001bd0 <HAL_ADC_Start_DMA+0x20c>)
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ace:	4a41      	ldr	r2, [pc, #260]	@ (8001bd4 <HAL_ADC_Start_DMA+0x210>)
 8001ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ada:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001aea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001afa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	334c      	adds	r3, #76	@ 0x4c
 8001b06:	4619      	mov	r1, r3
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f000 fcf2 	bl	80024f4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d12a      	bne.n	8001b72 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd8 <HAL_ADC_Start_DMA+0x214>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d015      	beq.n	8001b52 <HAL_ADC_Start_DMA+0x18e>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001bdc <HAL_ADC_Start_DMA+0x218>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d105      	bne.n	8001b3c <HAL_ADC_Start_DMA+0x178>
 8001b30:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <HAL_ADC_Start_DMA+0x204>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00a      	beq.n	8001b52 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a27      	ldr	r2, [pc, #156]	@ (8001be0 <HAL_ADC_Start_DMA+0x21c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d136      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x1f0>
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_ADC_Start_DMA+0x204>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d130      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d129      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e020      	b.n	8001bb4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a18      	ldr	r2, [pc, #96]	@ (8001bd8 <HAL_ADC_Start_DMA+0x214>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x1f0>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d114      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f043 0210 	orr.w	r2, r3, #16
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000010 	.word	0x20000010
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	40012300 	.word	0x40012300
 8001bcc:	0800205d 	.word	0x0800205d
 8001bd0:	08002117 	.word	0x08002117
 8001bd4:	08002133 	.word	0x08002133
 8001bd8:	40012000 	.word	0x40012000
 8001bdc:	40012100 	.word	0x40012100
 8001be0:	40012200 	.word	0x40012200

08001be4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e105      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x228>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d925      	bls.n	8001c98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68d9      	ldr	r1, [r3, #12]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	2207      	movs	r2, #7
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	400a      	ands	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68d9      	ldr	r1, [r3, #12]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4403      	add	r3, r0
 8001c8a:	3b1e      	subs	r3, #30
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	e022      	b.n	8001cde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	2207      	movs	r2, #7
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	4603      	mov	r3, r0
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4403      	add	r3, r0
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d824      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b05      	subs	r3, #5
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b05      	subs	r3, #5
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d2e:	e04c      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d824      	bhi.n	8001d82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3b23      	subs	r3, #35	@ 0x23
 8001d4a:	221f      	movs	r2, #31
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43da      	mvns	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	400a      	ands	r2, r1
 8001d58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b23      	subs	r3, #35	@ 0x23
 8001d74:	fa00 f203 	lsl.w	r2, r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d80:	e023      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b41      	subs	r3, #65	@ 0x41
 8001d94:	221f      	movs	r2, #31
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b41      	subs	r3, #65	@ 0x41
 8001dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <HAL_ADC_ConfigChannel+0x234>)
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <HAL_ADC_ConfigChannel+0x238>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1cc>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b12      	cmp	r3, #18
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_ADC_ConfigChannel+0x238>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d123      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x21e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d003      	beq.n	8001e06 <HAL_ADC_ConfigChannel+0x1e6>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b11      	cmp	r3, #17
 8001e04:	d11b      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d111      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_ADC_ConfigChannel+0x23c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a10      	ldr	r2, [pc, #64]	@ (8001e60 <HAL_ADC_ConfigChannel+0x240>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	0c9a      	lsrs	r2, r3, #18
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000
 8001e5c:	20000010 	.word	0x20000010
 8001e60:	431bde83 	.word	0x431bde83

08001e64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6c:	4b79      	ldr	r3, [pc, #484]	@ (8002054 <ADC_Init+0x1f0>)
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	021a      	lsls	r2, r3, #8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	4a58      	ldr	r2, [pc, #352]	@ (8002058 <ADC_Init+0x1f4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d022      	beq.n	8001f42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e00f      	b.n	8001f62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f60:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0202 	bic.w	r2, r2, #2
 8001f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e1b      	ldrb	r3, [r3, #24]
 8001f7c:	005a      	lsls	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f9e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	035a      	lsls	r2, r3, #13
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	e007      	b.n	8001fd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fd6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	051a      	lsls	r2, r3, #20
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800200c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800201a:	025a      	lsls	r2, r3, #9
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	029a      	lsls	r2, r3, #10
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40012300 	.word	0x40012300
 8002058:	0f000001 	.word	0x0f000001

0800205c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002068:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002072:	2b00      	cmp	r3, #0
 8002074:	d13c      	bne.n	80020f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d12b      	bne.n	80020e8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d127      	bne.n	80020e8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d119      	bne.n	80020e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0220 	bic.w	r2, r2, #32
 80020c2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7fe fba3 	bl	8000834 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020ee:	e00e      	b.n	800210e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7ff fd85 	bl	8001c0c <HAL_ADC_ErrorCallback>
}
 8002102:	e004      	b.n	800210e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002122:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff fd5d 	bl	8001be4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	@ 0x40
 8002144:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fd5a 	bl	8001c0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <__NVIC_SetPriorityGrouping>:
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800219c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_GetPriorityGrouping>:
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c0:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <__NVIC_GetPriorityGrouping+0x18>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0307 	and.w	r3, r3, #7
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_EnableIRQ>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db0b      	blt.n	8002202 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	4907      	ldr	r1, [pc, #28]	@ (8002210 <__NVIC_EnableIRQ+0x38>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000e100 	.word	0xe000e100

08002214 <__NVIC_SetPriority>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	@ (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	@ (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	@ 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	@ 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <SysTick_Config>:
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff8e 	bl	8002214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff29 	bl	8002174 <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff3e 	bl	80021bc <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff8e 	bl	8002268 <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5d 	bl	8002214 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff31 	bl	80021d8 <__NVIC_EnableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffa2 	bl	80022d0 <SysTick_Config>
 800238c:	4603      	mov	r3, r0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff f98a 	bl	80016bc <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e099      	b.n	80024e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d4:	e00f      	b.n	80023f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d6:	f7ff f971 	bl	80016bc <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d908      	bls.n	80023f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2203      	movs	r2, #3
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e078      	b.n	80024e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e8      	bne.n	80023d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4b38      	ldr	r3, [pc, #224]	@ (80024f0 <HAL_DMA_Init+0x158>)
 8002410:	4013      	ands	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002422:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	2b04      	cmp	r3, #4
 800244e:	d107      	bne.n	8002460 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002458:	4313      	orrs	r3, r2
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f023 0307 	bic.w	r3, r3, #7
 8002476:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	2b04      	cmp	r3, #4
 8002488:	d117      	bne.n	80024ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00e      	beq.n	80024ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fa6f 	bl	8002980 <DMA_CheckFifoParam>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2240      	movs	r2, #64	@ 0x40
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024b6:	2301      	movs	r3, #1
 80024b8:	e016      	b.n	80024e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fa26 	bl	8002914 <DMA_CalcBaseAndBitshift>
 80024c8:	4603      	mov	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	223f      	movs	r2, #63	@ 0x3f
 80024d2:	409a      	lsls	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	f010803f 	.word	0xf010803f

080024f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_DMA_Start_IT+0x26>
 8002516:	2302      	movs	r3, #2
 8002518:	e040      	b.n	800259c <HAL_DMA_Start_IT+0xa8>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d12f      	bne.n	800258e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2202      	movs	r2, #2
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f9b8 	bl	80028b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254c:	223f      	movs	r2, #63	@ 0x3f
 800254e:	409a      	lsls	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0216 	orr.w	r2, r2, #22
 8002562:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0208 	orr.w	r2, r2, #8
 800257a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e005      	b.n	800259a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800259a:	7dfb      	ldrb	r3, [r7, #23]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025b0:	4b8e      	ldr	r3, [pc, #568]	@ (80027ec <HAL_DMA_IRQHandler+0x248>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a8e      	ldr	r2, [pc, #568]	@ (80027f0 <HAL_DMA_IRQHandler+0x24c>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ce:	2208      	movs	r2, #8
 80025d0:	409a      	lsls	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01a      	beq.n	8002610 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	2208      	movs	r2, #8
 80025fe:	409a      	lsls	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	2201      	movs	r2, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	2201      	movs	r2, #1
 8002634:	409a      	lsls	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	f043 0202 	orr.w	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	2204      	movs	r2, #4
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002668:	2204      	movs	r2, #4
 800266a:	409a      	lsls	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	2210      	movs	r2, #16
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d043      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03c      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	2210      	movs	r2, #16
 80026a0:	409a      	lsls	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d024      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
 80026d2:	e01f      	b.n	8002714 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
 80026e4:	e016      	b.n	8002714 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d107      	bne.n	8002704 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0208 	bic.w	r2, r2, #8
 8002702:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	2220      	movs	r2, #32
 800271a:	409a      	lsls	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 808f 	beq.w	8002844 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8087 	beq.w	8002844 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	2220      	movs	r2, #32
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b05      	cmp	r3, #5
 800274c:	d136      	bne.n	80027bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0216 	bic.w	r2, r2, #22
 800275c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800276c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_DMA_IRQHandler+0x1da>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0208 	bic.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002792:	223f      	movs	r2, #63	@ 0x3f
 8002794:	409a      	lsls	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07e      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
        }
        return;
 80027ba:	e079      	b.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01d      	beq.n	8002806 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d031      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
 80027e8:	e02c      	b.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
 80027ea:	bf00      	nop
 80027ec:	20000010 	.word	0x20000010
 80027f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
 8002804:	e01e      	b.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0210 	bic.w	r2, r2, #16
 8002822:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d032      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d022      	beq.n	800289e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2205      	movs	r2, #5
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d307      	bcc.n	800288c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f2      	bne.n	8002870 <HAL_DMA_IRQHandler+0x2cc>
 800288a:	e000      	b.n	800288e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800288c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
 80028ae:	e000      	b.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028b0:	bf00      	nop
    }
  }
}
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b40      	cmp	r3, #64	@ 0x40
 80028e4:	d108      	bne.n	80028f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028f6:	e007      	b.n	8002908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3b10      	subs	r3, #16
 8002924:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <DMA_CalcBaseAndBitshift+0x64>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800292e:	4a13      	ldr	r2, [pc, #76]	@ (800297c <DMA_CalcBaseAndBitshift+0x68>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d909      	bls.n	8002956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	1d1a      	adds	r2, r3, #4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	@ 0x58
 8002954:	e007      	b.n	8002966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	aaaaaaab 	.word	0xaaaaaaab
 800297c:	0800bd64 	.word	0x0800bd64

08002980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11f      	bne.n	80029da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d856      	bhi.n	8002a4e <DMA_CheckFifoParam+0xce>
 80029a0:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <DMA_CheckFifoParam+0x28>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029cb 	.word	0x080029cb
 80029b0:	080029b9 	.word	0x080029b9
 80029b4:	08002a4f 	.word	0x08002a4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d046      	beq.n	8002a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c8:	e043      	b.n	8002a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029d2:	d140      	bne.n	8002a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e03d      	b.n	8002a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e2:	d121      	bne.n	8002a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d837      	bhi.n	8002a5a <DMA_CheckFifoParam+0xda>
 80029ea:	a201      	add	r2, pc, #4	@ (adr r2, 80029f0 <DMA_CheckFifoParam+0x70>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a07 	.word	0x08002a07
 80029f8:	08002a01 	.word	0x08002a01
 80029fc:	08002a19 	.word	0x08002a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e030      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d025      	beq.n	8002a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a16:	e022      	b.n	8002a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a20:	d11f      	bne.n	8002a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a26:	e01c      	b.n	8002a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d903      	bls.n	8002a36 <DMA_CheckFifoParam+0xb6>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d003      	beq.n	8002a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a34:	e018      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3a:	e015      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00e      	beq.n	8002a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e00b      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e00a      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e008      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e006      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e004      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
    }
  } 
  
  return status; 
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e16b      	b.n	8002d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a94:	2201      	movs	r2, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f040 815a 	bne.w	8002d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d130      	bne.n	8002b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 0201 	and.w	r2, r3, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d017      	beq.n	8002b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80b4 	beq.w	8002d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b60      	ldr	r3, [pc, #384]	@ (8002d84 <HAL_GPIO_Init+0x30c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	4a5f      	ldr	r2, [pc, #380]	@ (8002d84 <HAL_GPIO_Init+0x30c>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d84 <HAL_GPIO_Init+0x30c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d88 <HAL_GPIO_Init+0x310>)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a52      	ldr	r2, [pc, #328]	@ (8002d8c <HAL_GPIO_Init+0x314>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <HAL_GPIO_Init+0x226>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a51      	ldr	r2, [pc, #324]	@ (8002d90 <HAL_GPIO_Init+0x318>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d025      	beq.n	8002c9a <HAL_GPIO_Init+0x222>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a50      	ldr	r2, [pc, #320]	@ (8002d94 <HAL_GPIO_Init+0x31c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <HAL_GPIO_Init+0x21e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4f      	ldr	r2, [pc, #316]	@ (8002d98 <HAL_GPIO_Init+0x320>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x21a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4e      	ldr	r2, [pc, #312]	@ (8002d9c <HAL_GPIO_Init+0x324>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x216>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4d      	ldr	r2, [pc, #308]	@ (8002da0 <HAL_GPIO_Init+0x328>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x212>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	@ (8002da4 <HAL_GPIO_Init+0x32c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x20e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4b      	ldr	r2, [pc, #300]	@ (8002da8 <HAL_GPIO_Init+0x330>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x20a>
 8002c7e:	2307      	movs	r3, #7
 8002c80:	e00e      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c82:	2308      	movs	r3, #8
 8002c84:	e00c      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c86:	2306      	movs	r3, #6
 8002c88:	e00a      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	e008      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e004      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f002 0203 	and.w	r2, r2, #3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb0:	4935      	ldr	r1, [pc, #212]	@ (8002d88 <HAL_GPIO_Init+0x310>)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_GPIO_Init+0x334>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce2:	4a32      	ldr	r2, [pc, #200]	@ (8002dac <HAL_GPIO_Init+0x334>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce8:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <HAL_GPIO_Init+0x334>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d0c:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <HAL_GPIO_Init+0x334>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d12:	4b26      	ldr	r3, [pc, #152]	@ (8002dac <HAL_GPIO_Init+0x334>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d36:	4a1d      	ldr	r2, [pc, #116]	@ (8002dac <HAL_GPIO_Init+0x334>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <HAL_GPIO_Init+0x334>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d60:	4a12      	ldr	r2, [pc, #72]	@ (8002dac <HAL_GPIO_Init+0x334>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	f67f ae90 	bls.w	8002a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40013800 	.word	0x40013800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020400 	.word	0x40020400
 8002d94:	40020800 	.word	0x40020800
 8002d98:	40020c00 	.word	0x40020c00
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40021400 	.word	0x40021400
 8002da4:	40021800 	.word	0x40021800
 8002da8:	40021c00 	.word	0x40021c00
 8002dac:	40013c00 	.word	0x40013c00

08002db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dcc:	e003      	b.n	8002dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	041a      	lsls	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	619a      	str	r2, [r3, #24]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af02      	add	r7, sp, #8
 8002de8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e059      	b.n	8002ea8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f007 fd12 	bl	800a838 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2203      	movs	r2, #3
 8002e18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e22:	d102      	bne.n	8002e2a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f004 fb2b 	bl	800748a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7c1a      	ldrb	r2, [r3, #16]
 8002e3c:	f88d 2000 	strb.w	r2, [sp]
 8002e40:	3304      	adds	r3, #4
 8002e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e44:	f004 faac 	bl	80073a0 <USB_CoreInit>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2202      	movs	r2, #2
 8002e52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e026      	b.n	8002ea8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f004 fb23 	bl	80074ac <USB_SetCurrentMode>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e017      	b.n	8002ea8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7c1a      	ldrb	r2, [r3, #16]
 8002e80:	f88d 2000 	strb.w	r2, [sp]
 8002e84:	3304      	adds	r3, #4
 8002e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e88:	f004 fcc6 	bl	8007818 <USB_HostInit>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2202      	movs	r2, #2
 8002e96:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e004      	b.n	8002ea8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b08b      	sub	sp, #44	@ 0x2c
 8002eb4:	af04      	add	r7, sp, #16
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	4608      	mov	r0, r1
 8002eba:	4611      	mov	r1, r2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	70fb      	strb	r3, [r7, #3]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70bb      	strb	r3, [r7, #2]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002eca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002ecc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_HCD_HC_Init+0x2c>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e09d      	b.n	8003018 <HAL_HCD_HC_Init+0x168>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3319      	adds	r3, #25
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3314      	adds	r3, #20
 8002f08:	787a      	ldrb	r2, [r7, #1]
 8002f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3315      	adds	r3, #21
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3326      	adds	r3, #38	@ 0x26
 8002f30:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002f34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	78bb      	ldrb	r3, [r7, #2]
 8002f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f3e:	b2d8      	uxtb	r0, r3
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3316      	adds	r3, #22
 8002f4e:	4602      	mov	r2, r0
 8002f50:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fbc8 	bl	80036ec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002f5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	da0a      	bge.n	8002f7a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3317      	adds	r3, #23
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e009      	b.n	8002f8e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3317      	adds	r3, #23
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 fda4 	bl	8007ae0 <USB_GetHostSpeed>
 8002f98:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10b      	bne.n	8002fba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002fa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d107      	bne.n	8002fba <HAL_HCD_HC_Init+0x10a>
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d104      	bne.n	8002fba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2bbc      	cmp	r3, #188	@ 0xbc
 8002fb4:	d901      	bls.n	8002fba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002fb6:	23bc      	movs	r3, #188	@ 0xbc
 8002fb8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3318      	adds	r3, #24
 8002fca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	b298      	uxth	r0, r3
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3328      	adds	r3, #40	@ 0x28
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	787c      	ldrb	r4, [r7, #1]
 8002ff2:	78ba      	ldrb	r2, [r7, #2]
 8002ff4:	78f9      	ldrb	r1, [r7, #3]
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4623      	mov	r3, r4
 8003006:	f004 fd93 	bl	8007b30 <USB_HC_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd90      	pop	{r4, r7, pc}

08003020 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_HCD_HC_Halt+0x1e>
 800303a:	2302      	movs	r3, #2
 800303c:	e00f      	b.n	800305e <HAL_HCD_HC_Halt+0x3e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f005 f925 	bl	800829e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	70fb      	strb	r3, [r7, #3]
 800307a:	460b      	mov	r3, r1
 800307c:	70bb      	strb	r3, [r7, #2]
 800307e:	4613      	mov	r3, r2
 8003080:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3317      	adds	r3, #23
 8003092:	78ba      	ldrb	r2, [r7, #2]
 8003094:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3326      	adds	r3, #38	@ 0x26
 80030a6:	787a      	ldrb	r2, [r7, #1]
 80030a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030aa:	7c3b      	ldrb	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d114      	bne.n	80030da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	332a      	adds	r3, #42	@ 0x2a
 80030c0:	2203      	movs	r2, #3
 80030c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3319      	adds	r3, #25
 80030d4:	7f3a      	ldrb	r2, [r7, #28]
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e009      	b.n	80030ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	332a      	adds	r3, #42	@ 0x2a
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80030ee:	787b      	ldrb	r3, [r7, #1]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	f200 8102 	bhi.w	80032fa <HAL_HCD_HC_SubmitRequest+0x292>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	080032e5 	.word	0x080032e5
 8003104:	080031d1 	.word	0x080031d1
 8003108:	0800325b 	.word	0x0800325b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800310c:	7c3b      	ldrb	r3, [r7, #16]
 800310e:	2b01      	cmp	r3, #1
 8003110:	f040 80f5 	bne.w	80032fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003114:	78bb      	ldrb	r3, [r7, #2]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d12d      	bne.n	8003176 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800311a:	8b3b      	ldrh	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	333d      	adds	r3, #61	@ 0x3d
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	333d      	adds	r3, #61	@ 0x3d
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	332a      	adds	r3, #42	@ 0x2a
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800315e:	e0ce      	b.n	80032fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	332a      	adds	r3, #42	@ 0x2a
 8003170:	2202      	movs	r2, #2
 8003172:	701a      	strb	r2, [r3, #0]
      break;
 8003174:	e0c3      	b.n	80032fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	331a      	adds	r3, #26
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	f040 80b8 	bne.w	80032fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	333c      	adds	r3, #60	@ 0x3c
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	332a      	adds	r3, #42	@ 0x2a
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
      break;
 80031b8:	e0a1      	b.n	80032fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	332a      	adds	r3, #42	@ 0x2a
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
      break;
 80031ce:	e096      	b.n	80032fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031d0:	78bb      	ldrb	r3, [r7, #2]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d120      	bne.n	8003218 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	333d      	adds	r3, #61	@ 0x3d
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	332a      	adds	r3, #42	@ 0x2a
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003200:	e07e      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	332a      	adds	r3, #42	@ 0x2a
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
      break;
 8003216:	e073      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	333c      	adds	r3, #60	@ 0x3c
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	332a      	adds	r3, #42	@ 0x2a
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
      break;
 8003242:	e05d      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	332a      	adds	r3, #42	@ 0x2a
 8003254:	2202      	movs	r2, #2
 8003256:	701a      	strb	r2, [r3, #0]
      break;
 8003258:	e052      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800325a:	78bb      	ldrb	r3, [r7, #2]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d120      	bne.n	80032a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	333d      	adds	r3, #61	@ 0x3d
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	332a      	adds	r3, #42	@ 0x2a
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800328a:	e039      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	332a      	adds	r3, #42	@ 0x2a
 800329c:	2202      	movs	r2, #2
 800329e:	701a      	strb	r2, [r3, #0]
      break;
 80032a0:	e02e      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	333c      	adds	r3, #60	@ 0x3c
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	332a      	adds	r3, #42	@ 0x2a
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
      break;
 80032cc:	e018      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	332a      	adds	r3, #42	@ 0x2a
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
      break;
 80032e2:	e00d      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	332a      	adds	r3, #42	@ 0x2a
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
      break;
 80032f8:	e002      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80032fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	332c      	adds	r3, #44	@ 0x2c
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	8b39      	ldrh	r1, [r7, #24]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4403      	add	r3, r0
 8003324:	3334      	adds	r3, #52	@ 0x34
 8003326:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334c      	adds	r3, #76	@ 0x4c
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3338      	adds	r3, #56	@ 0x38
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3315      	adds	r3, #21
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334d      	adds	r3, #77	@ 0x4d
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3310      	adds	r3, #16
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	1d19      	adds	r1, r3, #4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	799b      	ldrb	r3, [r3, #6]
 8003392:	461a      	mov	r2, r3
 8003394:	f004 fcf8 	bl	8007d88 <USB_HC_StartXfer>
 8003398:	4603      	mov	r3, r0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop

080033a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 f9ec 	bl	8007798 <USB_GetMode>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	f040 80fb 	bne.w	80035be <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 f9af 	bl	8007730 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80f1 	beq.w	80035bc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 f9a6 	bl	8007730 <USB_ReadInterrupts>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033ee:	d104      	bne.n	80033fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80033f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 f996 	bl	8007730 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800340a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800340e:	d104      	bne.n	800341a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003418:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 f986 	bl	8007730 <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800342a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800342e:	d104      	bne.n	800343a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003438:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f004 f976 	bl	8007730 <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d103      	bne.n	8003456 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2202      	movs	r2, #2
 8003454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f004 f968 	bl	8007730 <USB_ReadInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800346a:	d120      	bne.n	80034ae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003474:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d113      	bne.n	80034ae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003486:	2110      	movs	r1, #16
 8003488:	6938      	ldr	r0, [r7, #16]
 800348a:	f004 f85b 	bl	8007544 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800348e:	6938      	ldr	r0, [r7, #16]
 8003490:	f004 f88a 	bl	80075a8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7a5b      	ldrb	r3, [r3, #9]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d105      	bne.n	80034a8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f004 fa7c 	bl	80079a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f007 fa43 	bl	800a934 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 f93c 	bl	8007730 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034c2:	d102      	bne.n	80034ca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f001 fd4d 	bl	8004f64 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 f92e 	bl	8007730 <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d106      	bne.n	80034ec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f007 fa0c 	bl	800a8fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2208      	movs	r2, #8
 80034ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f004 f91d 	bl	8007730 <USB_ReadInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003500:	d139      	bne.n	8003576 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 feb8 	bl	800827c <USB_HC_ReadInterrupt>
 800350c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e025      	b.n	8003560 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d018      	beq.n	800355a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800353a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800353e:	d106      	bne.n	800354e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f905 	bl	8003756 <HCD_HC_IN_IRQHandler>
 800354c:	e005      	b.n	800355a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 ff67 	bl	8004428 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	795b      	ldrb	r3, [r3, #5]
 8003564:	461a      	mov	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4293      	cmp	r3, r2
 800356a:	d3d3      	bcc.n	8003514 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f004 f8d8 	bl	8007730 <USB_ReadInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b10      	cmp	r3, #16
 8003588:	d101      	bne.n	800358e <HAL_HCD_IRQHandler+0x1ea>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_HCD_IRQHandler+0x1ec>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d014      	beq.n	80035be <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0210 	bic.w	r2, r2, #16
 80035a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f001 fbfe 	bl	8004da6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0210 	orr.w	r2, r2, #16
 80035b8:	619a      	str	r2, [r3, #24]
 80035ba:	e000      	b.n	80035be <HAL_HCD_IRQHandler+0x21a>
      return;
 80035bc:	bf00      	nop
    }
  }
}
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_HCD_Start+0x16>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e013      	b.n	8003602 <HAL_HCD_Start+0x3e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f004 fa40 	bl	8007a6e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 ff38 	bl	8007468 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_HCD_Stop+0x16>
 800361c:	2302      	movs	r3, #2
 800361e:	e00d      	b.n	800363c <HAL_HCD_Stop+0x32>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f004 ff93 	bl	8008558 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f004 f9e2 	bl	8007a1a <USB_ResetPort>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334c      	adds	r3, #76	@ 0x4c
 800367c:	781b      	ldrb	r3, [r3, #0]
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3338      	adds	r3, #56	@ 0x38
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 fa24 	bl	8007b0e <USB_GetCurrentFrame>
 80036c6:	4603      	mov	r3, r0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 f9ff 	bl	8007ae0 <USB_GetHostSpeed>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	331a      	adds	r3, #26
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	331b      	adds	r3, #27
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	3325      	adds	r3, #37	@ 0x25
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3324      	adds	r3, #36	@ 0x24
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f003 ffee 	bl	8007756 <USB_ReadChInterrupts>
 800377a:	4603      	mov	r3, r0
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11a      	bne.n	80037ba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003790:	461a      	mov	r2, r3
 8003792:	2304      	movs	r3, #4
 8003794:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	334d      	adds	r3, #77	@ 0x4d
 80037a6:	2207      	movs	r2, #7
 80037a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 fd73 	bl	800829e <USB_HC_Halt>
 80037b8:	e09e      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f003 ffc7 	bl	8007756 <USB_ReadChInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d2:	d11b      	bne.n	800380c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	461a      	mov	r2, r3
 80037e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	334d      	adds	r3, #77	@ 0x4d
 80037f8:	2208      	movs	r2, #8
 80037fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f004 fd4a 	bl	800829e <USB_HC_Halt>
 800380a:	e075      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f003 ff9e 	bl	8007756 <USB_ReadChInterrupts>
 800381a:	4603      	mov	r3, r0
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d11a      	bne.n	800385a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003830:	461a      	mov	r2, r3
 8003832:	2308      	movs	r3, #8
 8003834:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	334d      	adds	r3, #77	@ 0x4d
 8003846:	2206      	movs	r2, #6
 8003848:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fd23 	bl	800829e <USB_HC_Halt>
 8003858:	e04e      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f003 ff77 	bl	8007756 <USB_ReadChInterrupts>
 8003868:	4603      	mov	r3, r0
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003872:	d11b      	bne.n	80038ac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003886:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	334d      	adds	r3, #77	@ 0x4d
 8003898:	2209      	movs	r2, #9
 800389a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f004 fcfa 	bl	800829e <USB_HC_Halt>
 80038aa:	e025      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 ff4e 	bl	8007756 <USB_ReadChInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c0:	2b80      	cmp	r3, #128	@ 0x80
 80038c2:	d119      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	2380      	movs	r3, #128	@ 0x80
 80038d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	334d      	adds	r3, #77	@ 0x4d
 80038e6:	2207      	movs	r2, #7
 80038e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fcd3 	bl	800829e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f003 ff28 	bl	8007756 <USB_ReadChInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003910:	d112      	bne.n	8003938 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	4611      	mov	r1, r2
 800391a:	4618      	mov	r0, r3
 800391c:	f004 fcbf 	bl	800829e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003932:	6093      	str	r3, [r2, #8]
 8003934:	f000 bd75 	b.w	8004422 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f003 ff08 	bl	8007756 <USB_ReadChInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	f040 8128 	bne.w	8003ba2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800395e:	461a      	mov	r2, r3
 8003960:	2320      	movs	r3, #32
 8003962:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	331b      	adds	r3, #27
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d119      	bne.n	80039ae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	331b      	adds	r3, #27
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	0151      	lsls	r1, r2, #5
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	440a      	add	r2, r1
 80039a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	799b      	ldrb	r3, [r3, #6]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01b      	beq.n	80039ee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	3330      	adds	r3, #48	@ 0x30
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	1ac9      	subs	r1, r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4403      	add	r3, r0
 80039ea:	3338      	adds	r3, #56	@ 0x38
 80039ec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334d      	adds	r3, #77	@ 0x4d
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	3344      	adds	r3, #68	@ 0x44
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a22:	461a      	mov	r2, r3
 8003a24:	2301      	movs	r3, #1
 8003a26:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3326      	adds	r3, #38	@ 0x26
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3326      	adds	r3, #38	@ 0x26
 8003a4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d110      	bne.n	8003a76 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f004 fc1e 	bl	800829e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2310      	movs	r3, #16
 8003a72:	6093      	str	r3, [r2, #8]
 8003a74:	e03d      	b.n	8003af2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3326      	adds	r3, #38	@ 0x26
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d00a      	beq.n	8003aa2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3326      	adds	r3, #38	@ 0x26
 8003a9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d127      	bne.n	8003af2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003abc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ac0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	334c      	adds	r3, #76	@ 0x4c
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	334c      	adds	r3, #76	@ 0x4c
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f006 ff2f 	bl	800a950 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	799b      	ldrb	r3, [r3, #6]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d13b      	bne.n	8003b72 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3338      	adds	r3, #56	@ 0x38
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4403      	add	r3, r0
 8003b1a:	3328      	adds	r3, #40	@ 0x28
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	440b      	add	r3, r1
 8003b20:	1e59      	subs	r1, r3, #1
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4403      	add	r3, r0
 8003b30:	3328      	adds	r3, #40	@ 0x28
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8470 	beq.w	8004422 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	333c      	adds	r3, #60	@ 0x3c
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	f083 0301 	eor.w	r3, r3, #1
 8003b5a:	b2d8      	uxtb	r0, r3
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	333c      	adds	r3, #60	@ 0x3c
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	f000 bc58 	b.w	8004422 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	333c      	adds	r3, #60	@ 0x3c
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	f083 0301 	eor.w	r3, r3, #1
 8003b8a:	b2d8      	uxtb	r0, r3
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	333c      	adds	r3, #60	@ 0x3c
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	f000 bc40 	b.w	8004422 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fdd3 	bl	8007756 <USB_ReadChInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d131      	bne.n	8003c1e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2320      	movs	r3, #32
 8003bca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	331a      	adds	r3, #26
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	f040 841f 	bne.w	8004422 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	331b      	adds	r3, #27
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	2203      	movs	r2, #3
 8003c0a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fb42 	bl	800829e <USB_HC_Halt>
 8003c1a:	f000 bc02 	b.w	8004422 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 fd95 	bl	8007756 <USB_ReadChInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	f040 8305 	bne.w	8004242 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2302      	movs	r3, #2
 8003c48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	334d      	adds	r3, #77	@ 0x4d
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d114      	bne.n	8003c8a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	@ 0x4d
 8003c70:	2202      	movs	r2, #2
 8003c72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	334c      	adds	r3, #76	@ 0x4c
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e2cc      	b.n	8004224 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	334d      	adds	r3, #77	@ 0x4d
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d114      	bne.n	8003cca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	334d      	adds	r3, #77	@ 0x4d
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334c      	adds	r3, #76	@ 0x4c
 8003cc4:	2205      	movs	r2, #5
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e2ac      	b.n	8004224 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	334d      	adds	r3, #77	@ 0x4d
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b07      	cmp	r3, #7
 8003cde:	d00b      	beq.n	8003cf8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334d      	adds	r3, #77	@ 0x4d
 8003cf0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003cf2:	2b09      	cmp	r3, #9
 8003cf4:	f040 80a6 	bne.w	8003e44 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	334d      	adds	r3, #77	@ 0x4d
 8003d08:	2202      	movs	r2, #2
 8003d0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3344      	adds	r3, #68	@ 0x44
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	3344      	adds	r3, #68	@ 0x44
 8003d2e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3344      	adds	r3, #68	@ 0x44
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d943      	bls.n	8003dce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3344      	adds	r3, #68	@ 0x44
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	331a      	adds	r3, #26
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d123      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	331b      	adds	r3, #27
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	331c      	adds	r3, #28
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	0151      	lsls	r1, r2, #5
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	440a      	add	r2, r1
 8003dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	334c      	adds	r3, #76	@ 0x4c
 8003dc8:	2204      	movs	r2, #4
 8003dca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003dcc:	e229      	b.n	8004222 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	334c      	adds	r3, #76	@ 0x4c
 8003dde:	2202      	movs	r2, #2
 8003de0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	3326      	adds	r3, #38	@ 0x26
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00b      	beq.n	8003e10 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3326      	adds	r3, #38	@ 0x26
 8003e08:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	f040 8209 	bne.w	8004222 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e26:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e2e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e42:	e1ee      	b.n	8004222 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334d      	adds	r3, #77	@ 0x4d
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	f040 80c8 	bne.w	8003fec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334d      	adds	r3, #77	@ 0x4d
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	331b      	adds	r3, #27
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	f040 81ce 	bne.w	8004224 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	3326      	adds	r3, #38	@ 0x26
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d16b      	bne.n	8003f76 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3348      	adds	r3, #72	@ 0x48
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	1c59      	adds	r1, r3, #1
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4403      	add	r3, r0
 8003ebe:	3348      	adds	r3, #72	@ 0x48
 8003ec0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3348      	adds	r3, #72	@ 0x48
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d943      	bls.n	8003f60 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3348      	adds	r3, #72	@ 0x48
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	331b      	adds	r3, #27
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3344      	adds	r3, #68	@ 0x44
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d809      	bhi.n	8003f2a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	331c      	adds	r3, #28
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f48:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	334c      	adds	r3, #76	@ 0x4c
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e014      	b.n	8003f8a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	334c      	adds	r3, #76	@ 0x4c
 8003f70:	2202      	movs	r2, #2
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	e009      	b.n	8003f8a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	334c      	adds	r3, #76	@ 0x4c
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3326      	adds	r3, #38	@ 0x26
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	3326      	adds	r3, #38	@ 0x26
 8003fb0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	f040 8136 	bne.w	8004224 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fd6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e11b      	b.n	8004224 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	334d      	adds	r3, #77	@ 0x4d
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	f040 8081 	bne.w	8004106 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	334d      	adds	r3, #77	@ 0x4d
 8004014:	2202      	movs	r2, #2
 8004016:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	331b      	adds	r3, #27
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	f040 80fa 	bne.w	8004224 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	334c      	adds	r3, #76	@ 0x4c
 8004040:	2202      	movs	r2, #2
 8004042:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	440a      	add	r2, r1
 800405a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800405e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004062:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	440a      	add	r2, r1
 800407a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800407e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004082:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	440a      	add	r2, r1
 800409a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800409e:	f023 0320 	bic.w	r3, r3, #32
 80040a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3326      	adds	r3, #38	@ 0x26
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	3326      	adds	r3, #38	@ 0x26
 80040ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	f040 80a9 	bne.w	8004224 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e08e      	b.n	8004224 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	334d      	adds	r3, #77	@ 0x4d
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b04      	cmp	r3, #4
 800411a:	d143      	bne.n	80041a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	334d      	adds	r3, #77	@ 0x4d
 800412c:	2202      	movs	r2, #2
 800412e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	334c      	adds	r3, #76	@ 0x4c
 8004140:	2202      	movs	r2, #2
 8004142:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3326      	adds	r3, #38	@ 0x26
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3326      	adds	r3, #38	@ 0x26
 800416a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800416c:	2b02      	cmp	r3, #2
 800416e:	d159      	bne.n	8004224 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004186:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800418e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419c:	461a      	mov	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e03f      	b.n	8004224 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	334d      	adds	r3, #77	@ 0x4d
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d126      	bne.n	8004208 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	334d      	adds	r3, #77	@ 0x4d
 80041ca:	2202      	movs	r2, #2
 80041cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	3344      	adds	r3, #68	@ 0x44
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1c59      	adds	r1, r3, #1
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4403      	add	r3, r0
 80041ee:	3344      	adds	r3, #68	@ 0x44
 80041f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	334c      	adds	r3, #76	@ 0x4c
 8004202:	2204      	movs	r2, #4
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e00d      	b.n	8004224 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	334d      	adds	r3, #77	@ 0x4d
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b02      	cmp	r3, #2
 800421c:	f000 8100 	beq.w	8004420 <HCD_HC_IN_IRQHandler+0xcca>
 8004220:	e000      	b.n	8004224 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004222:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	334c      	adds	r3, #76	@ 0x4c
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f006 fb88 	bl	800a950 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004240:	e0ef      	b.n	8004422 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f003 fa83 	bl	8007756 <USB_ReadChInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b40      	cmp	r3, #64	@ 0x40
 8004258:	d12f      	bne.n	80042ba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004266:	461a      	mov	r2, r3
 8004268:	2340      	movs	r3, #64	@ 0x40
 800426a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	334d      	adds	r3, #77	@ 0x4d
 800427c:	2205      	movs	r2, #5
 800427e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	331a      	adds	r3, #26
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	3344      	adds	r3, #68	@ 0x44
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	4611      	mov	r1, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f003 fff3 	bl	800829e <USB_HC_Halt>
 80042b8:	e0b3      	b.n	8004422 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f003 fa47 	bl	8007756 <USB_ReadChInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	f040 80a7 	bne.w	8004422 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3326      	adds	r3, #38	@ 0x26
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d11b      	bne.n	8004322 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	3344      	adds	r3, #68	@ 0x44
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	334d      	adds	r3, #77	@ 0x4d
 800430e:	2204      	movs	r2, #4
 8004310:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f003 ffbf 	bl	800829e <USB_HC_Halt>
 8004320:	e03f      	b.n	80043a2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	3326      	adds	r3, #38	@ 0x26
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3326      	adds	r3, #38	@ 0x26
 8004348:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800434a:	2b02      	cmp	r3, #2
 800434c:	d129      	bne.n	80043a2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	3344      	adds	r3, #68	@ 0x44
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	799b      	ldrb	r3, [r3, #6]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HCD_HC_IN_IRQHandler+0xc2a>
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	331b      	adds	r3, #27
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d110      	bne.n	80043a2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	334d      	adds	r3, #77	@ 0x4d
 8004390:	2204      	movs	r2, #4
 8004392:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f003 ff7e 	bl	800829e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	331b      	adds	r3, #27
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d129      	bne.n	800440c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	331b      	adds	r3, #27
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	440a      	add	r2, r1
 8004402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004406:	f043 0320 	orr.w	r3, r3, #32
 800440a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004418:	461a      	mov	r2, r3
 800441a:	2310      	movs	r3, #16
 800441c:	6093      	str	r3, [r2, #8]
 800441e:	e000      	b.n	8004422 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004420:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f003 f985 	bl	8007756 <USB_ReadChInterrupts>
 800444c:	4603      	mov	r3, r0
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d11b      	bne.n	800448e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004462:	461a      	mov	r2, r3
 8004464:	2304      	movs	r3, #4
 8004466:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	334d      	adds	r3, #77	@ 0x4d
 8004478:	2207      	movs	r2, #7
 800447a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f003 ff0a 	bl	800829e <USB_HC_Halt>
 800448a:	f000 bc89 	b.w	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f003 f95d 	bl	8007756 <USB_ReadChInterrupts>
 800449c:	4603      	mov	r3, r0
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	f040 8082 	bne.w	80045ac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b4:	461a      	mov	r2, r3
 80044b6:	2320      	movs	r3, #32
 80044b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	3319      	adds	r3, #25
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d124      	bne.n	800451a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3319      	adds	r3, #25
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	334c      	adds	r3, #76	@ 0x4c
 80044f4:	2202      	movs	r2, #2
 80044f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	334d      	adds	r3, #77	@ 0x4d
 8004508:	2203      	movs	r2, #3
 800450a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f003 fec2 	bl	800829e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	331a      	adds	r3, #26
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	f040 8437 	bne.w	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	331b      	adds	r3, #27
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 842b 	bne.w	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	3326      	adds	r3, #38	@ 0x26
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d009      	beq.n	8004574 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	331b      	adds	r3, #27
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	334d      	adds	r3, #77	@ 0x4d
 8004584:	2203      	movs	r2, #3
 8004586:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f003 fe84 	bl	800829e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3344      	adds	r3, #68	@ 0x44
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e3f9      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	4611      	mov	r1, r2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f003 f8ce 	bl	8007756 <USB_ReadChInterrupts>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c4:	d111      	bne.n	80045ea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d2:	461a      	mov	r2, r3
 80045d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f003 fe5b 	bl	800829e <USB_HC_Halt>
 80045e8:	e3da      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f003 f8af 	bl	8007756 <USB_ReadChInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d168      	bne.n	80046d4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	3344      	adds	r3, #68	@ 0x44
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f003 f899 	bl	8007756 <USB_ReadChInterrupts>
 8004624:	4603      	mov	r3, r0
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b40      	cmp	r3, #64	@ 0x40
 800462c:	d112      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	3319      	adds	r3, #25
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	2340      	movs	r3, #64	@ 0x40
 8004652:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	331b      	adds	r3, #27
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d019      	beq.n	800469e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	331b      	adds	r3, #27
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4413      	add	r3, r2
 8004686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	440a      	add	r2, r1
 8004694:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046aa:	461a      	mov	r2, r3
 80046ac:	2301      	movs	r3, #1
 80046ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	334d      	adds	r3, #77	@ 0x4d
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 fde6 	bl	800829e <USB_HC_Halt>
 80046d2:	e365      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f003 f83a 	bl	8007756 <USB_ReadChInterrupts>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e8:	2b40      	cmp	r3, #64	@ 0x40
 80046ea:	d139      	bne.n	8004760 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	334d      	adds	r3, #77	@ 0x4d
 80046fc:	2205      	movs	r2, #5
 80046fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	331a      	adds	r3, #26
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3319      	adds	r3, #25
 8004726:	2201      	movs	r2, #1
 8004728:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3344      	adds	r3, #68	@ 0x44
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f003 fda9 	bl	800829e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004758:	461a      	mov	r2, r3
 800475a:	2340      	movs	r3, #64	@ 0x40
 800475c:	6093      	str	r3, [r2, #8]
 800475e:	e31f      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f002 fff4 	bl	8007756 <USB_ReadChInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b08      	cmp	r3, #8
 8004776:	d11a      	bne.n	80047ae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004784:	461a      	mov	r2, r3
 8004786:	2308      	movs	r3, #8
 8004788:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	334d      	adds	r3, #77	@ 0x4d
 800479a:	2206      	movs	r2, #6
 800479c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 fd79 	bl	800829e <USB_HC_Halt>
 80047ac:	e2f8      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f002 ffcd 	bl	8007756 <USB_ReadChInterrupts>
 80047bc:	4603      	mov	r3, r0
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d144      	bne.n	8004850 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3344      	adds	r3, #68	@ 0x44
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	334d      	adds	r3, #77	@ 0x4d
 80047ea:	2204      	movs	r2, #4
 80047ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3319      	adds	r3, #25
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d114      	bne.n	800482e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3318      	adds	r3, #24
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	3319      	adds	r3, #25
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f003 fd31 	bl	800829e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004848:	461a      	mov	r2, r3
 800484a:	2310      	movs	r3, #16
 800484c:	6093      	str	r3, [r2, #8]
 800484e:	e2a7      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f002 ff7c 	bl	8007756 <USB_ReadChInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b80      	cmp	r3, #128	@ 0x80
 8004866:	f040 8083 	bne.w	8004970 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	799b      	ldrb	r3, [r3, #6]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d111      	bne.n	8004896 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	334d      	adds	r3, #77	@ 0x4d
 8004882:	2207      	movs	r2, #7
 8004884:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f003 fd05 	bl	800829e <USB_HC_Halt>
 8004894:	e062      	b.n	800495c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	3344      	adds	r3, #68	@ 0x44
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	1c59      	adds	r1, r3, #1
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4403      	add	r3, r0
 80048b6:	3344      	adds	r3, #68	@ 0x44
 80048b8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3344      	adds	r3, #68	@ 0x44
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d922      	bls.n	8004916 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	3344      	adds	r3, #68	@ 0x44
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	334c      	adds	r3, #76	@ 0x4c
 80048f4:	2204      	movs	r2, #4
 80048f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	334c      	adds	r3, #76	@ 0x4c
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f006 f81e 	bl	800a950 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004914:	e022      	b.n	800495c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	334c      	adds	r3, #76	@ 0x4c
 8004926:	2202      	movs	r2, #2
 8004928:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4413      	add	r3, r2
 8004932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004940:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004948:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4413      	add	r3, r2
 8004952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004956:	461a      	mov	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4413      	add	r3, r2
 8004964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004968:	461a      	mov	r2, r3
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	6093      	str	r3, [r2, #8]
 800496e:	e217      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	4611      	mov	r1, r2
 8004978:	4618      	mov	r0, r3
 800497a:	f002 feec 	bl	8007756 <USB_ReadChInterrupts>
 800497e:	4603      	mov	r3, r0
 8004980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004988:	d11b      	bne.n	80049c2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800498a:	78fa      	ldrb	r2, [r7, #3]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	334d      	adds	r3, #77	@ 0x4d
 800499a:	2209      	movs	r2, #9
 800499c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f003 fc79 	bl	800829e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049b8:	461a      	mov	r2, r3
 80049ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049be:	6093      	str	r3, [r2, #8]
 80049c0:	e1ee      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f002 fec3 	bl	8007756 <USB_ReadChInterrupts>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	f040 81df 	bne.w	8004d9a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	2302      	movs	r3, #2
 80049ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	334d      	adds	r3, #77	@ 0x4d
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	f040 8093 	bne.w	8004b2c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	334d      	adds	r3, #77	@ 0x4d
 8004a16:	2202      	movs	r2, #2
 8004a18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	334c      	adds	r3, #76	@ 0x4c
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3326      	adds	r3, #38	@ 0x26
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d00b      	beq.n	8004a5c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	3326      	adds	r3, #38	@ 0x26
 8004a54:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	f040 8190 	bne.w	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	799b      	ldrb	r3, [r3, #6]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d115      	bne.n	8004a90 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	333d      	adds	r3, #61	@ 0x3d
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	f083 0301 	eor.w	r3, r3, #1
 8004a7c:	b2d8      	uxtb	r0, r3
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	333d      	adds	r3, #61	@ 0x3d
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	799b      	ldrb	r3, [r3, #6]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	f040 8171 	bne.w	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3334      	adds	r3, #52	@ 0x34
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8165 	beq.w	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3334      	adds	r3, #52	@ 0x34
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4403      	add	r3, r0
 8004ad2:	3328      	adds	r3, #40	@ 0x28
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	440b      	add	r3, r1
 8004ad8:	1e59      	subs	r1, r3, #1
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4403      	add	r3, r0
 8004ae8:	3328      	adds	r3, #40	@ 0x28
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 813f 	beq.w	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	333d      	adds	r3, #61	@ 0x3d
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	f083 0301 	eor.w	r3, r3, #1
 8004b16:	b2d8      	uxtb	r0, r3
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	333d      	adds	r3, #61	@ 0x3d
 8004b26:	4602      	mov	r2, r0
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e127      	b.n	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	334d      	adds	r3, #77	@ 0x4d
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d120      	bne.n	8004b84 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	334d      	adds	r3, #77	@ 0x4d
 8004b52:	2202      	movs	r2, #2
 8004b54:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	331b      	adds	r3, #27
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	f040 8107 	bne.w	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	334c      	adds	r3, #76	@ 0x4c
 8004b7e:	2202      	movs	r2, #2
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e0fb      	b.n	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	334d      	adds	r3, #77	@ 0x4d
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d13a      	bne.n	8004c10 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	334d      	adds	r3, #77	@ 0x4d
 8004baa:	2202      	movs	r2, #2
 8004bac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	334c      	adds	r3, #76	@ 0x4c
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	331b      	adds	r3, #27
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f040 80d1 	bne.w	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	331b      	adds	r3, #27
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0c:	6053      	str	r3, [r2, #4]
 8004c0e:	e0b5      	b.n	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	334d      	adds	r3, #77	@ 0x4d
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d114      	bne.n	8004c50 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	334d      	adds	r3, #77	@ 0x4d
 8004c36:	2202      	movs	r2, #2
 8004c38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	334c      	adds	r3, #76	@ 0x4c
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e095      	b.n	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	334d      	adds	r3, #77	@ 0x4d
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b06      	cmp	r3, #6
 8004c64:	d114      	bne.n	8004c90 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	334d      	adds	r3, #77	@ 0x4d
 8004c76:	2202      	movs	r2, #2
 8004c78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	334c      	adds	r3, #76	@ 0x4c
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e075      	b.n	8004d7c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	334d      	adds	r3, #77	@ 0x4d
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	d00a      	beq.n	8004cbc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	334d      	adds	r3, #77	@ 0x4d
 8004cb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004cb8:	2b09      	cmp	r3, #9
 8004cba:	d170      	bne.n	8004d9e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	334d      	adds	r3, #77	@ 0x4d
 8004ccc:	2202      	movs	r2, #2
 8004cce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3344      	adds	r3, #68	@ 0x44
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4403      	add	r3, r0
 8004cf0:	3344      	adds	r3, #68	@ 0x44
 8004cf2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	3344      	adds	r3, #68	@ 0x44
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d914      	bls.n	8004d34 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3344      	adds	r3, #68	@ 0x44
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	334c      	adds	r3, #76	@ 0x4c
 8004d2e:	2204      	movs	r2, #4
 8004d30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d32:	e022      	b.n	8004d7a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	334c      	adds	r3, #76	@ 0x4c
 8004d44:	2202      	movs	r2, #2
 8004d46:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d74:	461a      	mov	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d7a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	334c      	adds	r3, #76	@ 0x4c
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f005 fddc 	bl	800a950 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d98:	e002      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004d9e:	bf00      	nop
  }
}
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b08a      	sub	sp, #40	@ 0x28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	0c5b      	lsrs	r3, r3, #17
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dda:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d004      	beq.n	8004dec <HCD_RXQLVL_IRQHandler+0x46>
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	f000 80b6 	beq.w	8004f56 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004dea:	e0b7      	b.n	8004f5c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80b3 	beq.w	8004f5a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	332c      	adds	r3, #44	@ 0x2c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80a7 	beq.w	8004f5a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4613      	mov	r3, r2
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	3338      	adds	r3, #56	@ 0x38
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	18d1      	adds	r1, r2, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4403      	add	r3, r0
 8004e30:	3334      	adds	r3, #52	@ 0x34
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4299      	cmp	r1, r3
 8004e36:	f200 8083 	bhi.w	8004f40 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	332c      	adds	r3, #44	@ 0x2c
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	b292      	uxth	r2, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	f002 fc13 	bl	8007680 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	332c      	adds	r3, #44	@ 0x2c
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	18d1      	adds	r1, r2, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4403      	add	r3, r0
 8004e7e:	332c      	adds	r3, #44	@ 0x2c
 8004e80:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4613      	mov	r3, r2
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	3338      	adds	r3, #56	@ 0x38
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	18d1      	adds	r1, r2, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4403      	add	r3, r0
 8004ea6:	3338      	adds	r3, #56	@ 0x38
 8004ea8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	0cdb      	lsrs	r3, r3, #19
 8004eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ebe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	3328      	adds	r3, #40	@ 0x28
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d13f      	bne.n	8004f5a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d03c      	beq.n	8004f5a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ef6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004efe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	333c      	adds	r3, #60	@ 0x3c
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f083 0301 	eor.w	r3, r3, #1
 8004f28:	b2d8      	uxtb	r0, r3
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	333c      	adds	r3, #60	@ 0x3c
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	701a      	strb	r2, [r3, #0]
      break;
 8004f3e:	e00c      	b.n	8004f5a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4613      	mov	r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	334c      	adds	r3, #76	@ 0x4c
 8004f50:	2204      	movs	r2, #4
 8004f52:	701a      	strb	r2, [r3, #0]
      break;
 8004f54:	e001      	b.n	8004f5a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004f5a:	bf00      	nop
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	3728      	adds	r7, #40	@ 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004f90:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d10b      	bne.n	8004fb4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d102      	bne.n	8004fac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f005 fcb6 	bl	800a918 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f043 0302 	orr.w	r3, r3, #2
 8004fb2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d132      	bne.n	8005024 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f043 0308 	orr.w	r3, r3, #8
 8004fc4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d126      	bne.n	800501e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	7a5b      	ldrb	r3, [r3, #9]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d113      	bne.n	8005000 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004fde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fe2:	d106      	bne.n	8004ff2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2102      	movs	r1, #2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 fcd8 	bl	80079a0 <USB_InitFSLSPClkSel>
 8004ff0:	e011      	b.n	8005016 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 fcd1 	bl	80079a0 <USB_InitFSLSPClkSel>
 8004ffe:	e00a      	b.n	8005016 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	79db      	ldrb	r3, [r3, #7]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d106      	bne.n	8005016 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800500e:	461a      	mov	r2, r3
 8005010:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005014:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f005 fca8 	bl	800a96c <HAL_HCD_PortEnabled_Callback>
 800501c:	e002      	b.n	8005024 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f005 fcb2 	bl	800a988 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b20      	cmp	r3, #32
 800502c:	d103      	bne.n	8005036 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f043 0320 	orr.w	r3, r3, #32
 8005034:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800503c:	461a      	mov	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6013      	str	r3, [r2, #0]
}
 8005042:	bf00      	nop
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e12b      	b.n	80052b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fc f802 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	@ 0x24
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800509e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050b0:	f001 fa20 	bl	80064f4 <HAL_RCC_GetPCLK1Freq>
 80050b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4a81      	ldr	r2, [pc, #516]	@ (80052c0 <HAL_I2C_Init+0x274>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d807      	bhi.n	80050d0 <HAL_I2C_Init+0x84>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a80      	ldr	r2, [pc, #512]	@ (80052c4 <HAL_I2C_Init+0x278>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bf94      	ite	ls
 80050c8:	2301      	movls	r3, #1
 80050ca:	2300      	movhi	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e006      	b.n	80050de <HAL_I2C_Init+0x92>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a7d      	ldr	r2, [pc, #500]	@ (80052c8 <HAL_I2C_Init+0x27c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	bf94      	ite	ls
 80050d8:	2301      	movls	r3, #1
 80050da:	2300      	movhi	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0e7      	b.n	80052b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4a78      	ldr	r2, [pc, #480]	@ (80052cc <HAL_I2C_Init+0x280>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	0c9b      	lsrs	r3, r3, #18
 80050f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4a6a      	ldr	r2, [pc, #424]	@ (80052c0 <HAL_I2C_Init+0x274>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d802      	bhi.n	8005120 <HAL_I2C_Init+0xd4>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3301      	adds	r3, #1
 800511e:	e009      	b.n	8005134 <HAL_I2C_Init+0xe8>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	4a69      	ldr	r2, [pc, #420]	@ (80052d0 <HAL_I2C_Init+0x284>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	099b      	lsrs	r3, r3, #6
 8005132:	3301      	adds	r3, #1
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005146:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	495c      	ldr	r1, [pc, #368]	@ (80052c0 <HAL_I2C_Init+0x274>)
 8005150:	428b      	cmp	r3, r1
 8005152:	d819      	bhi.n	8005188 <HAL_I2C_Init+0x13c>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1e59      	subs	r1, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005168:	400b      	ands	r3, r1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_I2C_Init+0x138>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1e59      	subs	r1, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	fbb1 f3f3 	udiv	r3, r1, r3
 800517c:	3301      	adds	r3, #1
 800517e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005182:	e051      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005184:	2304      	movs	r3, #4
 8005186:	e04f      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d111      	bne.n	80051b4 <HAL_I2C_Init+0x168>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1e58      	subs	r0, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	440b      	add	r3, r1
 800519e:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e012      	b.n	80051da <HAL_I2C_Init+0x18e>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1e58      	subs	r0, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	0099      	lsls	r1, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Init+0x196>
 80051de:	2301      	movs	r3, #1
 80051e0:	e022      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10e      	bne.n	8005208 <HAL_I2C_Init+0x1bc>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1e58      	subs	r0, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	440b      	add	r3, r1
 80051f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051fc:	3301      	adds	r3, #1
 80051fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005206:	e00f      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1e58      	subs	r0, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6859      	ldr	r1, [r3, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	0099      	lsls	r1, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	fbb0 f3f3 	udiv	r3, r0, r3
 800521e:	3301      	adds	r3, #1
 8005220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	6809      	ldr	r1, [r1, #0]
 800522c:	4313      	orrs	r3, r2
 800522e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005256:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6911      	ldr	r1, [r2, #16]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68d2      	ldr	r2, [r2, #12]
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	430b      	orrs	r3, r1
 800526a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	000186a0 	.word	0x000186a0
 80052c4:	001e847f 	.word	0x001e847f
 80052c8:	003d08ff 	.word	0x003d08ff
 80052cc:	431bde83 	.word	0x431bde83
 80052d0:	10624dd3 	.word	0x10624dd3

080052d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e128      	b.n	8005538 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a90      	ldr	r2, [pc, #576]	@ (8005540 <HAL_I2S_Init+0x26c>)
 80052fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fb ff03 	bl	800110c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800531c:	f023 030f 	bic.w	r3, r3, #15
 8005320:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2202      	movs	r2, #2
 8005328:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d060      	beq.n	80053f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800533a:	2310      	movs	r3, #16
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e001      	b.n	8005344 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005340:	2320      	movs	r3, #32
 8005342:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b20      	cmp	r3, #32
 800534a:	d802      	bhi.n	8005352 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005352:	2001      	movs	r0, #1
 8005354:	f001 f9c4 	bl	80066e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005358:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005362:	d125      	bne.n	80053b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	fbb2 f2f3 	udiv	r2, r2, r3
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	3305      	adds	r3, #5
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	e01f      	b.n	80053ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	fbb2 f2f3 	udiv	r2, r2, r3
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	3305      	adds	r3, #5
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	e00e      	b.n	80053ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ca:	3305      	adds	r3, #5
 80053cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4a5c      	ldr	r2, [pc, #368]	@ (8005544 <HAL_I2S_Init+0x270>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e003      	b.n	80053fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80053f4:	2302      	movs	r3, #2
 80053f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d902      	bls.n	8005408 <HAL_I2S_Init+0x134>
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2bff      	cmp	r3, #255	@ 0xff
 8005406:	d907      	bls.n	8005418 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540c:	f043 0210 	orr.w	r2, r3, #16
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e08f      	b.n	8005538 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	ea42 0103 	orr.w	r1, r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	430a      	orrs	r2, r1
 800542a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005436:	f023 030f 	bic.w	r3, r3, #15
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6851      	ldr	r1, [r2, #4]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	4311      	orrs	r1, r2
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68d2      	ldr	r2, [r2, #12]
 8005448:	4311      	orrs	r1, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6992      	ldr	r2, [r2, #24]
 800544e:	430a      	orrs	r2, r1
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800545a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d161      	bne.n	8005528 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a38      	ldr	r2, [pc, #224]	@ (8005548 <HAL_I2S_Init+0x274>)
 8005468:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a37      	ldr	r2, [pc, #220]	@ (800554c <HAL_I2S_Init+0x278>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d101      	bne.n	8005478 <HAL_I2S_Init+0x1a4>
 8005474:	4b36      	ldr	r3, [pc, #216]	@ (8005550 <HAL_I2S_Init+0x27c>)
 8005476:	e001      	b.n	800547c <HAL_I2S_Init+0x1a8>
 8005478:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	4932      	ldr	r1, [pc, #200]	@ (800554c <HAL_I2S_Init+0x278>)
 8005484:	428a      	cmp	r2, r1
 8005486:	d101      	bne.n	800548c <HAL_I2S_Init+0x1b8>
 8005488:	4a31      	ldr	r2, [pc, #196]	@ (8005550 <HAL_I2S_Init+0x27c>)
 800548a:	e001      	b.n	8005490 <HAL_I2S_Init+0x1bc>
 800548c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005490:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005494:	f023 030f 	bic.w	r3, r3, #15
 8005498:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a2b      	ldr	r2, [pc, #172]	@ (800554c <HAL_I2S_Init+0x278>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d101      	bne.n	80054a8 <HAL_I2S_Init+0x1d4>
 80054a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005550 <HAL_I2S_Init+0x27c>)
 80054a6:	e001      	b.n	80054ac <HAL_I2S_Init+0x1d8>
 80054a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054ac:	2202      	movs	r2, #2
 80054ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a25      	ldr	r2, [pc, #148]	@ (800554c <HAL_I2S_Init+0x278>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_I2S_Init+0x1ea>
 80054ba:	4b25      	ldr	r3, [pc, #148]	@ (8005550 <HAL_I2S_Init+0x27c>)
 80054bc:	e001      	b.n	80054c2 <HAL_I2S_Init+0x1ee>
 80054be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ce:	d003      	beq.n	80054d8 <HAL_I2S_Init+0x204>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d103      	bne.n	80054e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80054d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e001      	b.n	80054e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054ee:	4313      	orrs	r3, r2
 80054f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054f8:	4313      	orrs	r3, r2
 80054fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005502:	4313      	orrs	r3, r2
 8005504:	b29a      	uxth	r2, r3
 8005506:	897b      	ldrh	r3, [r7, #10]
 8005508:	4313      	orrs	r3, r2
 800550a:	b29b      	uxth	r3, r3
 800550c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005510:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a0d      	ldr	r2, [pc, #52]	@ (800554c <HAL_I2S_Init+0x278>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d101      	bne.n	8005520 <HAL_I2S_Init+0x24c>
 800551c:	4b0c      	ldr	r3, [pc, #48]	@ (8005550 <HAL_I2S_Init+0x27c>)
 800551e:	e001      	b.n	8005524 <HAL_I2S_Init+0x250>
 8005520:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005524:	897a      	ldrh	r2, [r7, #10]
 8005526:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	0800564b 	.word	0x0800564b
 8005544:	cccccccd 	.word	0xcccccccd
 8005548:	08005761 	.word	0x08005761
 800554c:	40003800 	.word	0x40003800
 8005550:	40003400 	.word	0x40003400

08005554 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	1c9a      	adds	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10e      	bne.n	80055e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ffb8 	bl	8005554 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	b292      	uxth	r2, r2
 8005600:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	1c9a      	adds	r2, r3, #2
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10e      	bne.n	8005642 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005632:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ff93 	bl	8005568 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b086      	sub	sp, #24
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b04      	cmp	r3, #4
 8005664:	d13a      	bne.n	80056dc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b01      	cmp	r3, #1
 800566e:	d109      	bne.n	8005684 <I2S_IRQHandler+0x3a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567a:	2b40      	cmp	r3, #64	@ 0x40
 800567c:	d102      	bne.n	8005684 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ffb4 	bl	80055ec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568a:	2b40      	cmp	r3, #64	@ 0x40
 800568c:	d126      	bne.n	80056dc <I2S_IRQHandler+0x92>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b20      	cmp	r3, #32
 800569a:	d11f      	bne.n	80056dc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	f043 0202 	orr.w	r2, r3, #2
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff ff50 	bl	800557c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d136      	bne.n	8005756 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d109      	bne.n	8005706 <I2S_IRQHandler+0xbc>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fc:	2b80      	cmp	r3, #128	@ 0x80
 80056fe:	d102      	bne.n	8005706 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ff45 	bl	8005590 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b08      	cmp	r3, #8
 800570e:	d122      	bne.n	8005756 <I2S_IRQHandler+0x10c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b20      	cmp	r3, #32
 800571c:	d11b      	bne.n	8005756 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800572c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005748:	f043 0204 	orr.w	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff13 	bl	800557c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a92      	ldr	r2, [pc, #584]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800577a:	4b92      	ldr	r3, [pc, #584]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800577c:	e001      	b.n	8005782 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800577e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a8b      	ldr	r2, [pc, #556]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005798:	4b8a      	ldr	r3, [pc, #552]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800579a:	e001      	b.n	80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800579c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ac:	d004      	beq.n	80057b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 8099 	bne.w	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d107      	bne.n	80057d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f925 	bl	8005a1c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9c8 	bl	8005b7c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f2:	2b40      	cmp	r3, #64	@ 0x40
 80057f4:	d13a      	bne.n	800586c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d035      	beq.n	800586c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a6e      	ldr	r2, [pc, #440]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d101      	bne.n	800580e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800580a:	4b6e      	ldr	r3, [pc, #440]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800580c:	e001      	b.n	8005812 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800580e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4969      	ldr	r1, [pc, #420]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800581a:	428b      	cmp	r3, r1
 800581c:	d101      	bne.n	8005822 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800581e:	4b69      	ldr	r3, [pc, #420]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005820:	e001      	b.n	8005826 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005822:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005826:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800582a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800583a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f043 0202 	orr.w	r2, r3, #2
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fe88 	bl	800557c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b08      	cmp	r3, #8
 8005874:	f040 80c3 	bne.w	80059fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80bd 	beq.w	80059fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005892:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a49      	ldr	r2, [pc, #292]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d101      	bne.n	80058a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800589e:	4b49      	ldr	r3, [pc, #292]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058a0:	e001      	b.n	80058a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80058a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4944      	ldr	r1, [pc, #272]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058ae:	428b      	cmp	r3, r1
 80058b0:	d101      	bne.n	80058b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80058b2:	4b44      	ldr	r3, [pc, #272]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058b4:	e001      	b.n	80058ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80058b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	f043 0204 	orr.w	r2, r3, #4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fe4a 	bl	800557c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058e8:	e089      	b.n	80059fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d107      	bne.n	8005904 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f8be 	bl	8005a80 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f8fd 	bl	8005b18 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005924:	2b40      	cmp	r3, #64	@ 0x40
 8005926:	d12f      	bne.n	8005988 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d02a      	beq.n	8005988 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005940:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1e      	ldr	r2, [pc, #120]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800594c:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800594e:	e001      	b.n	8005954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005950:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4919      	ldr	r1, [pc, #100]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800595c:	428b      	cmp	r3, r1
 800595e:	d101      	bne.n	8005964 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005960:	4b18      	ldr	r3, [pc, #96]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005962:	e001      	b.n	8005968 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005964:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005968:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800596c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597a:	f043 0202 	orr.w	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fdfa 	bl	800557c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b08      	cmp	r3, #8
 8005990:	d136      	bne.n	8005a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d031      	beq.n	8005a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a07      	ldr	r2, [pc, #28]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80059a6:	4b07      	ldr	r3, [pc, #28]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059a8:	e001      	b.n	80059ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80059aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4902      	ldr	r1, [pc, #8]	@ (80059c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059b6:	428b      	cmp	r3, r1
 80059b8:	d106      	bne.n	80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80059ba:	4b02      	ldr	r3, [pc, #8]	@ (80059c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059bc:	e006      	b.n	80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80059be:	bf00      	nop
 80059c0:	40003800 	.word	0x40003800
 80059c4:	40003400 	.word	0x40003400
 80059c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fdc0 	bl	800557c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059fc:	e000      	b.n	8005a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059fe:	bf00      	nop
}
 8005a00:	bf00      	nop
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	1c99      	adds	r1, r3, #2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d113      	bne.n	8005a76 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff ffc9 	bl	8005a08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	1c99      	adds	r1, r3, #2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6251      	str	r1, [r2, #36]	@ 0x24
 8005a92:	8819      	ldrh	r1, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1d      	ldr	r2, [pc, #116]	@ (8005b10 <I2SEx_TxISR_I2SExt+0x90>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d101      	bne.n	8005aa2 <I2SEx_TxISR_I2SExt+0x22>
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b14 <I2SEx_TxISR_I2SExt+0x94>)
 8005aa0:	e001      	b.n	8005aa6 <I2SEx_TxISR_I2SExt+0x26>
 8005aa2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d121      	bne.n	8005b06 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a12      	ldr	r2, [pc, #72]	@ (8005b10 <I2SEx_TxISR_I2SExt+0x90>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d101      	bne.n	8005ad0 <I2SEx_TxISR_I2SExt+0x50>
 8005acc:	4b11      	ldr	r3, [pc, #68]	@ (8005b14 <I2SEx_TxISR_I2SExt+0x94>)
 8005ace:	e001      	b.n	8005ad4 <I2SEx_TxISR_I2SExt+0x54>
 8005ad0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	490d      	ldr	r1, [pc, #52]	@ (8005b10 <I2SEx_TxISR_I2SExt+0x90>)
 8005adc:	428b      	cmp	r3, r1
 8005ade:	d101      	bne.n	8005ae4 <I2SEx_TxISR_I2SExt+0x64>
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b14 <I2SEx_TxISR_I2SExt+0x94>)
 8005ae2:	e001      	b.n	8005ae8 <I2SEx_TxISR_I2SExt+0x68>
 8005ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ae8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005aec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ff81 	bl	8005a08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40003800 	.word	0x40003800
 8005b14:	40003400 	.word	0x40003400

08005b18 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68d8      	ldr	r0, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2a:	1c99      	adds	r1, r3, #2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005b30:	b282      	uxth	r2, r0
 8005b32:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d113      	bne.n	8005b74 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b5a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff ff4a 	bl	8005a08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a20      	ldr	r2, [pc, #128]	@ (8005c0c <I2SEx_RxISR_I2SExt+0x90>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <I2SEx_RxISR_I2SExt+0x16>
 8005b8e:	4b20      	ldr	r3, [pc, #128]	@ (8005c10 <I2SEx_RxISR_I2SExt+0x94>)
 8005b90:	e001      	b.n	8005b96 <I2SEx_RxISR_I2SExt+0x1a>
 8005b92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b96:	68d8      	ldr	r0, [r3, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9c:	1c99      	adds	r1, r3, #2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005ba2:	b282      	uxth	r2, r0
 8005ba4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d121      	bne.n	8005c02 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a12      	ldr	r2, [pc, #72]	@ (8005c0c <I2SEx_RxISR_I2SExt+0x90>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <I2SEx_RxISR_I2SExt+0x50>
 8005bc8:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <I2SEx_RxISR_I2SExt+0x94>)
 8005bca:	e001      	b.n	8005bd0 <I2SEx_RxISR_I2SExt+0x54>
 8005bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	490d      	ldr	r1, [pc, #52]	@ (8005c0c <I2SEx_RxISR_I2SExt+0x90>)
 8005bd8:	428b      	cmp	r3, r1
 8005bda:	d101      	bne.n	8005be0 <I2SEx_RxISR_I2SExt+0x64>
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <I2SEx_RxISR_I2SExt+0x94>)
 8005bde:	e001      	b.n	8005be4 <I2SEx_RxISR_I2SExt+0x68>
 8005be0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005be4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005be8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff ff03 	bl	8005a08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40003800 	.word	0x40003800
 8005c10:	40003400 	.word	0x40003400

08005c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e267      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d075      	beq.n	8005d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c32:	4b88      	ldr	r3, [pc, #544]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d00c      	beq.n	8005c58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c3e:	4b85      	ldr	r3, [pc, #532]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d112      	bne.n	8005c70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4a:	4b82      	ldr	r3, [pc, #520]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c56:	d10b      	bne.n	8005c70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c58:	4b7e      	ldr	r3, [pc, #504]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d05b      	beq.n	8005d1c <HAL_RCC_OscConfig+0x108>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d157      	bne.n	8005d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e242      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c78:	d106      	bne.n	8005c88 <HAL_RCC_OscConfig+0x74>
 8005c7a:	4b76      	ldr	r3, [pc, #472]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a75      	ldr	r2, [pc, #468]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e01d      	b.n	8005cc4 <HAL_RCC_OscConfig+0xb0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c90:	d10c      	bne.n	8005cac <HAL_RCC_OscConfig+0x98>
 8005c92:	4b70      	ldr	r3, [pc, #448]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a6f      	ldr	r2, [pc, #444]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a6c      	ldr	r2, [pc, #432]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e00b      	b.n	8005cc4 <HAL_RCC_OscConfig+0xb0>
 8005cac:	4b69      	ldr	r3, [pc, #420]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a68      	ldr	r2, [pc, #416]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	4b66      	ldr	r3, [pc, #408]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a65      	ldr	r2, [pc, #404]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d013      	beq.n	8005cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fb fcf6 	bl	80016bc <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd4:	f7fb fcf2 	bl	80016bc <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b64      	cmp	r3, #100	@ 0x64
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e207      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0xc0>
 8005cf2:	e014      	b.n	8005d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf4:	f7fb fce2 	bl	80016bc <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cfc:	f7fb fcde 	bl	80016bc <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b64      	cmp	r3, #100	@ 0x64
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e1f3      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0e:	4b51      	ldr	r3, [pc, #324]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0xe8>
 8005d1a:	e000      	b.n	8005d1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d063      	beq.n	8005df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d36:	4b47      	ldr	r3, [pc, #284]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d11c      	bne.n	8005d7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d42:	4b44      	ldr	r3, [pc, #272]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d116      	bne.n	8005d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d4e:	4b41      	ldr	r3, [pc, #260]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_RCC_OscConfig+0x152>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d001      	beq.n	8005d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e1c7      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d66:	4b3b      	ldr	r3, [pc, #236]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	4937      	ldr	r1, [pc, #220]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d7a:	e03a      	b.n	8005df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d020      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d84:	4b34      	ldr	r3, [pc, #208]	@ (8005e58 <HAL_RCC_OscConfig+0x244>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8a:	f7fb fc97 	bl	80016bc <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d90:	e008      	b.n	8005da4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d92:	f7fb fc93 	bl	80016bc <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e1a8      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da4:	4b2b      	ldr	r3, [pc, #172]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0f0      	beq.n	8005d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db0:	4b28      	ldr	r3, [pc, #160]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	4925      	ldr	r1, [pc, #148]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]
 8005dc4:	e015      	b.n	8005df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dc6:	4b24      	ldr	r3, [pc, #144]	@ (8005e58 <HAL_RCC_OscConfig+0x244>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fb fc76 	bl	80016bc <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd4:	f7fb fc72 	bl	80016bc <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e187      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d036      	beq.n	8005e6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d016      	beq.n	8005e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e06:	4b15      	ldr	r3, [pc, #84]	@ (8005e5c <HAL_RCC_OscConfig+0x248>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0c:	f7fb fc56 	bl	80016bc <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e14:	f7fb fc52 	bl	80016bc <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e167      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <HAL_RCC_OscConfig+0x240>)
 8005e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCC_OscConfig+0x200>
 8005e32:	e01b      	b.n	8005e6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e34:	4b09      	ldr	r3, [pc, #36]	@ (8005e5c <HAL_RCC_OscConfig+0x248>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e3a:	f7fb fc3f 	bl	80016bc <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e40:	e00e      	b.n	8005e60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e42:	f7fb fc3b 	bl	80016bc <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d907      	bls.n	8005e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e150      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
 8005e54:	40023800 	.word	0x40023800
 8005e58:	42470000 	.word	0x42470000
 8005e5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e60:	4b88      	ldr	r3, [pc, #544]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ea      	bne.n	8005e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8097 	beq.w	8005fa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7e:	4b81      	ldr	r3, [pc, #516]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	4b7d      	ldr	r3, [pc, #500]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e92:	4a7c      	ldr	r2, [pc, #496]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eaa:	4b77      	ldr	r3, [pc, #476]	@ (8006088 <HAL_RCC_OscConfig+0x474>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d118      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb6:	4b74      	ldr	r3, [pc, #464]	@ (8006088 <HAL_RCC_OscConfig+0x474>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a73      	ldr	r2, [pc, #460]	@ (8006088 <HAL_RCC_OscConfig+0x474>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec2:	f7fb fbfb 	bl	80016bc <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eca:	f7fb fbf7 	bl	80016bc <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e10c      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005edc:	4b6a      	ldr	r3, [pc, #424]	@ (8006088 <HAL_RCC_OscConfig+0x474>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f0      	beq.n	8005eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d106      	bne.n	8005efe <HAL_RCC_OscConfig+0x2ea>
 8005ef0:	4b64      	ldr	r3, [pc, #400]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef4:	4a63      	ldr	r2, [pc, #396]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005efc:	e01c      	b.n	8005f38 <HAL_RCC_OscConfig+0x324>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d10c      	bne.n	8005f20 <HAL_RCC_OscConfig+0x30c>
 8005f06:	4b5f      	ldr	r3, [pc, #380]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0a:	4a5e      	ldr	r2, [pc, #376]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	f043 0304 	orr.w	r3, r3, #4
 8005f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f12:	4b5c      	ldr	r3, [pc, #368]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f16:	4a5b      	ldr	r2, [pc, #364]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f1e:	e00b      	b.n	8005f38 <HAL_RCC_OscConfig+0x324>
 8005f20:	4b58      	ldr	r3, [pc, #352]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f24:	4a57      	ldr	r2, [pc, #348]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f2c:	4b55      	ldr	r3, [pc, #340]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f30:	4a54      	ldr	r2, [pc, #336]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f32:	f023 0304 	bic.w	r3, r3, #4
 8005f36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d015      	beq.n	8005f6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f40:	f7fb fbbc 	bl	80016bc <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f46:	e00a      	b.n	8005f5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f48:	f7fb fbb8 	bl	80016bc <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e0cb      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5e:	4b49      	ldr	r3, [pc, #292]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0ee      	beq.n	8005f48 <HAL_RCC_OscConfig+0x334>
 8005f6a:	e014      	b.n	8005f96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6c:	f7fb fba6 	bl	80016bc <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f74:	f7fb fba2 	bl	80016bc <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0b5      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1ee      	bne.n	8005f74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d105      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f9c:	4b39      	ldr	r3, [pc, #228]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	4a38      	ldr	r2, [pc, #224]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fa6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80a1 	beq.w	80060f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fb2:	4b34      	ldr	r3, [pc, #208]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d05c      	beq.n	8006078 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d141      	bne.n	800604a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc6:	4b31      	ldr	r3, [pc, #196]	@ (800608c <HAL_RCC_OscConfig+0x478>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fcc:	f7fb fb76 	bl	80016bc <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd4:	f7fb fb72 	bl	80016bc <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e087      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe6:	4b27      	ldr	r3, [pc, #156]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	019b      	lsls	r3, r3, #6
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	3b01      	subs	r3, #1
 800600c:	041b      	lsls	r3, r3, #16
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006014:	061b      	lsls	r3, r3, #24
 8006016:	491b      	ldr	r1, [pc, #108]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 8006018:	4313      	orrs	r3, r2
 800601a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800601c:	4b1b      	ldr	r3, [pc, #108]	@ (800608c <HAL_RCC_OscConfig+0x478>)
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006022:	f7fb fb4b 	bl	80016bc <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602a:	f7fb fb47 	bl	80016bc <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e05c      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603c:	4b11      	ldr	r3, [pc, #68]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x416>
 8006048:	e054      	b.n	80060f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604a:	4b10      	ldr	r3, [pc, #64]	@ (800608c <HAL_RCC_OscConfig+0x478>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fb fb34 	bl	80016bc <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006058:	f7fb fb30 	bl	80016bc <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e045      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606a:	4b06      	ldr	r3, [pc, #24]	@ (8006084 <HAL_RCC_OscConfig+0x470>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0x444>
 8006076:	e03d      	b.n	80060f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d107      	bne.n	8006090 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e038      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
 8006084:	40023800 	.word	0x40023800
 8006088:	40007000 	.word	0x40007000
 800608c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006090:	4b1b      	ldr	r3, [pc, #108]	@ (8006100 <HAL_RCC_OscConfig+0x4ec>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d028      	beq.n	80060f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d121      	bne.n	80060f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d11a      	bne.n	80060f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060c0:	4013      	ands	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d111      	bne.n	80060f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	3b01      	subs	r3, #1
 80060da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d107      	bne.n	80060f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40023800 	.word	0x40023800

08006104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e0cc      	b.n	80062b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006118:	4b68      	ldr	r3, [pc, #416]	@ (80062bc <HAL_RCC_ClockConfig+0x1b8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d90c      	bls.n	8006140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006126:	4b65      	ldr	r3, [pc, #404]	@ (80062bc <HAL_RCC_ClockConfig+0x1b8>)
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612e:	4b63      	ldr	r3, [pc, #396]	@ (80062bc <HAL_RCC_ClockConfig+0x1b8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d001      	beq.n	8006140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0b8      	b.n	80062b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d020      	beq.n	800618e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006158:	4b59      	ldr	r3, [pc, #356]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4a58      	ldr	r2, [pc, #352]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006162:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006170:	4b53      	ldr	r3, [pc, #332]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	4a52      	ldr	r2, [pc, #328]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800617a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800617c:	4b50      	ldr	r3, [pc, #320]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	494d      	ldr	r1, [pc, #308]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	4313      	orrs	r3, r2
 800618c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d044      	beq.n	8006224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d107      	bne.n	80061b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a2:	4b47      	ldr	r3, [pc, #284]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d119      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e07f      	b.n	80062b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d003      	beq.n	80061c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d107      	bne.n	80061d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c2:	4b3f      	ldr	r3, [pc, #252]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e06f      	b.n	80062b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d2:	4b3b      	ldr	r3, [pc, #236]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e067      	b.n	80062b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061e2:	4b37      	ldr	r3, [pc, #220]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 0203 	bic.w	r2, r3, #3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4934      	ldr	r1, [pc, #208]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061f4:	f7fb fa62 	bl	80016bc <HAL_GetTick>
 80061f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061fc:	f7fb fa5e 	bl	80016bc <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e04f      	b.n	80062b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006212:	4b2b      	ldr	r3, [pc, #172]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 020c 	and.w	r2, r3, #12
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	429a      	cmp	r2, r3
 8006222:	d1eb      	bne.n	80061fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006224:	4b25      	ldr	r3, [pc, #148]	@ (80062bc <HAL_RCC_ClockConfig+0x1b8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d20c      	bcs.n	800624c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b22      	ldr	r3, [pc, #136]	@ (80062bc <HAL_RCC_ClockConfig+0x1b8>)
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b20      	ldr	r3, [pc, #128]	@ (80062bc <HAL_RCC_ClockConfig+0x1b8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e032      	b.n	80062b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006258:	4b19      	ldr	r3, [pc, #100]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4916      	ldr	r1, [pc, #88]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	4313      	orrs	r3, r2
 8006268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006276:	4b12      	ldr	r3, [pc, #72]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	490e      	ldr	r1, [pc, #56]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	4313      	orrs	r3, r2
 8006288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800628a:	f000 f821 	bl	80062d0 <HAL_RCC_GetSysClockFreq>
 800628e:	4602      	mov	r2, r0
 8006290:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	091b      	lsrs	r3, r3, #4
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	490a      	ldr	r1, [pc, #40]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 800629c:	5ccb      	ldrb	r3, [r1, r3]
 800629e:	fa22 f303 	lsr.w	r3, r2, r3
 80062a2:	4a09      	ldr	r2, [pc, #36]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 80062a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80062a6:	4b09      	ldr	r3, [pc, #36]	@ (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fb f9c2 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40023c00 	.word	0x40023c00
 80062c0:	40023800 	.word	0x40023800
 80062c4:	0800bd4c 	.word	0x0800bd4c
 80062c8:	20000010 	.word	0x20000010
 80062cc:	20000014 	.word	0x20000014

080062d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d4:	b094      	sub	sp, #80	@ 0x50
 80062d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062e8:	4b79      	ldr	r3, [pc, #484]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 030c 	and.w	r3, r3, #12
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d00d      	beq.n	8006310 <HAL_RCC_GetSysClockFreq+0x40>
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	f200 80e1 	bhi.w	80064bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_RCC_GetSysClockFreq+0x34>
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d003      	beq.n	800630a <HAL_RCC_GetSysClockFreq+0x3a>
 8006302:	e0db      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006304:	4b73      	ldr	r3, [pc, #460]	@ (80064d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006306:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006308:	e0db      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800630a:	4b73      	ldr	r3, [pc, #460]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800630c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800630e:	e0d8      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006310:	4b6f      	ldr	r3, [pc, #444]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006318:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800631a:	4b6d      	ldr	r3, [pc, #436]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d063      	beq.n	80063ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006326:	4b6a      	ldr	r3, [pc, #424]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	099b      	lsrs	r3, r3, #6
 800632c:	2200      	movs	r2, #0
 800632e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006330:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006338:	633b      	str	r3, [r7, #48]	@ 0x30
 800633a:	2300      	movs	r3, #0
 800633c:	637b      	str	r3, [r7, #52]	@ 0x34
 800633e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006342:	4622      	mov	r2, r4
 8006344:	462b      	mov	r3, r5
 8006346:	f04f 0000 	mov.w	r0, #0
 800634a:	f04f 0100 	mov.w	r1, #0
 800634e:	0159      	lsls	r1, r3, #5
 8006350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006354:	0150      	lsls	r0, r2, #5
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4621      	mov	r1, r4
 800635c:	1a51      	subs	r1, r2, r1
 800635e:	6139      	str	r1, [r7, #16]
 8006360:	4629      	mov	r1, r5
 8006362:	eb63 0301 	sbc.w	r3, r3, r1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006374:	4659      	mov	r1, fp
 8006376:	018b      	lsls	r3, r1, #6
 8006378:	4651      	mov	r1, sl
 800637a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800637e:	4651      	mov	r1, sl
 8006380:	018a      	lsls	r2, r1, #6
 8006382:	4651      	mov	r1, sl
 8006384:	ebb2 0801 	subs.w	r8, r2, r1
 8006388:	4659      	mov	r1, fp
 800638a:	eb63 0901 	sbc.w	r9, r3, r1
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800639a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800639e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063a2:	4690      	mov	r8, r2
 80063a4:	4699      	mov	r9, r3
 80063a6:	4623      	mov	r3, r4
 80063a8:	eb18 0303 	adds.w	r3, r8, r3
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	462b      	mov	r3, r5
 80063b0:	eb49 0303 	adc.w	r3, r9, r3
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063c2:	4629      	mov	r1, r5
 80063c4:	024b      	lsls	r3, r1, #9
 80063c6:	4621      	mov	r1, r4
 80063c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063cc:	4621      	mov	r1, r4
 80063ce:	024a      	lsls	r2, r1, #9
 80063d0:	4610      	mov	r0, r2
 80063d2:	4619      	mov	r1, r3
 80063d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d6:	2200      	movs	r2, #0
 80063d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063e0:	f7f9 ff46 	bl	8000270 <__aeabi_uldivmod>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4613      	mov	r3, r2
 80063ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ec:	e058      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ee:	4b38      	ldr	r3, [pc, #224]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	099b      	lsrs	r3, r3, #6
 80063f4:	2200      	movs	r2, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	4611      	mov	r1, r2
 80063fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063fe:	623b      	str	r3, [r7, #32]
 8006400:	2300      	movs	r3, #0
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
 8006404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006408:	4642      	mov	r2, r8
 800640a:	464b      	mov	r3, r9
 800640c:	f04f 0000 	mov.w	r0, #0
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	0159      	lsls	r1, r3, #5
 8006416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800641a:	0150      	lsls	r0, r2, #5
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4641      	mov	r1, r8
 8006422:	ebb2 0a01 	subs.w	sl, r2, r1
 8006426:	4649      	mov	r1, r9
 8006428:	eb63 0b01 	sbc.w	fp, r3, r1
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800643c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006440:	ebb2 040a 	subs.w	r4, r2, sl
 8006444:	eb63 050b 	sbc.w	r5, r3, fp
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	00eb      	lsls	r3, r5, #3
 8006452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006456:	00e2      	lsls	r2, r4, #3
 8006458:	4614      	mov	r4, r2
 800645a:	461d      	mov	r5, r3
 800645c:	4643      	mov	r3, r8
 800645e:	18e3      	adds	r3, r4, r3
 8006460:	603b      	str	r3, [r7, #0]
 8006462:	464b      	mov	r3, r9
 8006464:	eb45 0303 	adc.w	r3, r5, r3
 8006468:	607b      	str	r3, [r7, #4]
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006476:	4629      	mov	r1, r5
 8006478:	028b      	lsls	r3, r1, #10
 800647a:	4621      	mov	r1, r4
 800647c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006480:	4621      	mov	r1, r4
 8006482:	028a      	lsls	r2, r1, #10
 8006484:	4610      	mov	r0, r2
 8006486:	4619      	mov	r1, r3
 8006488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800648a:	2200      	movs	r2, #0
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	61fa      	str	r2, [r7, #28]
 8006490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006494:	f7f9 feec 	bl	8000270 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4613      	mov	r3, r2
 800649e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064a0:	4b0b      	ldr	r3, [pc, #44]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	3301      	adds	r3, #1
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80064b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064ba:	e002      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064bc:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80064be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3750      	adds	r7, #80	@ 0x50
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800
 80064d4:	00f42400 	.word	0x00f42400
 80064d8:	007a1200 	.word	0x007a1200

080064dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064e0:	4b03      	ldr	r3, [pc, #12]	@ (80064f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064e2:	681b      	ldr	r3, [r3, #0]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000010 	.word	0x20000010

080064f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064f8:	f7ff fff0 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 80064fc:	4602      	mov	r2, r0
 80064fe:	4b05      	ldr	r3, [pc, #20]	@ (8006514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	0a9b      	lsrs	r3, r3, #10
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	4903      	ldr	r1, [pc, #12]	@ (8006518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800650a:	5ccb      	ldrb	r3, [r1, r3]
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40023800 	.word	0x40023800
 8006518:	0800bd5c 	.word	0x0800bd5c

0800651c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d105      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006540:	2b00      	cmp	r3, #0
 8006542:	d035      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006544:	4b62      	ldr	r3, [pc, #392]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800654a:	f7fb f8b7 	bl	80016bc <HAL_GetTick>
 800654e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006550:	e008      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006552:	f7fb f8b3 	bl	80016bc <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e0b0      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006564:	4b5b      	ldr	r3, [pc, #364]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1f0      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	019a      	lsls	r2, r3, #6
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	071b      	lsls	r3, r3, #28
 800657c:	4955      	ldr	r1, [pc, #340]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006584:	4b52      	ldr	r3, [pc, #328]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006586:	2201      	movs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800658a:	f7fb f897 	bl	80016bc <HAL_GetTick>
 800658e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006590:	e008      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006592:	f7fb f893 	bl	80016bc <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e090      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065a4:	4b4b      	ldr	r3, [pc, #300]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8083 	beq.w	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	4b44      	ldr	r3, [pc, #272]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	4a43      	ldr	r2, [pc, #268]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ce:	4b41      	ldr	r3, [pc, #260]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065da:	4b3f      	ldr	r3, [pc, #252]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a3e      	ldr	r2, [pc, #248]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065e6:	f7fb f869 	bl	80016bc <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80065ec:	e008      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ee:	f7fb f865 	bl	80016bc <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e062      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006600:	4b35      	ldr	r3, [pc, #212]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0f0      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800660c:	4b31      	ldr	r3, [pc, #196]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800660e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006614:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02f      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	429a      	cmp	r2, r3
 8006628:	d028      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800662a:	4b2a      	ldr	r3, [pc, #168]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006632:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006634:	4b29      	ldr	r3, [pc, #164]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006636:	2201      	movs	r2, #1
 8006638:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663a:	4b28      	ldr	r3, [pc, #160]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006640:	4a24      	ldr	r2, [pc, #144]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006646:	4b23      	ldr	r3, [pc, #140]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b01      	cmp	r3, #1
 8006650:	d114      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006652:	f7fb f833 	bl	80016bc <HAL_GetTick>
 8006656:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006658:	e00a      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fb f82f 	bl	80016bc <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e02a      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006670:	4b18      	ldr	r3, [pc, #96]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ee      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006688:	d10d      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800668a:	4b12      	ldr	r3, [pc, #72]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800669a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800669e:	490d      	ldr	r1, [pc, #52]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	608b      	str	r3, [r1, #8]
 80066a4:	e005      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80066a6:	4b0b      	ldr	r3, [pc, #44]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	4a0a      	ldr	r2, [pc, #40]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80066b0:	6093      	str	r3, [r2, #8]
 80066b2:	4b08      	ldr	r3, [pc, #32]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066be:	4905      	ldr	r1, [pc, #20]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	42470068 	.word	0x42470068
 80066d4:	40023800 	.word	0x40023800
 80066d8:	40007000 	.word	0x40007000
 80066dc:	42470e40 	.word	0x42470e40

080066e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d13f      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80066fe:	4b24      	ldr	r3, [pc, #144]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d006      	beq.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006714:	d12f      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006716:	4b1f      	ldr	r3, [pc, #124]	@ (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006718:	617b      	str	r3, [r7, #20]
          break;
 800671a:	e02f      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800671c:	4b1c      	ldr	r3, [pc, #112]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006728:	d108      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800672a:	4b19      	ldr	r3, [pc, #100]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006732:	4a19      	ldr	r2, [pc, #100]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	e007      	b.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800673c:	4b14      	ldr	r3, [pc, #80]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006744:	4a15      	ldr	r2, [pc, #84]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006746:	fbb2 f3f3 	udiv	r3, r2, r3
 800674a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800674c:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800674e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006752:	099b      	lsrs	r3, r3, #6
 8006754:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	fb02 f303 	mul.w	r3, r2, r3
 800675e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006760:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006766:	0f1b      	lsrs	r3, r3, #28
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006772:	617b      	str	r3, [r7, #20]
          break;
 8006774:	e002      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
          break;
 800677a:	bf00      	nop
        }
      }
      break;
 800677c:	e000      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800677e:	bf00      	nop
    }
  }
  return frequency;
 8006780:	697b      	ldr	r3, [r7, #20]
}
 8006782:	4618      	mov	r0, r3
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800
 8006794:	00bb8000 	.word	0x00bb8000
 8006798:	007a1200 	.word	0x007a1200
 800679c:	00f42400 	.word	0x00f42400

080067a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e07b      	b.n	80068aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d108      	bne.n	80067cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067c2:	d009      	beq.n	80067d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	61da      	str	r2, [r3, #28]
 80067ca:	e005      	b.n	80067d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fa fd0a 	bl	800120c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800680e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800685c:	ea42 0103 	orr.w	r1, r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	f003 0104 	and.w	r1, r3, #4
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687e:	f003 0210 	and.w	r2, r3, #16
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e041      	b.n	8006948 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fa fcdf 	bl	800129c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f000 fa05 	bl	8006d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <HAL_TIM_PWM_Start_IT+0x28>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	e022      	b.n	80069be <HAL_TIM_PWM_Start_IT+0x6e>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b04      	cmp	r3, #4
 800697c:	d109      	bne.n	8006992 <HAL_TIM_PWM_Start_IT+0x42>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	e015      	b.n	80069be <HAL_TIM_PWM_Start_IT+0x6e>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b08      	cmp	r3, #8
 8006996:	d109      	bne.n	80069ac <HAL_TIM_PWM_Start_IT+0x5c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	e008      	b.n	80069be <HAL_TIM_PWM_Start_IT+0x6e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e0c7      	b.n	8006b56 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_PWM_Start_IT+0x86>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069d4:	e013      	b.n	80069fe <HAL_TIM_PWM_Start_IT+0xae>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_PWM_Start_IT+0x96>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069e4:	e00b      	b.n	80069fe <HAL_TIM_PWM_Start_IT+0xae>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_PWM_Start_IT+0xa6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069f4:	e003      	b.n	80069fe <HAL_TIM_PWM_Start_IT+0xae>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	d841      	bhi.n	8006a88 <HAL_TIM_PWM_Start_IT+0x138>
 8006a04:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <HAL_TIM_PWM_Start_IT+0xbc>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a41 	.word	0x08006a41
 8006a10:	08006a89 	.word	0x08006a89
 8006a14:	08006a89 	.word	0x08006a89
 8006a18:	08006a89 	.word	0x08006a89
 8006a1c:	08006a53 	.word	0x08006a53
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006a89 	.word	0x08006a89
 8006a28:	08006a89 	.word	0x08006a89
 8006a2c:	08006a65 	.word	0x08006a65
 8006a30:	08006a89 	.word	0x08006a89
 8006a34:	08006a89 	.word	0x08006a89
 8006a38:	08006a89 	.word	0x08006a89
 8006a3c:	08006a77 	.word	0x08006a77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0202 	orr.w	r2, r2, #2
 8006a4e:	60da      	str	r2, [r3, #12]
      break;
 8006a50:	e01d      	b.n	8006a8e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0204 	orr.w	r2, r2, #4
 8006a60:	60da      	str	r2, [r3, #12]
      break;
 8006a62:	e014      	b.n	8006a8e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0208 	orr.w	r2, r2, #8
 8006a72:	60da      	str	r2, [r3, #12]
      break;
 8006a74:	e00b      	b.n	8006a8e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0210 	orr.w	r2, r2, #16
 8006a84:	60da      	str	r2, [r3, #12]
      break;
 8006a86:	e002      	b.n	8006a8e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d15f      	bne.n	8006b54 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fb8b 	bl	80071b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8006b60 <HAL_TIM_PWM_Start_IT+0x210>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIM_PWM_Start_IT+0x166>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8006b64 <HAL_TIM_PWM_Start_IT+0x214>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d101      	bne.n	8006aba <HAL_TIM_PWM_Start_IT+0x16a>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <HAL_TIM_PWM_Start_IT+0x16c>
 8006aba:	2300      	movs	r3, #0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ace:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	@ (8006b60 <HAL_TIM_PWM_Start_IT+0x210>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d022      	beq.n	8006b20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ae2:	d01d      	beq.n	8006b20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b68 <HAL_TIM_PWM_Start_IT+0x218>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d018      	beq.n	8006b20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b6c <HAL_TIM_PWM_Start_IT+0x21c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d013      	beq.n	8006b20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1c      	ldr	r2, [pc, #112]	@ (8006b70 <HAL_TIM_PWM_Start_IT+0x220>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00e      	beq.n	8006b20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a17      	ldr	r2, [pc, #92]	@ (8006b64 <HAL_TIM_PWM_Start_IT+0x214>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d009      	beq.n	8006b20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a18      	ldr	r2, [pc, #96]	@ (8006b74 <HAL_TIM_PWM_Start_IT+0x224>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a17      	ldr	r2, [pc, #92]	@ (8006b78 <HAL_TIM_PWM_Start_IT+0x228>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d111      	bne.n	8006b44 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d010      	beq.n	8006b54 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0201 	orr.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b42:	e007      	b.n	8006b54 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40001800 	.word	0x40001800

08006b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e0ae      	b.n	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	f200 809f 	bhi.w	8006ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006baa:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006be5 	.word	0x08006be5
 8006bb4:	08006ce9 	.word	0x08006ce9
 8006bb8:	08006ce9 	.word	0x08006ce9
 8006bbc:	08006ce9 	.word	0x08006ce9
 8006bc0:	08006c25 	.word	0x08006c25
 8006bc4:	08006ce9 	.word	0x08006ce9
 8006bc8:	08006ce9 	.word	0x08006ce9
 8006bcc:	08006ce9 	.word	0x08006ce9
 8006bd0:	08006c67 	.word	0x08006c67
 8006bd4:	08006ce9 	.word	0x08006ce9
 8006bd8:	08006ce9 	.word	0x08006ce9
 8006bdc:	08006ce9 	.word	0x08006ce9
 8006be0:	08006ca7 	.word	0x08006ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 f934 	bl	8006e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0208 	orr.w	r2, r2, #8
 8006bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0204 	bic.w	r2, r2, #4
 8006c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6999      	ldr	r1, [r3, #24]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	619a      	str	r2, [r3, #24]
      break;
 8006c22:	e064      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 f984 	bl	8006f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6999      	ldr	r1, [r3, #24]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	021a      	lsls	r2, r3, #8
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	619a      	str	r2, [r3, #24]
      break;
 8006c64:	e043      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 f9d9 	bl	8007024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0208 	orr.w	r2, r2, #8
 8006c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0204 	bic.w	r2, r2, #4
 8006c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69d9      	ldr	r1, [r3, #28]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	61da      	str	r2, [r3, #28]
      break;
 8006ca4:	e023      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fa2d 	bl	800710c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69d9      	ldr	r1, [r3, #28]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	021a      	lsls	r2, r3, #8
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	61da      	str	r2, [r3, #28]
      break;
 8006ce6:	e002      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
      break;
 8006cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a46      	ldr	r2, [pc, #280]	@ (8006e2c <TIM_Base_SetConfig+0x12c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1e:	d00f      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a43      	ldr	r2, [pc, #268]	@ (8006e30 <TIM_Base_SetConfig+0x130>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00b      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a42      	ldr	r2, [pc, #264]	@ (8006e34 <TIM_Base_SetConfig+0x134>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a41      	ldr	r2, [pc, #260]	@ (8006e38 <TIM_Base_SetConfig+0x138>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a40      	ldr	r2, [pc, #256]	@ (8006e3c <TIM_Base_SetConfig+0x13c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d108      	bne.n	8006d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a35      	ldr	r2, [pc, #212]	@ (8006e2c <TIM_Base_SetConfig+0x12c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d02b      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d60:	d027      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a32      	ldr	r2, [pc, #200]	@ (8006e30 <TIM_Base_SetConfig+0x130>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d023      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a31      	ldr	r2, [pc, #196]	@ (8006e34 <TIM_Base_SetConfig+0x134>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01f      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a30      	ldr	r2, [pc, #192]	@ (8006e38 <TIM_Base_SetConfig+0x138>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d01b      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e3c <TIM_Base_SetConfig+0x13c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d017      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a2e      	ldr	r2, [pc, #184]	@ (8006e40 <TIM_Base_SetConfig+0x140>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d013      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006e44 <TIM_Base_SetConfig+0x144>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00f      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a2c      	ldr	r2, [pc, #176]	@ (8006e48 <TIM_Base_SetConfig+0x148>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00b      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006e4c <TIM_Base_SetConfig+0x14c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d007      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2a      	ldr	r2, [pc, #168]	@ (8006e50 <TIM_Base_SetConfig+0x150>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a29      	ldr	r2, [pc, #164]	@ (8006e54 <TIM_Base_SetConfig+0x154>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d108      	bne.n	8006dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a10      	ldr	r2, [pc, #64]	@ (8006e2c <TIM_Base_SetConfig+0x12c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d003      	beq.n	8006df8 <TIM_Base_SetConfig+0xf8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a12      	ldr	r2, [pc, #72]	@ (8006e3c <TIM_Base_SetConfig+0x13c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d103      	bne.n	8006e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d105      	bne.n	8006e1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f023 0201 	bic.w	r2, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	611a      	str	r2, [r3, #16]
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40000c00 	.word	0x40000c00
 8006e3c:	40010400 	.word	0x40010400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800
 8006e4c:	40001800 	.word	0x40001800
 8006e50:	40001c00 	.word	0x40001c00
 8006e54:	40002000 	.word	0x40002000

08006e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	f023 0201 	bic.w	r2, r3, #1
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f023 0302 	bic.w	r3, r3, #2
 8006ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a20      	ldr	r2, [pc, #128]	@ (8006f30 <TIM_OC1_SetConfig+0xd8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d003      	beq.n	8006ebc <TIM_OC1_SetConfig+0x64>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f34 <TIM_OC1_SetConfig+0xdc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d10c      	bne.n	8006ed6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f023 0308 	bic.w	r3, r3, #8
 8006ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 0304 	bic.w	r3, r3, #4
 8006ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a15      	ldr	r2, [pc, #84]	@ (8006f30 <TIM_OC1_SetConfig+0xd8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d003      	beq.n	8006ee6 <TIM_OC1_SetConfig+0x8e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a14      	ldr	r2, [pc, #80]	@ (8006f34 <TIM_OC1_SetConfig+0xdc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d111      	bne.n	8006f0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	621a      	str	r2, [r3, #32]
}
 8006f24:	bf00      	nop
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	40010000 	.word	0x40010000
 8006f34:	40010400 	.word	0x40010400

08006f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f023 0210 	bic.w	r2, r3, #16
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f023 0320 	bic.w	r3, r3, #32
 8006f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a22      	ldr	r2, [pc, #136]	@ (800701c <TIM_OC2_SetConfig+0xe4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d003      	beq.n	8006fa0 <TIM_OC2_SetConfig+0x68>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a21      	ldr	r2, [pc, #132]	@ (8007020 <TIM_OC2_SetConfig+0xe8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d10d      	bne.n	8006fbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a17      	ldr	r2, [pc, #92]	@ (800701c <TIM_OC2_SetConfig+0xe4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC2_SetConfig+0x94>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a16      	ldr	r2, [pc, #88]	@ (8007020 <TIM_OC2_SetConfig+0xe8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d113      	bne.n	8006ff4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40010000 	.word	0x40010000
 8007020:	40010400 	.word	0x40010400

08007024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800706c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a21      	ldr	r2, [pc, #132]	@ (8007104 <TIM_OC3_SetConfig+0xe0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <TIM_OC3_SetConfig+0x66>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a20      	ldr	r2, [pc, #128]	@ (8007108 <TIM_OC3_SetConfig+0xe4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d10d      	bne.n	80070a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a16      	ldr	r2, [pc, #88]	@ (8007104 <TIM_OC3_SetConfig+0xe0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_OC3_SetConfig+0x92>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a15      	ldr	r2, [pc, #84]	@ (8007108 <TIM_OC3_SetConfig+0xe4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d113      	bne.n	80070de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	621a      	str	r2, [r3, #32]
}
 80070f8:	bf00      	nop
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	40010000 	.word	0x40010000
 8007108:	40010400 	.word	0x40010400

0800710c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a12      	ldr	r2, [pc, #72]	@ (80071b0 <TIM_OC4_SetConfig+0xa4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC4_SetConfig+0x68>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a11      	ldr	r2, [pc, #68]	@ (80071b4 <TIM_OC4_SetConfig+0xa8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d109      	bne.n	8007188 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800717a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	019b      	lsls	r3, r3, #6
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000
 80071b4:	40010400 	.word	0x40010400

080071b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	2201      	movs	r2, #1
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1a      	ldr	r2, [r3, #32]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	43db      	mvns	r3, r3
 80071da:	401a      	ands	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1a      	ldr	r2, [r3, #32]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	fa01 f303 	lsl.w	r3, r1, r3
 80071f0:	431a      	orrs	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e05a      	b.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a21      	ldr	r2, [pc, #132]	@ (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d022      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007268:	d01d      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1d      	ldr	r2, [pc, #116]	@ (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1b      	ldr	r2, [pc, #108]	@ (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1a      	ldr	r2, [pc, #104]	@ (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a18      	ldr	r2, [pc, #96]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a17      	ldr	r2, [pc, #92]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a15      	ldr	r2, [pc, #84]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d10c      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40010400 	.word	0x40010400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40001800 	.word	0x40001800

080072fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007314:	2302      	movs	r3, #2
 8007316:	e03d      	b.n	8007394 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073a0:	b084      	sub	sp, #16
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	f107 001c 	add.w	r0, r7, #28
 80073ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d123      	bne.n	8007402 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d105      	bne.n	80073f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f9dc 	bl	80077b4 <USB_CoreReset>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
 8007400:	e01b      	b.n	800743a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f9d0 	bl	80077b4 <USB_CoreReset>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007418:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	639a      	str	r2, [r3, #56]	@ 0x38
 800742c:	e005      	b.n	800743a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007432:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800743a:	7fbb      	ldrb	r3, [r7, #30]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d10b      	bne.n	8007458 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f043 0206 	orr.w	r2, r3, #6
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f043 0220 	orr.w	r2, r3, #32
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007464:	b004      	add	sp, #16
 8007466:	4770      	bx	lr

08007468 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f043 0201 	orr.w	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 0201 	bic.w	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d115      	bne.n	80074fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074da:	200a      	movs	r0, #10
 80074dc:	f7fa f8fa 	bl	80016d4 <HAL_Delay>
      ms += 10U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	330a      	adds	r3, #10
 80074e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f956 	bl	8007798 <USB_GetMode>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d01e      	beq.n	8007530 <USB_SetCurrentMode+0x84>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80074f6:	d9f0      	bls.n	80074da <USB_SetCurrentMode+0x2e>
 80074f8:	e01a      	b.n	8007530 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d115      	bne.n	800752c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800750c:	200a      	movs	r0, #10
 800750e:	f7fa f8e1 	bl	80016d4 <HAL_Delay>
      ms += 10U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	330a      	adds	r3, #10
 8007516:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f93d 	bl	8007798 <USB_GetMode>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <USB_SetCurrentMode+0x84>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2bc7      	cmp	r3, #199	@ 0xc7
 8007528:	d9f0      	bls.n	800750c <USB_SetCurrentMode+0x60>
 800752a:	e001      	b.n	8007530 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e005      	b.n	800753c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2bc8      	cmp	r3, #200	@ 0xc8
 8007534:	d101      	bne.n	800753a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3301      	adds	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800755e:	d901      	bls.n	8007564 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e01b      	b.n	800759c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	daf2      	bge.n	8007552 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	019b      	lsls	r3, r3, #6
 8007574:	f043 0220 	orr.w	r2, r3, #32
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3301      	adds	r3, #1
 8007580:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007588:	d901      	bls.n	800758e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e006      	b.n	800759c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b20      	cmp	r3, #32
 8007598:	d0f0      	beq.n	800757c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c0:	d901      	bls.n	80075c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e018      	b.n	80075f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	daf2      	bge.n	80075b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2210      	movs	r2, #16
 80075d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e4:	d901      	bls.n	80075ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e006      	b.n	80075f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b10      	cmp	r3, #16
 80075f4:	d0f0      	beq.n	80075d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	@ 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4611      	mov	r1, r2
 8007610:	461a      	mov	r2, r3
 8007612:	460b      	mov	r3, r1
 8007614:	71fb      	strb	r3, [r7, #7]
 8007616:	4613      	mov	r3, r2
 8007618:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007622:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d123      	bne.n	8007672 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800762a:	88bb      	ldrh	r3, [r7, #4]
 800762c:	3303      	adds	r3, #3
 800762e:	089b      	lsrs	r3, r3, #2
 8007630:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007632:	2300      	movs	r3, #0
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	e018      	b.n	800766a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	031a      	lsls	r2, r3, #12
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	4413      	add	r3, r2
 8007640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007644:	461a      	mov	r2, r3
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	3301      	adds	r3, #1
 8007650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	3301      	adds	r3, #1
 8007656:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	3301      	adds	r3, #1
 800765c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	3301      	adds	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	3301      	adds	r3, #1
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	429a      	cmp	r2, r3
 8007670:	d3e2      	bcc.n	8007638 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3724      	adds	r7, #36	@ 0x24
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007680:	b480      	push	{r7}
 8007682:	b08b      	sub	sp, #44	@ 0x2c
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	089b      	lsrs	r3, r3, #2
 800769a:	b29b      	uxth	r3, r3
 800769c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076a6:	2300      	movs	r3, #0
 80076a8:	623b      	str	r3, [r7, #32]
 80076aa:	e014      	b.n	80076d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	3301      	adds	r3, #1
 80076bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	3301      	adds	r3, #1
 80076c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	3301      	adds	r3, #1
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	3301      	adds	r3, #1
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	3301      	adds	r3, #1
 80076d4:	623b      	str	r3, [r7, #32]
 80076d6:	6a3a      	ldr	r2, [r7, #32]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d3e6      	bcc.n	80076ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076de:	8bfb      	ldrh	r3, [r7, #30]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01e      	beq.n	8007722 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ee:	461a      	mov	r2, r3
 80076f0:	f107 0310 	add.w	r3, r7, #16
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
 8007704:	b2da      	uxtb	r2, r3
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	701a      	strb	r2, [r3, #0]
      i++;
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	3301      	adds	r3, #1
 800770e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	3301      	adds	r3, #1
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007716:	8bfb      	ldrh	r3, [r7, #30]
 8007718:	3b01      	subs	r3, #1
 800771a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800771c:	8bfb      	ldrh	r3, [r7, #30]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1ea      	bne.n	80076f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007724:	4618      	mov	r0, r3
 8007726:	372c      	adds	r7, #44	@ 0x2c
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4013      	ands	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007748:	68fb      	ldr	r3, [r7, #12]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	460b      	mov	r3, r1
 8007760:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	4013      	ands	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800778a:	68bb      	ldr	r3, [r7, #8]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0301 	and.w	r3, r3, #1
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3301      	adds	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077cc:	d901      	bls.n	80077d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e01b      	b.n	800780a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	daf2      	bge.n	80077c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f043 0201 	orr.w	r2, r3, #1
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077f6:	d901      	bls.n	80077fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e006      	b.n	800780a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d0f0      	beq.n	80077ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
	...

08007818 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007818:	b084      	sub	sp, #16
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007838:	461a      	mov	r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007842:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d119      	bne.n	80078a2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800786e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007872:	2b01      	cmp	r3, #1
 8007874:	d10a      	bne.n	800788c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007884:	f043 0304 	orr.w	r3, r3, #4
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	e014      	b.n	80078b6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800789a:	f023 0304 	bic.w	r3, r3, #4
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e009      	b.n	80078b6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078b0:	f023 0304 	bic.w	r3, r3, #4
 80078b4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078b6:	2110      	movs	r1, #16
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff fe43 	bl	8007544 <USB_FlushTxFifo>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff fe6d 	bl	80075a8 <USB_FlushRxFifo>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	e015      	b.n	800790a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ea:	461a      	mov	r2, r3
 80078ec:	f04f 33ff 	mov.w	r3, #4294967295
 80078f0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078fe:	461a      	mov	r2, r3
 8007900:	2300      	movs	r3, #0
 8007902:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	3301      	adds	r3, #1
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800790e:	461a      	mov	r2, r3
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4293      	cmp	r3, r2
 8007914:	d3e3      	bcc.n	80078de <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f04f 32ff 	mov.w	r2, #4294967295
 8007922:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a18      	ldr	r2, [pc, #96]	@ (8007988 <USB_HostInit+0x170>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d10b      	bne.n	8007944 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007932:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a15      	ldr	r2, [pc, #84]	@ (800798c <USB_HostInit+0x174>)
 8007938:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a14      	ldr	r2, [pc, #80]	@ (8007990 <USB_HostInit+0x178>)
 800793e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007942:	e009      	b.n	8007958 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2280      	movs	r2, #128	@ 0x80
 8007948:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a11      	ldr	r2, [pc, #68]	@ (8007994 <USB_HostInit+0x17c>)
 800794e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a11      	ldr	r2, [pc, #68]	@ (8007998 <USB_HostInit+0x180>)
 8007954:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800795c:	2b00      	cmp	r3, #0
 800795e:	d105      	bne.n	800796c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f043 0210 	orr.w	r2, r3, #16
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699a      	ldr	r2, [r3, #24]
 8007970:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <USB_HostInit+0x184>)
 8007972:	4313      	orrs	r3, r2
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007984:	b004      	add	sp, #16
 8007986:	4770      	bx	lr
 8007988:	40040000 	.word	0x40040000
 800798c:	01000200 	.word	0x01000200
 8007990:	00e00300 	.word	0x00e00300
 8007994:	00600080 	.word	0x00600080
 8007998:	004000e0 	.word	0x004000e0
 800799c:	a3200008 	.word	0xa3200008

080079a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	68f9      	ldr	r1, [r7, #12]
 80079d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80079d8:	4313      	orrs	r3, r2
 80079da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d107      	bne.n	80079f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079e8:	461a      	mov	r2, r3
 80079ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80079ee:	6053      	str	r3, [r2, #4]
 80079f0:	e00c      	b.n	8007a0c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d107      	bne.n	8007a08 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079fe:	461a      	mov	r2, r3
 8007a00:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007a04:	6053      	str	r3, [r2, #4]
 8007a06:	e001      	b.n	8007a0c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a3a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a48:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007a4a:	2064      	movs	r0, #100	@ 0x64
 8007a4c:	f7f9 fe42 	bl	80016d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a5c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007a5e:	200a      	movs	r0, #10
 8007a60:	f7f9 fe38 	bl	80016d4 <HAL_Delay>

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a92:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <USB_DriveVbus+0x44>
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d106      	bne.n	8007ab2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007aac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ab0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007abc:	d109      	bne.n	8007ad2 <USB_DriveVbus+0x64>
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007acc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ad0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	0c5b      	lsrs	r3, r3, #17
 8007afe:	f003 0303 	and.w	r3, r3, #3
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	b29b      	uxth	r3, r3
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	70fb      	strb	r3, [r7, #3]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70bb      	strb	r3, [r7, #2]
 8007b46:	4613      	mov	r3, r2
 8007b48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295
 8007b64:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007b66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d87c      	bhi.n	8007c68 <USB_HC_Init+0x138>
 8007b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b74 <USB_HC_Init+0x44>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007c2b 	.word	0x08007c2b
 8007b7c:	08007b85 	.word	0x08007b85
 8007b80:	08007bed 	.word	0x08007bed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b90:	461a      	mov	r2, r3
 8007b92:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007b96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007b98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da10      	bge.n	8007bc2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bbe:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007bc0:	e055      	b.n	8007c6e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a6f      	ldr	r2, [pc, #444]	@ (8007d84 <USB_HC_Init+0x254>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d151      	bne.n	8007c6e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	78fa      	ldrb	r2, [r7, #3]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007be4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007be8:	60d3      	str	r3, [r2, #12]
      break;
 8007bea:	e040      	b.n	8007c6e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007bfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da34      	bge.n	8007c72 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c28:	e023      	b.n	8007c72 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c36:	461a      	mov	r2, r3
 8007c38:	f240 2325 	movw	r3, #549	@ 0x225
 8007c3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da17      	bge.n	8007c76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c60:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007c64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c66:	e006      	b.n	8007c76 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	77fb      	strb	r3, [r7, #31]
      break;
 8007c6c:	e004      	b.n	8007c78 <USB_HC_Init+0x148>
      break;
 8007c6e:	bf00      	nop
 8007c70:	e002      	b.n	8007c78 <USB_HC_Init+0x148>
      break;
 8007c72:	bf00      	nop
 8007c74:	e000      	b.n	8007c78 <USB_HC_Init+0x148>
      break;
 8007c76:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c84:	461a      	mov	r2, r3
 8007c86:	2300      	movs	r3, #0
 8007c88:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	78fa      	ldrb	r2, [r7, #3]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ca4:	f043 0302 	orr.w	r3, r3, #2
 8007ca8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	2101      	movs	r1, #1
 8007cba:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbe:	6939      	ldr	r1, [r7, #16]
 8007cc0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007cd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da03      	bge.n	8007ce4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007cdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce0:	61bb      	str	r3, [r7, #24]
 8007ce2:	e001      	b.n	8007ce8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fef9 	bl	8007ae0 <USB_GetHostSpeed>
 8007cee:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007cf0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d106      	bne.n	8007d06 <USB_HC_Init+0x1d6>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d003      	beq.n	8007d06 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007cfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	e001      	b.n	8007d0a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d0a:	787b      	ldrb	r3, [r7, #1]
 8007d0c:	059b      	lsls	r3, r3, #22
 8007d0e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d12:	78bb      	ldrb	r3, [r7, #2]
 8007d14:	02db      	lsls	r3, r3, #11
 8007d16:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d1a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d20:	049b      	lsls	r3, r3, #18
 8007d22:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d26:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007d28:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d2e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d48:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d003      	beq.n	8007d5a <USB_HC_Init+0x22a>
 8007d52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d10f      	bne.n	8007d7a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	0151      	lsls	r1, r2, #5
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	440a      	add	r2, r1
 8007d70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d78:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40040000 	.word	0x40040000

08007d88 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08c      	sub	sp, #48	@ 0x30
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007da4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4a5d      	ldr	r2, [pc, #372]	@ (8007f20 <USB_HC_StartXfer+0x198>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d12f      	bne.n	8007e0e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d11c      	bne.n	8007dee <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	7c9b      	ldrb	r3, [r3, #18]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <USB_HC_StartXfer+0x3c>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	7c9b      	ldrb	r3, [r3, #18]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d124      	bne.n	8007e0e <USB_HC_StartXfer+0x86>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	799b      	ldrb	r3, [r3, #6]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d120      	bne.n	8007e0e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	6a3a      	ldr	r2, [r7, #32]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dea:	60d3      	str	r3, [r2, #12]
 8007dec:	e00f      	b.n	8007e0e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	791b      	ldrb	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10b      	bne.n	8007e0e <USB_HC_StartXfer+0x86>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	795b      	ldrb	r3, [r3, #5]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d107      	bne.n	8007e0e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	785b      	ldrb	r3, [r3, #1]
 8007e02:	4619      	mov	r1, r3
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 fb6b 	bl	80084e0 <USB_DoPing>
        return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e232      	b.n	8008274 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	799b      	ldrb	r3, [r3, #6]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d158      	bne.n	8007ec8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007e16:	2301      	movs	r3, #1
 8007e18:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	78db      	ldrb	r3, [r3, #3]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d007      	beq.n	8007e32 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	8a92      	ldrh	r2, [r2, #20]
 8007e28:	fb03 f202 	mul.w	r2, r3, r2
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	61da      	str	r2, [r3, #28]
 8007e30:	e07c      	b.n	8007f2c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	7c9b      	ldrb	r3, [r3, #18]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d130      	bne.n	8007e9c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	2bbc      	cmp	r3, #188	@ 0xbc
 8007e40:	d918      	bls.n	8007e74 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	8a9b      	ldrh	r3, [r3, #20]
 8007e46:	461a      	mov	r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	69da      	ldr	r2, [r3, #28]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d003      	beq.n	8007e64 <USB_HC_StartXfer+0xdc>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d103      	bne.n	8007e6c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2202      	movs	r2, #2
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	e05f      	b.n	8007f2c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	60da      	str	r2, [r3, #12]
 8007e72:	e05b      	b.n	8007f2c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6a1a      	ldr	r2, [r3, #32]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d007      	beq.n	8007e94 <USB_HC_StartXfer+0x10c>
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d003      	beq.n	8007e94 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2204      	movs	r2, #4
 8007e90:	60da      	str	r2, [r3, #12]
 8007e92:	e04b      	b.n	8007f2c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2203      	movs	r2, #3
 8007e98:	60da      	str	r2, [r3, #12]
 8007e9a:	e047      	b.n	8007f2c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d10d      	bne.n	8007ebe <USB_HC_StartXfer+0x136>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	8a92      	ldrh	r2, [r2, #20]
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d907      	bls.n	8007ebe <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	8a92      	ldrh	r2, [r2, #20]
 8007eb4:	fb03 f202 	mul.w	r2, r3, r2
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	61da      	str	r2, [r3, #28]
 8007ebc:	e036      	b.n	8007f2c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	61da      	str	r2, [r3, #28]
 8007ec6:	e031      	b.n	8007f2c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d018      	beq.n	8007f02 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	8a92      	ldrh	r2, [r2, #20]
 8007ed8:	4413      	add	r3, r2
 8007eda:	3b01      	subs	r3, #1
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	8a92      	ldrh	r2, [r2, #20]
 8007ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ee4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007ee6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007ee8:	8b7b      	ldrh	r3, [r7, #26]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d90b      	bls.n	8007f06 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007eee:	8b7b      	ldrh	r3, [r7, #26]
 8007ef0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ef2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	8a92      	ldrh	r2, [r2, #20]
 8007ef8:	fb03 f202 	mul.w	r2, r3, r2
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	61da      	str	r2, [r3, #28]
 8007f00:	e001      	b.n	8007f06 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007f02:	2301      	movs	r3, #1
 8007f04:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	78db      	ldrb	r3, [r3, #3]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	8a92      	ldrh	r2, [r2, #20]
 8007f14:	fb03 f202 	mul.w	r2, r3, r2
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	61da      	str	r2, [r3, #28]
 8007f1c:	e006      	b.n	8007f2c <USB_HC_StartXfer+0x1a4>
 8007f1e:	bf00      	nop
 8007f20:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	6a1a      	ldr	r2, [r3, #32]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f36:	04d9      	lsls	r1, r3, #19
 8007f38:	4ba3      	ldr	r3, [pc, #652]	@ (80081c8 <USB_HC_StartXfer+0x440>)
 8007f3a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f3c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	7d9b      	ldrb	r3, [r3, #22]
 8007f42:	075b      	lsls	r3, r3, #29
 8007f44:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f48:	69f9      	ldr	r1, [r7, #28]
 8007f4a:	0148      	lsls	r0, r1, #5
 8007f4c:	6a39      	ldr	r1, [r7, #32]
 8007f4e:	4401      	add	r1, r0
 8007f50:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f54:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f56:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d009      	beq.n	8007f72 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6999      	ldr	r1, [r3, #24]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6e:	460a      	mov	r2, r1
 8007f70:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bf0c      	ite	eq
 8007f82:	2301      	moveq	r3, #1
 8007f84:	2300      	movne	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fa4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fa8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	7e7b      	ldrb	r3, [r7, #25]
 8007fba:	075b      	lsls	r3, r3, #29
 8007fbc:	69f9      	ldr	r1, [r7, #28]
 8007fbe:	0148      	lsls	r0, r1, #5
 8007fc0:	6a39      	ldr	r1, [r7, #32]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	799b      	ldrb	r3, [r3, #6]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	f040 80c3 	bne.w	800815c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	7c5b      	ldrb	r3, [r3, #17]
 8007fda:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	6a3a      	ldr	r2, [r7, #32]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007fee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ff2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	6a3a      	ldr	r2, [r7, #32]
 8008008:	440a      	add	r2, r1
 800800a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800800e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008012:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	79db      	ldrb	r3, [r3, #7]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d123      	bne.n	8008064 <USB_HC_StartXfer+0x2dc>
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	78db      	ldrb	r3, [r3, #3]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d11f      	bne.n	8008064 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	4413      	add	r3, r2
 800802c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	6a3a      	ldr	r2, [r7, #32]
 8008038:	440a      	add	r2, r1
 800803a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800803e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008042:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	4413      	add	r3, r2
 800804c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	0151      	lsls	r1, r2, #5
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	440a      	add	r2, r1
 800805a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800805e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008062:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	7c9b      	ldrb	r3, [r3, #18]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d003      	beq.n	8008074 <USB_HC_StartXfer+0x2ec>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	7c9b      	ldrb	r3, [r3, #18]
 8008070:	2b03      	cmp	r3, #3
 8008072:	d117      	bne.n	80080a4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008078:	2b01      	cmp	r3, #1
 800807a:	d113      	bne.n	80080a4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	78db      	ldrb	r3, [r3, #3]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10f      	bne.n	80080a4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	4413      	add	r3, r2
 800808c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	6a3a      	ldr	r2, [r7, #32]
 8008098:	440a      	add	r2, r1
 800809a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800809e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080a2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	7c9b      	ldrb	r3, [r3, #18]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d162      	bne.n	8008172 <USB_HC_StartXfer+0x3ea>
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	78db      	ldrb	r3, [r3, #3]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d15e      	bne.n	8008172 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d858      	bhi.n	8008170 <USB_HC_StartXfer+0x3e8>
 80080be:	a201      	add	r2, pc, #4	@ (adr r2, 80080c4 <USB_HC_StartXfer+0x33c>)
 80080c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c4:	080080d5 	.word	0x080080d5
 80080c8:	080080f7 	.word	0x080080f7
 80080cc:	08008119 	.word	0x08008119
 80080d0:	0800813b 	.word	0x0800813b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	0151      	lsls	r1, r2, #5
 80080e6:	6a3a      	ldr	r2, [r7, #32]
 80080e8:	440a      	add	r2, r1
 80080ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080f2:	6053      	str	r3, [r2, #4]
          break;
 80080f4:	e03d      	b.n	8008172 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	0151      	lsls	r1, r2, #5
 8008108:	6a3a      	ldr	r2, [r7, #32]
 800810a:	440a      	add	r2, r1
 800810c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008110:	f043 030e 	orr.w	r3, r3, #14
 8008114:	6053      	str	r3, [r2, #4]
          break;
 8008116:	e02c      	b.n	8008172 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	4413      	add	r3, r2
 8008120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	6a3a      	ldr	r2, [r7, #32]
 800812c:	440a      	add	r2, r1
 800812e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008136:	6053      	str	r3, [r2, #4]
          break;
 8008138:	e01b      	b.n	8008172 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	4413      	add	r3, r2
 8008142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	6a3a      	ldr	r2, [r7, #32]
 800814e:	440a      	add	r2, r1
 8008150:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008154:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008158:	6053      	str	r3, [r2, #4]
          break;
 800815a:	e00a      	b.n	8008172 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	4413      	add	r3, r2
 8008164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008168:	461a      	mov	r2, r3
 800816a:	2300      	movs	r3, #0
 800816c:	6053      	str	r3, [r2, #4]
 800816e:	e000      	b.n	8008172 <USB_HC_StartXfer+0x3ea>
          break;
 8008170:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	4413      	add	r3, r2
 800817a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008188:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	78db      	ldrb	r3, [r3, #3]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	e003      	b.n	80081a4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081a2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081aa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b8:	461a      	mov	r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e055      	b.n	8008274 <USB_HC_StartXfer+0x4ec>
 80081c8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	78db      	ldrb	r3, [r3, #3]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d14e      	bne.n	8008272 <USB_HC_StartXfer+0x4ea>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d04a      	beq.n	8008272 <USB_HC_StartXfer+0x4ea>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	79db      	ldrb	r3, [r3, #7]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d146      	bne.n	8008272 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	7c9b      	ldrb	r3, [r3, #18]
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d831      	bhi.n	8008250 <USB_HC_StartXfer+0x4c8>
 80081ec:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <USB_HC_StartXfer+0x46c>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008205 	.word	0x08008205
 80081f8:	08008229 	.word	0x08008229
 80081fc:	08008205 	.word	0x08008205
 8008200:	08008229 	.word	0x08008229
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	3303      	adds	r3, #3
 800820a:	089b      	lsrs	r3, r3, #2
 800820c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800820e:	8afa      	ldrh	r2, [r7, #22]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	b29b      	uxth	r3, r3
 8008216:	429a      	cmp	r2, r3
 8008218:	d91c      	bls.n	8008254 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f043 0220 	orr.w	r2, r3, #32
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	619a      	str	r2, [r3, #24]
        }
        break;
 8008226:	e015      	b.n	8008254 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	3303      	adds	r3, #3
 800822e:	089b      	lsrs	r3, r3, #2
 8008230:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008232:	8afa      	ldrh	r2, [r7, #22]
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	b29b      	uxth	r3, r3
 800823e:	429a      	cmp	r2, r3
 8008240:	d90a      	bls.n	8008258 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	619a      	str	r2, [r3, #24]
        }
        break;
 800824e:	e003      	b.n	8008258 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008250:	bf00      	nop
 8008252:	e002      	b.n	800825a <USB_HC_StartXfer+0x4d2>
        break;
 8008254:	bf00      	nop
 8008256:	e000      	b.n	800825a <USB_HC_StartXfer+0x4d2>
        break;
 8008258:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6999      	ldr	r1, [r3, #24]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	785a      	ldrb	r2, [r3, #1]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	b29b      	uxth	r3, r3
 8008268:	2000      	movs	r0, #0
 800826a:	9000      	str	r0, [sp, #0]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff f9c9 	bl	8007604 <USB_WritePacket>
  }

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3728      	adds	r7, #40	@ 0x28
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	b29b      	uxth	r3, r3
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800829e:	b480      	push	{r7}
 80082a0:	b089      	sub	sp, #36	@ 0x24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	0c9b      	lsrs	r3, r3, #18
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	0fdb      	lsrs	r3, r3, #31
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	0fdb      	lsrs	r3, r3, #31
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b20      	cmp	r3, #32
 8008302:	d10d      	bne.n	8008320 <USB_HC_Halt+0x82>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <USB_HC_Halt+0x82>
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d002      	beq.n	800831c <USB_HC_Halt+0x7e>
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d101      	bne.n	8008320 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	e0d8      	b.n	80084d2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <USB_HC_Halt+0x8e>
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d173      	bne.n	8008414 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	440a      	add	r2, r1
 8008342:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008346:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800834a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d14a      	bne.n	80083ee <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d133      	bne.n	80083cc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	4413      	add	r3, r2
 800836c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	0151      	lsls	r1, r2, #5
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	440a      	add	r2, r1
 800837a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800837e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008382:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	4413      	add	r3, r2
 800838c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	0151      	lsls	r1, r2, #5
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	440a      	add	r2, r1
 800839a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800839e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083a2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083b0:	d82e      	bhi.n	8008410 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083c8:	d0ec      	beq.n	80083a4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083ca:	e081      	b.n	80084d0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083ea:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083ec:	e070      	b.n	80084d0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	0151      	lsls	r1, r2, #5
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	440a      	add	r2, r1
 8008404:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008408:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800840c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800840e:	e05f      	b.n	80084d0 <USB_HC_Halt+0x232>
            break;
 8008410:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008412:	e05d      	b.n	80084d0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	440a      	add	r2, r1
 800842a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800842e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008432:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d133      	bne.n	80084ac <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	4413      	add	r3, r2
 800844c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	0151      	lsls	r1, r2, #5
 8008456:	69fa      	ldr	r2, [r7, #28]
 8008458:	440a      	add	r2, r1
 800845a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800845e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008462:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	440a      	add	r2, r1
 800847a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800847e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008482:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	3301      	adds	r3, #1
 8008488:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008490:	d81d      	bhi.n	80084ce <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084a8:	d0ec      	beq.n	8008484 <USB_HC_Halt+0x1e6>
 80084aa:	e011      	b.n	80084d0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	e000      	b.n	80084d0 <USB_HC_Halt+0x232>
          break;
 80084ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3724      	adds	r7, #36	@ 0x24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80084f4:	2301      	movs	r3, #1
 80084f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	04da      	lsls	r2, r3, #19
 80084fc:	4b15      	ldr	r3, [pc, #84]	@ (8008554 <USB_DoPing+0x74>)
 80084fe:	4013      	ands	r3, r2
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	0151      	lsls	r1, r2, #5
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	440a      	add	r2, r1
 8008508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800850c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008510:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	4413      	add	r3, r2
 800851a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008528:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008530:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800853e:	461a      	mov	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	1ff80000 	.word	0x1ff80000

08008558 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fe ff8c 	bl	800748a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008572:	2110      	movs	r1, #16
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fe ffe5 	bl	8007544 <USB_FlushTxFifo>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff f80f 	bl	80075a8 <USB_FlushRxFifo>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008594:	2300      	movs	r3, #0
 8008596:	61bb      	str	r3, [r7, #24]
 8008598:	e01f      	b.n	80085da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ce:	461a      	mov	r2, r3
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	3301      	adds	r3, #1
 80085d8:	61bb      	str	r3, [r7, #24]
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b0f      	cmp	r3, #15
 80085de:	d9dc      	bls.n	800859a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80085e0:	2300      	movs	r3, #0
 80085e2:	61bb      	str	r3, [r7, #24]
 80085e4:	e034      	b.n	8008650 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008604:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800860c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800861a:	461a      	mov	r2, r3
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800862c:	d80c      	bhi.n	8008648 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008644:	d0ec      	beq.n	8008620 <USB_StopHost+0xc8>
 8008646:	e000      	b.n	800864a <USB_StopHost+0xf2>
        break;
 8008648:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	3301      	adds	r3, #1
 800864e:	61bb      	str	r3, [r7, #24]
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2b0f      	cmp	r3, #15
 8008654:	d9c7      	bls.n	80085e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800865c:	461a      	mov	r2, r3
 800865e:	f04f 33ff 	mov.w	r3, #4294967295
 8008662:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f04f 32ff 	mov.w	r2, #4294967295
 800866a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7fe fefb 	bl	8007468 <USB_EnableGlobalInt>

  return ret;
 8008672:	7ffb      	ldrb	r3, [r7, #31]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b089      	sub	sp, #36	@ 0x24
 8008680:	af04      	add	r7, sp, #16
 8008682:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008684:	2301      	movs	r3, #1
 8008686:	2202      	movs	r2, #2
 8008688:	2102      	movs	r1, #2
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fc85 	bl	8008f9a <USBH_FindInterface>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2bff      	cmp	r3, #255	@ 0xff
 8008698:	d002      	beq.n	80086a0 <USBH_CDC_InterfaceInit+0x24>
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d901      	bls.n	80086a4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80086a0:	2302      	movs	r3, #2
 80086a2:	e13d      	b.n	8008920 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fc5a 	bl	8008f62 <USBH_SelectInterface>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80086b8:	2302      	movs	r3, #2
 80086ba:	e131      	b.n	8008920 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80086c2:	2050      	movs	r0, #80	@ 0x50
 80086c4:	f002 fb64 	bl	800ad90 <malloc>
 80086c8:	4603      	mov	r3, r0
 80086ca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80086dc:	2302      	movs	r3, #2
 80086de:	e11f      	b.n	8008920 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80086e0:	2250      	movs	r2, #80	@ 0x50
 80086e2:	2100      	movs	r1, #0
 80086e4:	68b8      	ldr	r0, [r7, #8]
 80086e6:	f002 fe1b 	bl	800b320 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	211a      	movs	r1, #26
 80086f0:	fb01 f303 	mul.w	r3, r1, r3
 80086f4:	4413      	add	r3, r2
 80086f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	b25b      	sxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	da15      	bge.n	800872e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	211a      	movs	r1, #26
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	4413      	add	r3, r2
 800870e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008712:	781a      	ldrb	r2, [r3, #0]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	211a      	movs	r1, #26
 800871e:	fb01 f303 	mul.w	r3, r1, r3
 8008722:	4413      	add	r3, r2
 8008724:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008728:	881a      	ldrh	r2, [r3, #0]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 ffbe 	bl	800a6b6 <USBH_AllocPipe>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	7819      	ldrb	r1, [r3, #0]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	7858      	ldrb	r0, [r3, #1]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	8952      	ldrh	r2, [r2, #10]
 800875a:	9202      	str	r2, [sp, #8]
 800875c:	2203      	movs	r2, #3
 800875e:	9201      	str	r2, [sp, #4]
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	4623      	mov	r3, r4
 8008764:	4602      	mov	r2, r0
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 ff76 	bl	800a658 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2200      	movs	r2, #0
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f002 fa85 	bl	800ac84 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800877a:	2300      	movs	r3, #0
 800877c:	2200      	movs	r2, #0
 800877e:	210a      	movs	r1, #10
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fc0a 	bl	8008f9a <USBH_FindInterface>
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	2bff      	cmp	r3, #255	@ 0xff
 800878e:	d002      	beq.n	8008796 <USBH_CDC_InterfaceInit+0x11a>
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d901      	bls.n	800879a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008796:	2302      	movs	r3, #2
 8008798:	e0c2      	b.n	8008920 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	211a      	movs	r1, #26
 80087a0:	fb01 f303 	mul.w	r3, r1, r3
 80087a4:	4413      	add	r3, r2
 80087a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	b25b      	sxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da16      	bge.n	80087e0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	211a      	movs	r1, #26
 80087b8:	fb01 f303 	mul.w	r3, r1, r3
 80087bc:	4413      	add	r3, r2
 80087be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	211a      	movs	r1, #26
 80087ce:	fb01 f303 	mul.w	r3, r1, r3
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087d8:	881a      	ldrh	r2, [r3, #0]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	835a      	strh	r2, [r3, #26]
 80087de:	e015      	b.n	800880c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	211a      	movs	r1, #26
 80087e6:	fb01 f303 	mul.w	r3, r1, r3
 80087ea:	4413      	add	r3, r2
 80087ec:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087f0:	781a      	ldrb	r2, [r3, #0]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	211a      	movs	r1, #26
 80087fc:	fb01 f303 	mul.w	r3, r1, r3
 8008800:	4413      	add	r3, r2
 8008802:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008806:	881a      	ldrh	r2, [r3, #0]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	211a      	movs	r1, #26
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	4413      	add	r3, r2
 8008818:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	b25b      	sxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	da16      	bge.n	8008852 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	211a      	movs	r1, #26
 800882a:	fb01 f303 	mul.w	r3, r1, r3
 800882e:	4413      	add	r3, r2
 8008830:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008834:	781a      	ldrb	r2, [r3, #0]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	211a      	movs	r1, #26
 8008840:	fb01 f303 	mul.w	r3, r1, r3
 8008844:	4413      	add	r3, r2
 8008846:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800884a:	881a      	ldrh	r2, [r3, #0]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	835a      	strh	r2, [r3, #26]
 8008850:	e015      	b.n	800887e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	211a      	movs	r1, #26
 8008858:	fb01 f303 	mul.w	r3, r1, r3
 800885c:	4413      	add	r3, r2
 800885e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008862:	781a      	ldrb	r2, [r3, #0]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	211a      	movs	r1, #26
 800886e:	fb01 f303 	mul.w	r3, r1, r3
 8008872:	4413      	add	r3, r2
 8008874:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008878:	881a      	ldrh	r2, [r3, #0]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	7b9b      	ldrb	r3, [r3, #14]
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 ff16 	bl	800a6b6 <USBH_AllocPipe>
 800888a:	4603      	mov	r3, r0
 800888c:	461a      	mov	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	7bdb      	ldrb	r3, [r3, #15]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 ff0c 	bl	800a6b6 <USBH_AllocPipe>
 800889e:	4603      	mov	r3, r0
 80088a0:	461a      	mov	r2, r3
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	7b59      	ldrb	r1, [r3, #13]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	7b98      	ldrb	r0, [r3, #14]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	8b12      	ldrh	r2, [r2, #24]
 80088be:	9202      	str	r2, [sp, #8]
 80088c0:	2202      	movs	r2, #2
 80088c2:	9201      	str	r2, [sp, #4]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	4623      	mov	r3, r4
 80088c8:	4602      	mov	r2, r0
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 fec4 	bl	800a658 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	7b19      	ldrb	r1, [r3, #12]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	7bd8      	ldrb	r0, [r3, #15]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	8b52      	ldrh	r2, [r2, #26]
 80088e8:	9202      	str	r2, [sp, #8]
 80088ea:	2202      	movs	r2, #2
 80088ec:	9201      	str	r2, [sp, #4]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	4623      	mov	r3, r4
 80088f2:	4602      	mov	r2, r0
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 feaf 	bl	800a658 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	7b5b      	ldrb	r3, [r3, #13]
 8008906:	2200      	movs	r2, #0
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f002 f9ba 	bl	800ac84 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	7b1b      	ldrb	r3, [r3, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f002 f9b3 	bl	800ac84 <USBH_LL_SetToggle>

  return USBH_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	bd90      	pop	{r4, r7, pc}

08008928 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00e      	beq.n	8008960 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 fea4 	bl	800a696 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fecf 	bl	800a6f8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	7b1b      	ldrb	r3, [r3, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00e      	beq.n	8008986 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	7b1b      	ldrb	r3, [r3, #12]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fe91 	bl	800a696 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	7b1b      	ldrb	r3, [r3, #12]
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 febc 	bl	800a6f8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	7b5b      	ldrb	r3, [r3, #13]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00e      	beq.n	80089ac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	7b5b      	ldrb	r3, [r3, #13]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 fe7e 	bl	800a696 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	7b5b      	ldrb	r3, [r3, #13]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 fea9 	bl	800a6f8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00b      	beq.n	80089d0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f002 f9ed 	bl	800ada0 <free>
    phost->pActiveClass->pData = 0U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089cc:	2200      	movs	r2, #0
 80089ce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3340      	adds	r3, #64	@ 0x40
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f8b1 	bl	8008b5a <GetLineCoding>
 80089f8:	4603      	mov	r3, r0
 80089fa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a08:	2102      	movs	r1, #2
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a20:	2301      	movs	r3, #1
 8008a22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d877      	bhi.n	8008b2c <USBH_CDC_Process+0x114>
 8008a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a44 <USBH_CDC_Process+0x2c>)
 8008a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a42:	bf00      	nop
 8008a44:	08008a59 	.word	0x08008a59
 8008a48:	08008a5f 	.word	0x08008a5f
 8008a4c:	08008a8f 	.word	0x08008a8f
 8008a50:	08008b03 	.word	0x08008b03
 8008a54:	08008b11 	.word	0x08008b11
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5c:	e06d      	b.n	8008b3a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f897 	bl	8008b98 <SetLineCoding>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a7c:	e058      	b.n	8008b30 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d055      	beq.n	8008b30 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2204      	movs	r2, #4
 8008a88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008a8c:	e050      	b.n	8008b30 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	3340      	adds	r3, #64	@ 0x40
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f860 	bl	8008b5a <GetLineCoding>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d126      	bne.n	8008af2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ab6:	791b      	ldrb	r3, [r3, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d13b      	bne.n	8008b34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ac6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d133      	bne.n	8008b34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d12b      	bne.n	8008b34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ae4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d124      	bne.n	8008b34 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f958 	bl	8008da0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008af0:	e020      	b.n	8008b34 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d01d      	beq.n	8008b34 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2204      	movs	r2, #4
 8008afc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008b00:	e018      	b.n	8008b34 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f867 	bl	8008bd6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f8da 	bl	8008cc2 <CDC_ProcessReception>
      break;
 8008b0e:	e014      	b.n	8008b3a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008b10:	2100      	movs	r1, #0
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 f81a 	bl	8009b4c <USBH_ClrFeature>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008b2a:	e005      	b.n	8008b38 <USBH_CDC_Process+0x120>

    default:
      break;
 8008b2c:	bf00      	nop
 8008b2e:	e004      	b.n	8008b3a <USBH_CDC_Process+0x122>
      break;
 8008b30:	bf00      	nop
 8008b32:	e002      	b.n	8008b3a <USBH_CDC_Process+0x122>
      break;
 8008b34:	bf00      	nop
 8008b36:	e000      	b.n	8008b3a <USBH_CDC_Process+0x122>
      break;
 8008b38:	bf00      	nop

  }

  return status;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	22a1      	movs	r2, #161	@ 0xa1
 8008b68:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2221      	movs	r2, #33	@ 0x21
 8008b6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2207      	movs	r2, #7
 8008b80:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2207      	movs	r2, #7
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 fb14 	bl	800a1b6 <USBH_CtlReq>
 8008b8e:	4603      	mov	r3, r0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2221      	movs	r2, #33	@ 0x21
 8008ba6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2207      	movs	r2, #7
 8008bbe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2207      	movs	r2, #7
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 faf5 	bl	800a1b6 <USBH_CtlReq>
 8008bcc:	4603      	mov	r3, r0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b086      	sub	sp, #24
 8008bda:	af02      	add	r7, sp, #8
 8008bdc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d002      	beq.n	8008bfc <CDC_ProcessTransmission+0x26>
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d023      	beq.n	8008c42 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008bfa:	e05e      	b.n	8008cba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	8b12      	ldrh	r2, [r2, #24]
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d90b      	bls.n	8008c20 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	69d9      	ldr	r1, [r3, #28]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8b1a      	ldrh	r2, [r3, #24]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	7b5b      	ldrb	r3, [r3, #13]
 8008c14:	2001      	movs	r0, #1
 8008c16:	9000      	str	r0, [sp, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 fcda 	bl	800a5d2 <USBH_BulkSendData>
 8008c1e:	e00b      	b.n	8008c38 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	7b5b      	ldrb	r3, [r3, #13]
 8008c2e:	2001      	movs	r0, #1
 8008c30:	9000      	str	r0, [sp, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 fccd 	bl	800a5d2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c40:	e03b      	b.n	8008cba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	7b5b      	ldrb	r3, [r3, #13]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 fff1 	bl	800ac30 <USBH_LL_GetURBState>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d128      	bne.n	8008caa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	8b12      	ldrh	r2, [r2, #24]
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d90e      	bls.n	8008c82 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	8b12      	ldrh	r2, [r2, #24]
 8008c6c:	1a9a      	subs	r2, r3, r2
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	8b12      	ldrh	r2, [r2, #24]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	61da      	str	r2, [r3, #28]
 8008c80:	e002      	b.n	8008c88 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c98:	e00e      	b.n	8008cb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f868 	bl	8008d78 <USBH_CDC_TransmitCallback>
      break;
 8008ca8:	e006      	b.n	8008cb8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008caa:	7afb      	ldrb	r3, [r7, #11]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d103      	bne.n	8008cb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008cb8:	bf00      	nop
  }
}
 8008cba:	bf00      	nop
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b086      	sub	sp, #24
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d002      	beq.n	8008ce8 <CDC_ProcessReception+0x26>
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d00e      	beq.n	8008d04 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008ce6:	e043      	b.n	8008d70 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	6a19      	ldr	r1, [r3, #32]
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	8b5a      	ldrh	r2, [r3, #26]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	7b1b      	ldrb	r3, [r3, #12]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fc91 	bl	800a61c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008d02:	e035      	b.n	8008d70 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	7b1b      	ldrb	r3, [r3, #12]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f001 ff90 	bl	800ac30 <USBH_LL_GetURBState>
 8008d10:	4603      	mov	r3, r0
 8008d12:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008d14:	7cfb      	ldrb	r3, [r7, #19]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d129      	bne.n	8008d6e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	7b1b      	ldrb	r3, [r3, #12]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fef3 	bl	800ab0c <USBH_LL_GetLastXferSize>
 8008d26:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d016      	beq.n	8008d60 <CDC_ProcessReception+0x9e>
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	8b5b      	ldrh	r3, [r3, #26]
 8008d36:	461a      	mov	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d110      	bne.n	8008d60 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	1ad2      	subs	r2, r2, r3
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	6a1a      	ldr	r2, [r3, #32]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	441a      	add	r2, r3
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2203      	movs	r2, #3
 8008d5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008d5e:	e006      	b.n	8008d6e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f80f 	bl	8008d8c <USBH_CDC_ReceiveCallback>
      break;
 8008d6e:	bf00      	nop
  }
}
 8008d70:	bf00      	nop
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e029      	b.n	8008e20 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	79fa      	ldrb	r2, [r7, #7]
 8008dd0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f81f 	bl	8008e28 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f001 fdc3 	bl	800a9a4 <USBH_LL_Init>

  return USBH_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	e009      	b.n	8008e4e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	33e0      	adds	r3, #224	@ 0xe0
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	2200      	movs	r2, #0
 8008e46:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2b0f      	cmp	r3, #15
 8008e52:	d9f2      	bls.n	8008e3a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	e009      	b.n	8008e6e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e74:	d3f1      	bcc.n	8008e5a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2240      	movs	r2, #64	@ 0x40
 8008e9a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	331c      	adds	r3, #28
 8008ec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008eca:	2100      	movs	r1, #0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f002 fa27 	bl	800b320 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008edc:	2100      	movs	r1, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f002 fa1e 	bl	800b320 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008eea:	2212      	movs	r2, #18
 8008eec:	2100      	movs	r1, #0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f002 fa16 	bl	800b320 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008efa:	223e      	movs	r2, #62	@ 0x3e
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 fa0e 	bl	800b320 <memset>

  return USBH_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d016      	beq.n	8008f50 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10e      	bne.n	8008f4a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f32:	1c59      	adds	r1, r3, #1
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	33de      	adds	r3, #222	@ 0xde
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
 8008f48:	e004      	b.n	8008f54 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	73fb      	strb	r3, [r7, #15]
 8008f4e:	e001      	b.n	8008f54 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008f50:	2302      	movs	r3, #2
 8008f52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008f78:	78fa      	ldrb	r2, [r7, #3]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d204      	bcs.n	8008f88 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008f86:	e001      	b.n	8008f8c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b087      	sub	sp, #28
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	4603      	mov	r3, r0
 8008faa:	70fb      	strb	r3, [r7, #3]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70bb      	strb	r3, [r7, #2]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008fc2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fc4:	e025      	b.n	8009012 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	221a      	movs	r2, #26
 8008fca:	fb02 f303 	mul.w	r3, r2, r3
 8008fce:	3308      	adds	r3, #8
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3302      	adds	r3, #2
 8008fd6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	795b      	ldrb	r3, [r3, #5]
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d002      	beq.n	8008fe8 <USBH_FindInterface+0x4e>
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	2bff      	cmp	r3, #255	@ 0xff
 8008fe6:	d111      	bne.n	800900c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fec:	78ba      	ldrb	r2, [r7, #2]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d002      	beq.n	8008ff8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ff2:	78bb      	ldrb	r3, [r7, #2]
 8008ff4:	2bff      	cmp	r3, #255	@ 0xff
 8008ff6:	d109      	bne.n	800900c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ffc:	787a      	ldrb	r2, [r7, #1]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d002      	beq.n	8009008 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009002:	787b      	ldrb	r3, [r7, #1]
 8009004:	2bff      	cmp	r3, #255	@ 0xff
 8009006:	d101      	bne.n	800900c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	e006      	b.n	800901a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	3301      	adds	r3, #1
 8009010:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d9d6      	bls.n	8008fc6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009018:	23ff      	movs	r3, #255	@ 0xff
}
 800901a:	4618      	mov	r0, r3
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fcf4 	bl	800aa1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009034:	2101      	movs	r1, #1
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fe0d 	bl	800ac56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af04      	add	r7, sp, #16
 800904e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009050:	2302      	movs	r3, #2
 8009052:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b01      	cmp	r3, #1
 8009062:	d102      	bne.n	800906a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2203      	movs	r2, #3
 8009068:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b0b      	cmp	r3, #11
 8009072:	f200 81bb 	bhi.w	80093ec <USBH_Process+0x3a4>
 8009076:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <USBH_Process+0x34>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	080090ad 	.word	0x080090ad
 8009080:	080090df 	.word	0x080090df
 8009084:	08009147 	.word	0x08009147
 8009088:	08009387 	.word	0x08009387
 800908c:	080093ed 	.word	0x080093ed
 8009090:	080091e7 	.word	0x080091e7
 8009094:	0800932d 	.word	0x0800932d
 8009098:	0800921d 	.word	0x0800921d
 800909c:	0800923d 	.word	0x0800923d
 80090a0:	0800925b 	.word	0x0800925b
 80090a4:	0800929f 	.word	0x0800929f
 80090a8:	0800936f 	.word	0x0800936f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 819b 	beq.w	80093f0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80090c0:	20c8      	movs	r0, #200	@ 0xc8
 80090c2:	f001 fe12 	bl	800acea <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fd05 	bl	800aad6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80090dc:	e188      	b.n	80093f0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d107      	bne.n	80090f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090f6:	e18a      	b.n	800940e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80090fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009102:	d914      	bls.n	800912e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800910a:	3301      	adds	r3, #1
 800910c:	b2da      	uxtb	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800911a:	2b03      	cmp	r3, #3
 800911c:	d903      	bls.n	8009126 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	220d      	movs	r2, #13
 8009122:	701a      	strb	r2, [r3, #0]
      break;
 8009124:	e173      	b.n	800940e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	701a      	strb	r2, [r3, #0]
      break;
 800912c:	e16f      	b.n	800940e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009134:	f103 020a 	add.w	r2, r3, #10
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800913e:	200a      	movs	r0, #10
 8009140:	f001 fdd3 	bl	800acea <USBH_Delay>
      break;
 8009144:	e163      	b.n	800940e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d005      	beq.n	800915c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009156:	2104      	movs	r1, #4
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800915c:	2064      	movs	r0, #100	@ 0x64
 800915e:	f001 fdc4 	bl	800acea <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 fc90 	bl	800aa88 <USBH_LL_GetSpeed>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2205      	movs	r2, #5
 8009176:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009178:	2100      	movs	r1, #0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fa9b 	bl	800a6b6 <USBH_AllocPipe>
 8009180:	4603      	mov	r3, r0
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009188:	2180      	movs	r1, #128	@ 0x80
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f001 fa93 	bl	800a6b6 <USBH_AllocPipe>
 8009190:	4603      	mov	r3, r0
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	7919      	ldrb	r1, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80091ac:	9202      	str	r2, [sp, #8]
 80091ae:	2200      	movs	r2, #0
 80091b0:	9201      	str	r2, [sp, #4]
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	4603      	mov	r3, r0
 80091b6:	2280      	movs	r2, #128	@ 0x80
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 fa4d 	bl	800a658 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	7959      	ldrb	r1, [r3, #5]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091d2:	9202      	str	r2, [sp, #8]
 80091d4:	2200      	movs	r2, #0
 80091d6:	9201      	str	r2, [sp, #4]
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	4603      	mov	r3, r0
 80091dc:	2200      	movs	r2, #0
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 fa3a 	bl	800a658 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091e4:	e113      	b.n	800940e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f916 	bl	8009418 <USBH_HandleEnum>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 80fd 	bne.w	80093f4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009208:	2b01      	cmp	r3, #1
 800920a:	d103      	bne.n	8009214 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2208      	movs	r2, #8
 8009210:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009212:	e0ef      	b.n	80093f4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2207      	movs	r2, #7
 8009218:	701a      	strb	r2, [r3, #0]
      break;
 800921a:	e0eb      	b.n	80093f4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80e8 	beq.w	80093f8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800922e:	2101      	movs	r1, #1
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2208      	movs	r2, #8
 8009238:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800923a:	e0dd      	b.n	80093f8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fc3a 	bl	8009abe <USBH_SetCfg>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	f040 80d5 	bne.w	80093fc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2209      	movs	r2, #9
 8009256:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009258:	e0d0      	b.n	80093fc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b00      	cmp	r3, #0
 8009266:	d016      	beq.n	8009296 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009268:	2101      	movs	r1, #1
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fc4a 	bl	8009b04 <USBH_SetFeature>
 8009270:	4603      	mov	r3, r0
 8009272:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d103      	bne.n	8009284 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	220a      	movs	r2, #10
 8009280:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009282:	e0bd      	b.n	8009400 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b03      	cmp	r3, #3
 800928a:	f040 80b9 	bne.w	8009400 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	220a      	movs	r2, #10
 8009292:	701a      	strb	r2, [r3, #0]
      break;
 8009294:	e0b4      	b.n	8009400 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	220a      	movs	r2, #10
 800929a:	701a      	strb	r2, [r3, #0]
      break;
 800929c:	e0b0      	b.n	8009400 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80ad 	beq.w	8009404 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
 80092b6:	e016      	b.n	80092e6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80092b8:	7bfa      	ldrb	r2, [r7, #15]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	32de      	adds	r2, #222	@ 0xde
 80092be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c2:	791a      	ldrb	r2, [r3, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d108      	bne.n	80092e0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80092ce:	7bfa      	ldrb	r2, [r7, #15]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	32de      	adds	r2, #222	@ 0xde
 80092d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80092de:	e005      	b.n	80092ec <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	3301      	adds	r3, #1
 80092e4:	73fb      	strb	r3, [r7, #15]
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0e5      	beq.n	80092b8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d016      	beq.n	8009324 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d109      	bne.n	800931c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2206      	movs	r2, #6
 800930c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009314:	2103      	movs	r1, #3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800931a:	e073      	b.n	8009404 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	220d      	movs	r2, #13
 8009320:	701a      	strb	r2, [r3, #0]
      break;
 8009322:	e06f      	b.n	8009404 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	220d      	movs	r2, #13
 8009328:	701a      	strb	r2, [r3, #0]
      break;
 800932a:	e06b      	b.n	8009404 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d017      	beq.n	8009366 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
 8009342:	4603      	mov	r3, r0
 8009344:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d103      	bne.n	8009356 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	220b      	movs	r2, #11
 8009352:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009354:	e058      	b.n	8009408 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b02      	cmp	r3, #2
 800935c:	d154      	bne.n	8009408 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	220d      	movs	r2, #13
 8009362:	701a      	strb	r2, [r3, #0]
      break;
 8009364:	e050      	b.n	8009408 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	220d      	movs	r2, #13
 800936a:	701a      	strb	r2, [r3, #0]
      break;
 800936c:	e04c      	b.n	8009408 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d049      	beq.n	800940c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	4798      	blx	r3
      }
      break;
 8009384:	e042      	b.n	800940c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff fd4a 	bl	8008e28 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d005      	beq.n	80093c8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093c2:	2105      	movs	r1, #5
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d107      	bne.n	80093e4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff fe22 	bl	8009026 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093e2:	e014      	b.n	800940e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 fb19 	bl	800aa1c <USBH_LL_Start>
      break;
 80093ea:	e010      	b.n	800940e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80093ec:	bf00      	nop
 80093ee:	e00e      	b.n	800940e <USBH_Process+0x3c6>
      break;
 80093f0:	bf00      	nop
 80093f2:	e00c      	b.n	800940e <USBH_Process+0x3c6>
      break;
 80093f4:	bf00      	nop
 80093f6:	e00a      	b.n	800940e <USBH_Process+0x3c6>
    break;
 80093f8:	bf00      	nop
 80093fa:	e008      	b.n	800940e <USBH_Process+0x3c6>
      break;
 80093fc:	bf00      	nop
 80093fe:	e006      	b.n	800940e <USBH_Process+0x3c6>
      break;
 8009400:	bf00      	nop
 8009402:	e004      	b.n	800940e <USBH_Process+0x3c6>
      break;
 8009404:	bf00      	nop
 8009406:	e002      	b.n	800940e <USBH_Process+0x3c6>
      break;
 8009408:	bf00      	nop
 800940a:	e000      	b.n	800940e <USBH_Process+0x3c6>
      break;
 800940c:	bf00      	nop
  }
  return USBH_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af04      	add	r7, sp, #16
 800941e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009420:	2301      	movs	r3, #1
 8009422:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009424:	2301      	movs	r3, #1
 8009426:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	2b07      	cmp	r3, #7
 800942e:	f200 81bd 	bhi.w	80097ac <USBH_HandleEnum+0x394>
 8009432:	a201      	add	r2, pc, #4	@ (adr r2, 8009438 <USBH_HandleEnum+0x20>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	08009459 	.word	0x08009459
 800943c:	08009513 	.word	0x08009513
 8009440:	0800957d 	.word	0x0800957d
 8009444:	08009607 	.word	0x08009607
 8009448:	08009671 	.word	0x08009671
 800944c:	080096e1 	.word	0x080096e1
 8009450:	08009727 	.word	0x08009727
 8009454:	0800976d 	.word	0x0800976d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009458:	2108      	movs	r1, #8
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fa4c 	bl	80098f8 <USBH_Get_DevDesc>
 8009460:	4603      	mov	r3, r0
 8009462:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d12e      	bne.n	80094c8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	7919      	ldrb	r1, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800948e:	9202      	str	r2, [sp, #8]
 8009490:	2200      	movs	r2, #0
 8009492:	9201      	str	r2, [sp, #4]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	4603      	mov	r3, r0
 8009498:	2280      	movs	r2, #128	@ 0x80
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 f8dc 	bl	800a658 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	7959      	ldrb	r1, [r3, #5]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094b4:	9202      	str	r2, [sp, #8]
 80094b6:	2200      	movs	r2, #0
 80094b8:	9201      	str	r2, [sp, #4]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	4603      	mov	r3, r0
 80094be:	2200      	movs	r2, #0
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 f8c9 	bl	800a658 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80094c6:	e173      	b.n	80097b0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	f040 8170 	bne.w	80097b0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094d6:	3301      	adds	r3, #1
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d903      	bls.n	80094f2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	220d      	movs	r2, #13
 80094ee:	701a      	strb	r2, [r3, #0]
      break;
 80094f0:	e15e      	b.n	80097b0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	795b      	ldrb	r3, [r3, #5]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f8fd 	bl	800a6f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	791b      	ldrb	r3, [r3, #4]
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 f8f7 	bl	800a6f8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	701a      	strb	r2, [r3, #0]
      break;
 8009510:	e14e      	b.n	80097b0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009512:	2112      	movs	r1, #18
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f9ef 	bl	80098f8 <USBH_Get_DevDesc>
 800951a:	4603      	mov	r3, r0
 800951c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d103      	bne.n	800952c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800952a:	e143      	b.n	80097b4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	2b03      	cmp	r3, #3
 8009530:	f040 8140 	bne.w	80097b4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800953a:	3301      	adds	r3, #1
 800953c:	b2da      	uxtb	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800954a:	2b03      	cmp	r3, #3
 800954c:	d903      	bls.n	8009556 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	220d      	movs	r2, #13
 8009552:	701a      	strb	r2, [r3, #0]
      break;
 8009554:	e12e      	b.n	80097b4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	795b      	ldrb	r3, [r3, #5]
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 f8cb 	bl	800a6f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	791b      	ldrb	r3, [r3, #4]
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 f8c5 	bl	800a6f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
      break;
 800957a:	e11b      	b.n	80097b4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800957c:	2101      	movs	r1, #1
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fa79 	bl	8009a76 <USBH_SetAddress>
 8009584:	4603      	mov	r3, r0
 8009586:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d130      	bne.n	80095f0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800958e:	2002      	movs	r0, #2
 8009590:	f001 fbab 	bl	800acea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2203      	movs	r2, #3
 80095a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	7919      	ldrb	r1, [r3, #4]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095b6:	9202      	str	r2, [sp, #8]
 80095b8:	2200      	movs	r2, #0
 80095ba:	9201      	str	r2, [sp, #4]
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	4603      	mov	r3, r0
 80095c0:	2280      	movs	r2, #128	@ 0x80
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 f848 	bl	800a658 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	7959      	ldrb	r1, [r3, #5]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095dc:	9202      	str	r2, [sp, #8]
 80095de:	2200      	movs	r2, #0
 80095e0:	9201      	str	r2, [sp, #4]
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	4603      	mov	r3, r0
 80095e6:	2200      	movs	r2, #0
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f835 	bl	800a658 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095ee:	e0e3      	b.n	80097b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	f040 80e0 	bne.w	80097b8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	220d      	movs	r2, #13
 80095fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	705a      	strb	r2, [r3, #1]
      break;
 8009604:	e0d8      	b.n	80097b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009606:	2109      	movs	r1, #9
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f9a1 	bl	8009950 <USBH_Get_CfgDesc>
 800960e:	4603      	mov	r3, r0
 8009610:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2204      	movs	r2, #4
 800961c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800961e:	e0cd      	b.n	80097bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2b03      	cmp	r3, #3
 8009624:	f040 80ca 	bne.w	80097bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800962e:	3301      	adds	r3, #1
 8009630:	b2da      	uxtb	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800963e:	2b03      	cmp	r3, #3
 8009640:	d903      	bls.n	800964a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	220d      	movs	r2, #13
 8009646:	701a      	strb	r2, [r3, #0]
      break;
 8009648:	e0b8      	b.n	80097bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	795b      	ldrb	r3, [r3, #5]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 f851 	bl	800a6f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	791b      	ldrb	r3, [r3, #4]
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 f84b 	bl	800a6f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	701a      	strb	r2, [r3, #0]
      break;
 800966e:	e0a5      	b.n	80097bc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f969 	bl	8009950 <USBH_Get_CfgDesc>
 800967e:	4603      	mov	r3, r0
 8009680:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d103      	bne.n	8009690 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2205      	movs	r2, #5
 800968c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800968e:	e097      	b.n	80097c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	2b03      	cmp	r3, #3
 8009694:	f040 8094 	bne.w	80097c0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800969e:	3301      	adds	r3, #1
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d903      	bls.n	80096ba <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	220d      	movs	r2, #13
 80096b6:	701a      	strb	r2, [r3, #0]
      break;
 80096b8:	e082      	b.n	80097c0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	795b      	ldrb	r3, [r3, #5]
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f819 	bl	800a6f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	791b      	ldrb	r3, [r3, #4]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f813 	bl	800a6f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]
      break;
 80096de:	e06f      	b.n	80097c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d019      	beq.n	800971e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096f6:	23ff      	movs	r3, #255	@ 0xff
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f953 	bl	80099a4 <USBH_Get_StringDesc>
 80096fe:	4603      	mov	r3, r0
 8009700:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2206      	movs	r2, #6
 800970c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800970e:	e059      	b.n	80097c4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	2b03      	cmp	r3, #3
 8009714:	d156      	bne.n	80097c4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2206      	movs	r2, #6
 800971a:	705a      	strb	r2, [r3, #1]
      break;
 800971c:	e052      	b.n	80097c4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2206      	movs	r2, #6
 8009722:	705a      	strb	r2, [r3, #1]
      break;
 8009724:	e04e      	b.n	80097c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800972c:	2b00      	cmp	r3, #0
 800972e:	d019      	beq.n	8009764 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800973c:	23ff      	movs	r3, #255	@ 0xff
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f930 	bl	80099a4 <USBH_Get_StringDesc>
 8009744:	4603      	mov	r3, r0
 8009746:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d103      	bne.n	8009756 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2207      	movs	r2, #7
 8009752:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009754:	e038      	b.n	80097c8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d135      	bne.n	80097c8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2207      	movs	r2, #7
 8009760:	705a      	strb	r2, [r3, #1]
      break;
 8009762:	e031      	b.n	80097c8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2207      	movs	r2, #7
 8009768:	705a      	strb	r2, [r3, #1]
      break;
 800976a:	e02d      	b.n	80097c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009772:	2b00      	cmp	r3, #0
 8009774:	d017      	beq.n	80097a6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009782:	23ff      	movs	r3, #255	@ 0xff
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f90d 	bl	80099a4 <USBH_Get_StringDesc>
 800978a:	4603      	mov	r3, r0
 800978c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009798:	e018      	b.n	80097cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d115      	bne.n	80097cc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
      break;
 80097a4:	e012      	b.n	80097cc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]
      break;
 80097aa:	e00f      	b.n	80097cc <USBH_HandleEnum+0x3b4>

    default:
      break;
 80097ac:	bf00      	nop
 80097ae:	e00e      	b.n	80097ce <USBH_HandleEnum+0x3b6>
      break;
 80097b0:	bf00      	nop
 80097b2:	e00c      	b.n	80097ce <USBH_HandleEnum+0x3b6>
      break;
 80097b4:	bf00      	nop
 80097b6:	e00a      	b.n	80097ce <USBH_HandleEnum+0x3b6>
      break;
 80097b8:	bf00      	nop
 80097ba:	e008      	b.n	80097ce <USBH_HandleEnum+0x3b6>
      break;
 80097bc:	bf00      	nop
 80097be:	e006      	b.n	80097ce <USBH_HandleEnum+0x3b6>
      break;
 80097c0:	bf00      	nop
 80097c2:	e004      	b.n	80097ce <USBH_HandleEnum+0x3b6>
      break;
 80097c4:	bf00      	nop
 80097c6:	e002      	b.n	80097ce <USBH_HandleEnum+0x3b6>
      break;
 80097c8:	bf00      	nop
 80097ca:	e000      	b.n	80097ce <USBH_HandleEnum+0x3b6>
      break;
 80097cc:	bf00      	nop
  }
  return Status;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f804 	bl	800981a <USBH_HandleSof>
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b0b      	cmp	r3, #11
 800982a:	d10a      	bne.n	8009842 <USBH_HandleSof+0x28>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	4798      	blx	r3
  }
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800985a:	bf00      	nop
}
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009876:	bf00      	nop
}
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 f8be 	bl	800aa52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	791b      	ldrb	r3, [r3, #4]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 ff0b 	bl	800a6f8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	795b      	ldrb	r3, [r3, #5]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 ff05 	bl	800a6f8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009904:	887b      	ldrh	r3, [r7, #2]
 8009906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800990a:	d901      	bls.n	8009910 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800990c:	2303      	movs	r3, #3
 800990e:	e01b      	b.n	8009948 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009916:	887b      	ldrh	r3, [r7, #2]
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	4613      	mov	r3, r2
 800991c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009920:	2100      	movs	r1, #0
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f872 	bl	8009a0c <USBH_GetDescriptor>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d109      	bne.n	8009946 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009938:	887a      	ldrh	r2, [r7, #2]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f929 	bl	8009b94 <USBH_ParseDevDesc>
 8009942:	4603      	mov	r3, r0
 8009944:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009946:	7bfb      	ldrb	r3, [r7, #15]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af02      	add	r7, sp, #8
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	331c      	adds	r3, #28
 8009960:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009962:	887b      	ldrh	r3, [r7, #2]
 8009964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009968:	d901      	bls.n	800996e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800996a:	2303      	movs	r3, #3
 800996c:	e016      	b.n	800999c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800996e:	887b      	ldrh	r3, [r7, #2]
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009978:	2100      	movs	r1, #0
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f846 	bl	8009a0c <USBH_GetDescriptor>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d107      	bne.n	800999a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800998a:	887b      	ldrh	r3, [r7, #2]
 800998c:	461a      	mov	r2, r3
 800998e:	68b9      	ldr	r1, [r7, #8]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f9af 	bl	8009cf4 <USBH_ParseCfgDesc>
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800999a:	7bfb      	ldrb	r3, [r7, #15]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	607a      	str	r2, [r7, #4]
 80099ae:	461a      	mov	r2, r3
 80099b0:	460b      	mov	r3, r1
 80099b2:	72fb      	strb	r3, [r7, #11]
 80099b4:	4613      	mov	r3, r2
 80099b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80099b8:	893b      	ldrh	r3, [r7, #8]
 80099ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099be:	d802      	bhi.n	80099c6 <USBH_Get_StringDesc+0x22>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80099c6:	2303      	movs	r3, #3
 80099c8:	e01c      	b.n	8009a04 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80099d2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80099da:	893b      	ldrh	r3, [r7, #8]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	460b      	mov	r3, r1
 80099e0:	2100      	movs	r1, #0
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 f812 	bl	8009a0c <USBH_GetDescriptor>
 80099e8:	4603      	mov	r3, r0
 80099ea:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d107      	bne.n	8009a02 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80099f8:	893a      	ldrh	r2, [r7, #8]
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fb8d 	bl	800a11c <USBH_ParseStringDesc>
  }

  return status;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	607b      	str	r3, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	72fb      	strb	r3, [r7, #11]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	789b      	ldrb	r3, [r3, #2]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d11c      	bne.n	8009a60 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009a26:	7afb      	ldrb	r3, [r7, #11]
 8009a28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2206      	movs	r2, #6
 8009a36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	893a      	ldrh	r2, [r7, #8]
 8009a3c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009a3e:	893b      	ldrh	r3, [r7, #8]
 8009a40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a48:	d104      	bne.n	8009a54 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009a50:	829a      	strh	r2, [r3, #20]
 8009a52:	e002      	b.n	8009a5a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8b3a      	ldrh	r2, [r7, #24]
 8009a5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009a60:	8b3b      	ldrh	r3, [r7, #24]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fba5 	bl	800a1b6 <USBH_CtlReq>
 8009a6c:	4603      	mov	r3, r0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	789b      	ldrb	r3, [r3, #2]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d10f      	bne.n	8009aaa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2205      	movs	r2, #5
 8009a94:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a96:	78fb      	ldrb	r3, [r7, #3]
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2100      	movs	r1, #0
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fb81 	bl	800a1b6 <USBH_CtlReq>
 8009ab4:	4603      	mov	r3, r0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	789b      	ldrb	r3, [r3, #2]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d10e      	bne.n	8009af0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2209      	movs	r2, #9
 8009adc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	887a      	ldrh	r2, [r7, #2]
 8009ae2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009af0:	2200      	movs	r2, #0
 8009af2:	2100      	movs	r1, #0
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fb5e 	bl	800a1b6 <USBH_CtlReq>
 8009afa:	4603      	mov	r3, r0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	789b      	ldrb	r3, [r3, #2]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d10f      	bne.n	8009b38 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2203      	movs	r2, #3
 8009b22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fb3a 	bl	800a1b6 <USBH_CtlReq>
 8009b42:	4603      	mov	r3, r0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	789b      	ldrb	r3, [r3, #2]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10f      	bne.n	8009b80 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2202      	movs	r2, #2
 8009b64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b80:	2200      	movs	r2, #0
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fb16 	bl	800a1b6 <USBH_CtlReq>
 8009b8a:	4603      	mov	r3, r0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009ba8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e094      	b.n	8009ce2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	781a      	ldrb	r2, [r3, #0]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	785a      	ldrb	r2, [r3, #1]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	3302      	adds	r3, #2
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	3303      	adds	r3, #3
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	791a      	ldrb	r2, [r3, #4]
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	795a      	ldrb	r2, [r3, #5]
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	799a      	ldrb	r2, [r3, #6]
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	79da      	ldrb	r2, [r3, #7]
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d004      	beq.n	8009c16 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d11b      	bne.n	8009c4e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	79db      	ldrb	r3, [r3, #7]
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	dc0f      	bgt.n	8009c3e <USBH_ParseDevDesc+0xaa>
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	db0f      	blt.n	8009c42 <USBH_ParseDevDesc+0xae>
 8009c22:	3b08      	subs	r3, #8
 8009c24:	4a32      	ldr	r2, [pc, #200]	@ (8009cf0 <USBH_ParseDevDesc+0x15c>)
 8009c26:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bf14      	ite	ne
 8009c32:	2301      	movne	r3, #1
 8009c34:	2300      	moveq	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d106      	bne.n	8009c4a <USBH_ParseDevDesc+0xb6>
 8009c3c:	e001      	b.n	8009c42 <USBH_ParseDevDesc+0xae>
 8009c3e:	2b40      	cmp	r3, #64	@ 0x40
 8009c40:	d003      	beq.n	8009c4a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	2208      	movs	r2, #8
 8009c46:	71da      	strb	r2, [r3, #7]
        break;
 8009c48:	e000      	b.n	8009c4c <USBH_ParseDevDesc+0xb8>
        break;
 8009c4a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009c4c:	e00e      	b.n	8009c6c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d107      	bne.n	8009c68 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	79db      	ldrb	r3, [r3, #7]
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d005      	beq.n	8009c6c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2208      	movs	r2, #8
 8009c64:	71da      	strb	r2, [r3, #7]
 8009c66:	e001      	b.n	8009c6c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009c6c:	88fb      	ldrh	r3, [r7, #6]
 8009c6e:	2b08      	cmp	r3, #8
 8009c70:	d936      	bls.n	8009ce0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	3308      	adds	r3, #8
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	3309      	adds	r3, #9
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	4313      	orrs	r3, r2
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	330a      	adds	r3, #10
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	330b      	adds	r3, #11
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	330c      	adds	r3, #12
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	461a      	mov	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	330d      	adds	r3, #13
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	021b      	lsls	r3, r3, #8
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	7b9a      	ldrb	r2, [r3, #14]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	7bda      	ldrb	r2, [r3, #15]
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	7c1a      	ldrb	r2, [r3, #16]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	7c5a      	ldrb	r2, [r3, #17]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	01000101 	.word	0x01000101

08009cf4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08c      	sub	sp, #48	@ 0x30
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d08:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009d22:	2302      	movs	r3, #2
 8009d24:	e0da      	b.n	8009edc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b09      	cmp	r3, #9
 8009d30:	d002      	beq.n	8009d38 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d34:	2209      	movs	r2, #9
 8009d36:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	785a      	ldrb	r2, [r3, #1]
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	3302      	adds	r3, #2
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	3303      	adds	r3, #3
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	021b      	lsls	r3, r3, #8
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d62:	bf28      	it	cs
 8009d64:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	791a      	ldrb	r2, [r3, #4]
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	795a      	ldrb	r2, [r3, #5]
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	799a      	ldrb	r2, [r3, #6]
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	79da      	ldrb	r2, [r3, #7]
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	7a1a      	ldrb	r2, [r3, #8]
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	2b09      	cmp	r3, #9
 8009d9a:	f240 809d 	bls.w	8009ed8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009d9e:	2309      	movs	r3, #9
 8009da0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009da6:	e081      	b.n	8009eac <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009da8:	f107 0316 	add.w	r3, r7, #22
 8009dac:	4619      	mov	r1, r3
 8009dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009db0:	f000 f9e7 	bl	800a182 <USBH_GetNextDesc>
 8009db4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d176      	bne.n	8009eac <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b09      	cmp	r3, #9
 8009dc4:	d002      	beq.n	8009dcc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc8:	2209      	movs	r2, #9
 8009dca:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dd0:	221a      	movs	r2, #26
 8009dd2:	fb02 f303 	mul.w	r3, r2, r3
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	6a3a      	ldr	r2, [r7, #32]
 8009dda:	4413      	add	r3, r2
 8009ddc:	3302      	adds	r3, #2
 8009dde:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009de2:	69f8      	ldr	r0, [r7, #28]
 8009de4:	f000 f87e 	bl	8009ee4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009df2:	e043      	b.n	8009e7c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009df4:	f107 0316 	add.w	r3, r7, #22
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dfc:	f000 f9c1 	bl	800a182 <USBH_GetNextDesc>
 8009e00:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b05      	cmp	r3, #5
 8009e08:	d138      	bne.n	8009e7c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	795b      	ldrb	r3, [r3, #5]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d113      	bne.n	8009e3a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d003      	beq.n	8009e22 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	799b      	ldrb	r3, [r3, #6]
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d10b      	bne.n	8009e3a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	79db      	ldrb	r3, [r3, #7]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10b      	bne.n	8009e42 <USBH_ParseCfgDesc+0x14e>
 8009e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b09      	cmp	r3, #9
 8009e30:	d007      	beq.n	8009e42 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e34:	2209      	movs	r2, #9
 8009e36:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e38:	e003      	b.n	8009e42 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3c:	2207      	movs	r2, #7
 8009e3e:	701a      	strb	r2, [r3, #0]
 8009e40:	e000      	b.n	8009e44 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e42:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e4c:	3201      	adds	r2, #1
 8009e4e:	00d2      	lsls	r2, r2, #3
 8009e50:	211a      	movs	r1, #26
 8009e52:	fb01 f303 	mul.w	r3, r1, r3
 8009e56:	4413      	add	r3, r2
 8009e58:	3308      	adds	r3, #8
 8009e5a:	6a3a      	ldr	r2, [r7, #32]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3304      	adds	r3, #4
 8009e60:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e64:	69b9      	ldr	r1, [r7, #24]
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 f870 	bl	8009f4c <USBH_ParseEPDesc>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009e72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e76:	3301      	adds	r3, #1
 8009e78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	791b      	ldrb	r3, [r3, #4]
 8009e80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d204      	bcs.n	8009e92 <USBH_ParseCfgDesc+0x19e>
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	885a      	ldrh	r2, [r3, #2]
 8009e8c:	8afb      	ldrh	r3, [r7, #22]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d8b0      	bhi.n	8009df4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	791b      	ldrb	r3, [r3, #4]
 8009e96:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d201      	bcs.n	8009ea2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e01c      	b.n	8009edc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d805      	bhi.n	8009ec0 <USBH_ParseCfgDesc+0x1cc>
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	885a      	ldrh	r2, [r3, #2]
 8009eb8:	8afb      	ldrh	r3, [r7, #22]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	f63f af74 	bhi.w	8009da8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	791b      	ldrb	r3, [r3, #4]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	bf28      	it	cs
 8009ec8:	2302      	movcs	r3, #2
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d201      	bcs.n	8009ed8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e001      	b.n	8009edc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3730      	adds	r7, #48	@ 0x30
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	785a      	ldrb	r2, [r3, #1]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	789a      	ldrb	r2, [r3, #2]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	78da      	ldrb	r2, [r3, #3]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	3304      	adds	r3, #4
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	bf28      	it	cs
 8009f18:	2302      	movcs	r3, #2
 8009f1a:	b2da      	uxtb	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	795a      	ldrb	r2, [r3, #5]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	799a      	ldrb	r2, [r3, #6]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	79da      	ldrb	r2, [r3, #7]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	7a1a      	ldrb	r2, [r3, #8]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	721a      	strb	r2, [r3, #8]
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	781a      	ldrb	r2, [r3, #0]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	785a      	ldrb	r2, [r3, #1]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	789a      	ldrb	r2, [r3, #2]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	78da      	ldrb	r2, [r3, #3]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3305      	adds	r3, #5
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	021b      	lsls	r3, r3, #8
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	799a      	ldrb	r2, [r3, #6]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	889b      	ldrh	r3, [r3, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d009      	beq.n	8009fba <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fae:	d804      	bhi.n	8009fba <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fb8:	d901      	bls.n	8009fbe <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d136      	bne.n	800a036 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	78db      	ldrb	r3, [r3, #3]
 8009fcc:	f003 0303 	and.w	r3, r3, #3
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d108      	bne.n	8009fe6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	889b      	ldrh	r3, [r3, #4]
 8009fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fdc:	f240 8097 	bls.w	800a10e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	75fb      	strb	r3, [r7, #23]
 8009fe4:	e093      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	78db      	ldrb	r3, [r3, #3]
 8009fea:	f003 0303 	and.w	r3, r3, #3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d107      	bne.n	800a002 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	889b      	ldrh	r3, [r3, #4]
 8009ff6:	2b40      	cmp	r3, #64	@ 0x40
 8009ff8:	f240 8089 	bls.w	800a10e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	75fb      	strb	r3, [r7, #23]
 800a000:	e085      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	78db      	ldrb	r3, [r3, #3]
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d005      	beq.n	800a01a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	78db      	ldrb	r3, [r3, #3]
 800a012:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a016:	2b03      	cmp	r3, #3
 800a018:	d10a      	bne.n	800a030 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	799b      	ldrb	r3, [r3, #6]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <USBH_ParseEPDesc+0xde>
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	799b      	ldrb	r3, [r3, #6]
 800a026:	2b10      	cmp	r3, #16
 800a028:	d970      	bls.n	800a10c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a02a:	2303      	movs	r3, #3
 800a02c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a02e:	e06d      	b.n	800a10c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a030:	2303      	movs	r3, #3
 800a032:	75fb      	strb	r3, [r7, #23]
 800a034:	e06b      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d13c      	bne.n	800a0ba <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	78db      	ldrb	r3, [r3, #3]
 800a044:	f003 0303 	and.w	r3, r3, #3
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d005      	beq.n	800a058 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	78db      	ldrb	r3, [r3, #3]
 800a050:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a054:	2b00      	cmp	r3, #0
 800a056:	d106      	bne.n	800a066 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	889b      	ldrh	r3, [r3, #4]
 800a05c:	2b40      	cmp	r3, #64	@ 0x40
 800a05e:	d956      	bls.n	800a10e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a060:	2303      	movs	r3, #3
 800a062:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a064:	e053      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	78db      	ldrb	r3, [r3, #3]
 800a06a:	f003 0303 	and.w	r3, r3, #3
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d10e      	bne.n	800a090 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	799b      	ldrb	r3, [r3, #6]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d007      	beq.n	800a08a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a07e:	2b10      	cmp	r3, #16
 800a080:	d803      	bhi.n	800a08a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a086:	2b40      	cmp	r3, #64	@ 0x40
 800a088:	d941      	bls.n	800a10e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a08a:	2303      	movs	r3, #3
 800a08c:	75fb      	strb	r3, [r7, #23]
 800a08e:	e03e      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	78db      	ldrb	r3, [r3, #3]
 800a094:	f003 0303 	and.w	r3, r3, #3
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d10b      	bne.n	800a0b4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	799b      	ldrb	r3, [r3, #6]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <USBH_ParseEPDesc+0x162>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	889b      	ldrh	r3, [r3, #4]
 800a0a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0ac:	d32f      	bcc.n	800a10e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	75fb      	strb	r3, [r7, #23]
 800a0b2:	e02c      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	75fb      	strb	r3, [r7, #23]
 800a0b8:	e029      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d120      	bne.n	800a106 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	78db      	ldrb	r3, [r3, #3]
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d106      	bne.n	800a0de <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	889b      	ldrh	r3, [r3, #4]
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d01a      	beq.n	800a10e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	75fb      	strb	r3, [r7, #23]
 800a0dc:	e017      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	78db      	ldrb	r3, [r3, #3]
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d10a      	bne.n	800a100 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	799b      	ldrb	r3, [r3, #6]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <USBH_ParseEPDesc+0x1ae>
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	889b      	ldrh	r3, [r3, #4]
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	d909      	bls.n	800a10e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	75fb      	strb	r3, [r7, #23]
 800a0fe:	e006      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a100:	2303      	movs	r3, #3
 800a102:	75fb      	strb	r3, [r7, #23]
 800a104:	e003      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a106:	2303      	movs	r3, #3
 800a108:	75fb      	strb	r3, [r7, #23]
 800a10a:	e000      	b.n	800a10e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a10c:	bf00      	nop
  }

  return status;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a110:	4618      	mov	r0, r3
 800a112:	371c      	adds	r7, #28
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	4613      	mov	r3, r2
 800a128:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b03      	cmp	r3, #3
 800a132:	d120      	bne.n	800a176 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	1e9a      	subs	r2, r3, #2
 800a13a:	88fb      	ldrh	r3, [r7, #6]
 800a13c:	4293      	cmp	r3, r2
 800a13e:	bf28      	it	cs
 800a140:	4613      	movcs	r3, r2
 800a142:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3302      	adds	r3, #2
 800a148:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a14a:	2300      	movs	r3, #0
 800a14c:	82fb      	strh	r3, [r7, #22]
 800a14e:	e00b      	b.n	800a168 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a150:	8afb      	ldrh	r3, [r7, #22]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4413      	add	r3, r2
 800a156:	781a      	ldrb	r2, [r3, #0]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	3301      	adds	r3, #1
 800a160:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a162:	8afb      	ldrh	r3, [r7, #22]
 800a164:	3302      	adds	r3, #2
 800a166:	82fb      	strh	r3, [r7, #22]
 800a168:	8afa      	ldrh	r2, [r7, #22]
 800a16a:	8abb      	ldrh	r3, [r7, #20]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d3ef      	bcc.n	800a150 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]
  }
}
 800a176:	bf00      	nop
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a182:	b480      	push	{r7}
 800a184:	b085      	sub	sp, #20
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	7812      	ldrb	r2, [r2, #0]
 800a194:	4413      	add	r3, r2
 800a196:	b29a      	uxth	r2, r3
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b086      	sub	sp, #24
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	60f8      	str	r0, [r7, #12]
 800a1be:	60b9      	str	r1, [r7, #8]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	789b      	ldrb	r3, [r3, #2]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d002      	beq.n	800a1d6 <USBH_CtlReq+0x20>
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d00f      	beq.n	800a1f4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a1d4:	e027      	b.n	800a226 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	88fa      	ldrh	r2, [r7, #6]
 800a1e0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f2:	e018      	b.n	800a226 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f000 f81b 	bl	800a230 <USBH_HandleControl>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <USBH_CtlReq+0x54>
 800a204:	7dfb      	ldrb	r3, [r7, #23]
 800a206:	2b03      	cmp	r3, #3
 800a208:	d106      	bne.n	800a218 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2201      	movs	r2, #1
 800a20e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	761a      	strb	r2, [r3, #24]
      break;
 800a216:	e005      	b.n	800a224 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d102      	bne.n	800a224 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	709a      	strb	r2, [r3, #2]
      break;
 800a224:	bf00      	nop
  }
  return status;
 800a226:	7dfb      	ldrb	r3, [r7, #23]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af02      	add	r7, sp, #8
 800a236:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a238:	2301      	movs	r3, #1
 800a23a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	7e1b      	ldrb	r3, [r3, #24]
 800a244:	3b01      	subs	r3, #1
 800a246:	2b0a      	cmp	r3, #10
 800a248:	f200 8156 	bhi.w	800a4f8 <USBH_HandleControl+0x2c8>
 800a24c:	a201      	add	r2, pc, #4	@ (adr r2, 800a254 <USBH_HandleControl+0x24>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a281 	.word	0x0800a281
 800a258:	0800a29b 	.word	0x0800a29b
 800a25c:	0800a305 	.word	0x0800a305
 800a260:	0800a32b 	.word	0x0800a32b
 800a264:	0800a363 	.word	0x0800a363
 800a268:	0800a38d 	.word	0x0800a38d
 800a26c:	0800a3df 	.word	0x0800a3df
 800a270:	0800a401 	.word	0x0800a401
 800a274:	0800a43d 	.word	0x0800a43d
 800a278:	0800a463 	.word	0x0800a463
 800a27c:	0800a4a1 	.word	0x0800a4a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f103 0110 	add.w	r1, r3, #16
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	795b      	ldrb	r3, [r3, #5]
 800a28a:	461a      	mov	r2, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f943 	bl	800a518 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2202      	movs	r2, #2
 800a296:	761a      	strb	r2, [r3, #24]
      break;
 800a298:	e139      	b.n	800a50e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	795b      	ldrb	r3, [r3, #5]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fcc5 	bl	800ac30 <USBH_LL_GetURBState>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d11e      	bne.n	800a2ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	7c1b      	ldrb	r3, [r3, #16]
 800a2b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	8adb      	ldrh	r3, [r3, #22]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a2c2:	7b7b      	ldrb	r3, [r7, #13]
 800a2c4:	2b80      	cmp	r3, #128	@ 0x80
 800a2c6:	d103      	bne.n	800a2d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2203      	movs	r2, #3
 800a2cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2ce:	e115      	b.n	800a4fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2205      	movs	r2, #5
 800a2d4:	761a      	strb	r2, [r3, #24]
      break;
 800a2d6:	e111      	b.n	800a4fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a2d8:	7b7b      	ldrb	r3, [r7, #13]
 800a2da:	2b80      	cmp	r3, #128	@ 0x80
 800a2dc:	d103      	bne.n	800a2e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2209      	movs	r2, #9
 800a2e2:	761a      	strb	r2, [r3, #24]
      break;
 800a2e4:	e10a      	b.n	800a4fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2207      	movs	r2, #7
 800a2ea:	761a      	strb	r2, [r3, #24]
      break;
 800a2ec:	e106      	b.n	800a4fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d003      	beq.n	800a2fc <USBH_HandleControl+0xcc>
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	f040 8100 	bne.w	800a4fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	220b      	movs	r2, #11
 800a300:	761a      	strb	r2, [r3, #24]
      break;
 800a302:	e0fb      	b.n	800a4fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6899      	ldr	r1, [r3, #8]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	899a      	ldrh	r2, [r3, #12]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	791b      	ldrb	r3, [r3, #4]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f93a 	bl	800a596 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2204      	movs	r2, #4
 800a326:	761a      	strb	r2, [r3, #24]
      break;
 800a328:	e0f1      	b.n	800a50e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	791b      	ldrb	r3, [r3, #4]
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fc7d 	bl	800ac30 <USBH_LL_GetURBState>
 800a336:	4603      	mov	r3, r0
 800a338:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a33a:	7bbb      	ldrb	r3, [r7, #14]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d102      	bne.n	800a346 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2209      	movs	r2, #9
 800a344:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	2b05      	cmp	r3, #5
 800a34a:	d102      	bne.n	800a352 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a34c:	2303      	movs	r3, #3
 800a34e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a350:	e0d6      	b.n	800a500 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a352:	7bbb      	ldrb	r3, [r7, #14]
 800a354:	2b04      	cmp	r3, #4
 800a356:	f040 80d3 	bne.w	800a500 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	220b      	movs	r2, #11
 800a35e:	761a      	strb	r2, [r3, #24]
      break;
 800a360:	e0ce      	b.n	800a500 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6899      	ldr	r1, [r3, #8]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	899a      	ldrh	r2, [r3, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	795b      	ldrb	r3, [r3, #5]
 800a36e:	2001      	movs	r0, #1
 800a370:	9000      	str	r0, [sp, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f8ea 	bl	800a54c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2206      	movs	r2, #6
 800a388:	761a      	strb	r2, [r3, #24]
      break;
 800a38a:	e0c0      	b.n	800a50e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	795b      	ldrb	r3, [r3, #5]
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fc4c 	bl	800ac30 <USBH_LL_GetURBState>
 800a398:	4603      	mov	r3, r0
 800a39a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d103      	bne.n	800a3aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2207      	movs	r2, #7
 800a3a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3a8:	e0ac      	b.n	800a504 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a3aa:	7bbb      	ldrb	r3, [r7, #14]
 800a3ac:	2b05      	cmp	r3, #5
 800a3ae:	d105      	bne.n	800a3bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	220c      	movs	r2, #12
 800a3b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ba:	e0a3      	b.n	800a504 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d103      	bne.n	800a3ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2205      	movs	r2, #5
 800a3c6:	761a      	strb	r2, [r3, #24]
      break;
 800a3c8:	e09c      	b.n	800a504 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	f040 8099 	bne.w	800a504 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	220b      	movs	r2, #11
 800a3d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a3d8:	2302      	movs	r3, #2
 800a3da:	73fb      	strb	r3, [r7, #15]
      break;
 800a3dc:	e092      	b.n	800a504 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	791b      	ldrb	r3, [r3, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f8d5 	bl	800a596 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2208      	movs	r2, #8
 800a3fc:	761a      	strb	r2, [r3, #24]

      break;
 800a3fe:	e086      	b.n	800a50e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	791b      	ldrb	r3, [r3, #4]
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fc12 	bl	800ac30 <USBH_LL_GetURBState>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d105      	bne.n	800a422 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	220d      	movs	r2, #13
 800a41a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a420:	e072      	b.n	800a508 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a422:	7bbb      	ldrb	r3, [r7, #14]
 800a424:	2b04      	cmp	r3, #4
 800a426:	d103      	bne.n	800a430 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	220b      	movs	r2, #11
 800a42c:	761a      	strb	r2, [r3, #24]
      break;
 800a42e:	e06b      	b.n	800a508 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	2b05      	cmp	r3, #5
 800a434:	d168      	bne.n	800a508 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a436:	2303      	movs	r3, #3
 800a438:	73fb      	strb	r3, [r7, #15]
      break;
 800a43a:	e065      	b.n	800a508 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	795b      	ldrb	r3, [r3, #5]
 800a440:	2201      	movs	r2, #1
 800a442:	9200      	str	r2, [sp, #0]
 800a444:	2200      	movs	r2, #0
 800a446:	2100      	movs	r1, #0
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f87f 	bl	800a54c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a454:	b29a      	uxth	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	220a      	movs	r2, #10
 800a45e:	761a      	strb	r2, [r3, #24]
      break;
 800a460:	e055      	b.n	800a50e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	795b      	ldrb	r3, [r3, #5]
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fbe1 	bl	800ac30 <USBH_LL_GetURBState>
 800a46e:	4603      	mov	r3, r0
 800a470:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d105      	bne.n	800a484 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	220d      	movs	r2, #13
 800a480:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a482:	e043      	b.n	800a50c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	2b02      	cmp	r3, #2
 800a488:	d103      	bne.n	800a492 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2209      	movs	r2, #9
 800a48e:	761a      	strb	r2, [r3, #24]
      break;
 800a490:	e03c      	b.n	800a50c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	2b04      	cmp	r3, #4
 800a496:	d139      	bne.n	800a50c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	220b      	movs	r2, #11
 800a49c:	761a      	strb	r2, [r3, #24]
      break;
 800a49e:	e035      	b.n	800a50c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	7e5b      	ldrb	r3, [r3, #25]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	765a      	strb	r2, [r3, #25]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	7e5b      	ldrb	r3, [r3, #25]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d806      	bhi.n	800a4c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a4c0:	e025      	b.n	800a50e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4c8:	2106      	movs	r1, #6
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	795b      	ldrb	r3, [r3, #5]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f90c 	bl	800a6f8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	791b      	ldrb	r3, [r3, #4]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f906 	bl	800a6f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f6:	e00a      	b.n	800a50e <USBH_HandleControl+0x2de>

    default:
      break;
 800a4f8:	bf00      	nop
 800a4fa:	e008      	b.n	800a50e <USBH_HandleControl+0x2de>
      break;
 800a4fc:	bf00      	nop
 800a4fe:	e006      	b.n	800a50e <USBH_HandleControl+0x2de>
      break;
 800a500:	bf00      	nop
 800a502:	e004      	b.n	800a50e <USBH_HandleControl+0x2de>
      break;
 800a504:	bf00      	nop
 800a506:	e002      	b.n	800a50e <USBH_HandleControl+0x2de>
      break;
 800a508:	bf00      	nop
 800a50a:	e000      	b.n	800a50e <USBH_HandleControl+0x2de>
      break;
 800a50c:	bf00      	nop
  }

  return status;
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af04      	add	r7, sp, #16
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a526:	79f9      	ldrb	r1, [r7, #7]
 800a528:	2300      	movs	r3, #0
 800a52a:	9303      	str	r3, [sp, #12]
 800a52c:	2308      	movs	r3, #8
 800a52e:	9302      	str	r3, [sp, #8]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	2300      	movs	r3, #0
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	2300      	movs	r3, #0
 800a53a:	2200      	movs	r2, #0
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 fb46 	bl	800abce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af04      	add	r7, sp, #16
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	4611      	mov	r1, r2
 800a558:	461a      	mov	r2, r3
 800a55a:	460b      	mov	r3, r1
 800a55c:	80fb      	strh	r3, [r7, #6]
 800a55e:	4613      	mov	r3, r2
 800a560:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a570:	7979      	ldrb	r1, [r7, #5]
 800a572:	7e3b      	ldrb	r3, [r7, #24]
 800a574:	9303      	str	r3, [sp, #12]
 800a576:	88fb      	ldrh	r3, [r7, #6]
 800a578:	9302      	str	r3, [sp, #8]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	2301      	movs	r3, #1
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	2300      	movs	r3, #0
 800a584:	2200      	movs	r2, #0
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 fb21 	bl	800abce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b088      	sub	sp, #32
 800a59a:	af04      	add	r7, sp, #16
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	80fb      	strh	r3, [r7, #6]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5ac:	7979      	ldrb	r1, [r7, #5]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	9303      	str	r3, [sp, #12]
 800a5b2:	88fb      	ldrh	r3, [r7, #6]
 800a5b4:	9302      	str	r3, [sp, #8]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 fb03 	bl	800abce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a5c8:	2300      	movs	r3, #0

}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b088      	sub	sp, #32
 800a5d6:	af04      	add	r7, sp, #16
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	461a      	mov	r2, r3
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	80fb      	strh	r3, [r7, #6]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5f6:	7979      	ldrb	r1, [r7, #5]
 800a5f8:	7e3b      	ldrb	r3, [r7, #24]
 800a5fa:	9303      	str	r3, [sp, #12]
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	9302      	str	r3, [sp, #8]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	2301      	movs	r3, #1
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	2302      	movs	r3, #2
 800a60a:	2200      	movs	r2, #0
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 fade 	bl	800abce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af04      	add	r7, sp, #16
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4611      	mov	r1, r2
 800a628:	461a      	mov	r2, r3
 800a62a:	460b      	mov	r3, r1
 800a62c:	80fb      	strh	r3, [r7, #6]
 800a62e:	4613      	mov	r3, r2
 800a630:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a632:	7979      	ldrb	r1, [r7, #5]
 800a634:	2300      	movs	r3, #0
 800a636:	9303      	str	r3, [sp, #12]
 800a638:	88fb      	ldrh	r3, [r7, #6]
 800a63a:	9302      	str	r3, [sp, #8]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	2301      	movs	r3, #1
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	2302      	movs	r3, #2
 800a646:	2201      	movs	r2, #1
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fac0 	bl	800abce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af04      	add	r7, sp, #16
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	4608      	mov	r0, r1
 800a662:	4611      	mov	r1, r2
 800a664:	461a      	mov	r2, r3
 800a666:	4603      	mov	r3, r0
 800a668:	70fb      	strb	r3, [r7, #3]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70bb      	strb	r3, [r7, #2]
 800a66e:	4613      	mov	r3, r2
 800a670:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a672:	7878      	ldrb	r0, [r7, #1]
 800a674:	78ba      	ldrb	r2, [r7, #2]
 800a676:	78f9      	ldrb	r1, [r7, #3]
 800a678:	8b3b      	ldrh	r3, [r7, #24]
 800a67a:	9302      	str	r3, [sp, #8]
 800a67c:	7d3b      	ldrb	r3, [r7, #20]
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	7c3b      	ldrb	r3, [r7, #16]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4603      	mov	r3, r0
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fa53 	bl	800ab32 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a6a2:	78fb      	ldrb	r3, [r7, #3]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fa72 	bl	800ab90 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f836 	bl	800a734 <USBH_GetFreePipe>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a6cc:	89fb      	ldrh	r3, [r7, #14]
 800a6ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d00a      	beq.n	800a6ec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a6d6:	78fa      	ldrb	r2, [r7, #3]
 800a6d8:	89fb      	ldrh	r3, [r7, #14]
 800a6da:	f003 030f 	and.w	r3, r3, #15
 800a6de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	33e0      	adds	r3, #224	@ 0xe0
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	440b      	add	r3, r1
 800a6ea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a6ec:	89fb      	ldrh	r3, [r7, #14]
 800a6ee:	b2db      	uxtb	r3, r3
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	2b0f      	cmp	r3, #15
 800a708:	d80d      	bhi.n	800a726 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	33e0      	adds	r3, #224	@ 0xe0
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	78fb      	ldrb	r3, [r7, #3]
 800a718:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a71c:	6879      	ldr	r1, [r7, #4]
 800a71e:	33e0      	adds	r3, #224	@ 0xe0
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	440b      	add	r3, r1
 800a724:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]
 800a744:	e00f      	b.n	800a766 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a746:	7bfb      	ldrb	r3, [r7, #15]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	33e0      	adds	r3, #224	@ 0xe0
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	e007      	b.n	800a770 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	3301      	adds	r3, #1
 800a764:	73fb      	strb	r3, [r7, #15]
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	2b0f      	cmp	r3, #15
 800a76a:	d9ec      	bls.n	800a746 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a76c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a770:	4618      	mov	r0, r3
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a780:	2201      	movs	r2, #1
 800a782:	490e      	ldr	r1, [pc, #56]	@ (800a7bc <MX_USB_HOST_Init+0x40>)
 800a784:	480e      	ldr	r0, [pc, #56]	@ (800a7c0 <MX_USB_HOST_Init+0x44>)
 800a786:	f7fe fb15 	bl	8008db4 <USBH_Init>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a790:	f7f6 fbc6 	bl	8000f20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a794:	490b      	ldr	r1, [pc, #44]	@ (800a7c4 <MX_USB_HOST_Init+0x48>)
 800a796:	480a      	ldr	r0, [pc, #40]	@ (800a7c0 <MX_USB_HOST_Init+0x44>)
 800a798:	f7fe fbb9 	bl	8008f0e <USBH_RegisterClass>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a7a2:	f7f6 fbbd 	bl	8000f20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a7a6:	4806      	ldr	r0, [pc, #24]	@ (800a7c0 <MX_USB_HOST_Init+0x44>)
 800a7a8:	f7fe fc3d 	bl	8009026 <USBH_Start>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a7b2:	f7f6 fbb5 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a7b6:	bf00      	nop
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	0800a7dd 	.word	0x0800a7dd
 800a7c0:	200002f8 	.word	0x200002f8
 800a7c4:	2000001c 	.word	0x2000001c

0800a7c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a7cc:	4802      	ldr	r0, [pc, #8]	@ (800a7d8 <MX_USB_HOST_Process+0x10>)
 800a7ce:	f7fe fc3b 	bl	8009048 <USBH_Process>
}
 800a7d2:	bf00      	nop
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	200002f8 	.word	0x200002f8

0800a7dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d819      	bhi.n	800a824 <USBH_UserProcess+0x48>
 800a7f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f8 <USBH_UserProcess+0x1c>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	0800a815 	.word	0x0800a815
 800a800:	0800a825 	.word	0x0800a825
 800a804:	0800a81d 	.word	0x0800a81d
 800a808:	0800a80d 	.word	0x0800a80d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a80c:	4b09      	ldr	r3, [pc, #36]	@ (800a834 <USBH_UserProcess+0x58>)
 800a80e:	2203      	movs	r2, #3
 800a810:	701a      	strb	r2, [r3, #0]
  break;
 800a812:	e008      	b.n	800a826 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a814:	4b07      	ldr	r3, [pc, #28]	@ (800a834 <USBH_UserProcess+0x58>)
 800a816:	2202      	movs	r2, #2
 800a818:	701a      	strb	r2, [r3, #0]
  break;
 800a81a:	e004      	b.n	800a826 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a81c:	4b05      	ldr	r3, [pc, #20]	@ (800a834 <USBH_UserProcess+0x58>)
 800a81e:	2201      	movs	r2, #1
 800a820:	701a      	strb	r2, [r3, #0]
  break;
 800a822:	e000      	b.n	800a826 <USBH_UserProcess+0x4a>

  default:
  break;
 800a824:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	200006d0 	.word	0x200006d0

0800a838 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	@ 0x28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a840:	f107 0314 	add.w	r3, r7, #20
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	605a      	str	r2, [r3, #4]
 800a84a:	609a      	str	r2, [r3, #8]
 800a84c:	60da      	str	r2, [r3, #12]
 800a84e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a858:	d147      	bne.n	800a8ea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a85a:	2300      	movs	r3, #0
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	4b25      	ldr	r3, [pc, #148]	@ (800a8f4 <HAL_HCD_MspInit+0xbc>)
 800a860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a862:	4a24      	ldr	r2, [pc, #144]	@ (800a8f4 <HAL_HCD_MspInit+0xbc>)
 800a864:	f043 0301 	orr.w	r3, r3, #1
 800a868:	6313      	str	r3, [r2, #48]	@ 0x30
 800a86a:	4b22      	ldr	r3, [pc, #136]	@ (800a8f4 <HAL_HCD_MspInit+0xbc>)
 800a86c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a87a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a880:	2300      	movs	r3, #0
 800a882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a884:	f107 0314 	add.w	r3, r7, #20
 800a888:	4619      	mov	r1, r3
 800a88a:	481b      	ldr	r0, [pc, #108]	@ (800a8f8 <HAL_HCD_MspInit+0xc0>)
 800a88c:	f7f8 f8f4 	bl	8002a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a890:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a896:	2302      	movs	r3, #2
 800a898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8a2:	230a      	movs	r3, #10
 800a8a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8a6:	f107 0314 	add.w	r3, r7, #20
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4812      	ldr	r0, [pc, #72]	@ (800a8f8 <HAL_HCD_MspInit+0xc0>)
 800a8ae:	f7f8 f8e3 	bl	8002a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8b2:	4b10      	ldr	r3, [pc, #64]	@ (800a8f4 <HAL_HCD_MspInit+0xbc>)
 800a8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a8f4 <HAL_HCD_MspInit+0xbc>)
 800a8b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8bc:	6353      	str	r3, [r2, #52]	@ 0x34
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f4 <HAL_HCD_MspInit+0xbc>)
 800a8c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8c6:	4a0b      	ldr	r2, [pc, #44]	@ (800a8f4 <HAL_HCD_MspInit+0xbc>)
 800a8c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a8cc:	6453      	str	r3, [r2, #68]	@ 0x44
 800a8ce:	4b09      	ldr	r3, [pc, #36]	@ (800a8f4 <HAL_HCD_MspInit+0xbc>)
 800a8d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2100      	movs	r1, #0
 800a8de:	2043      	movs	r0, #67	@ 0x43
 800a8e0:	f7f7 fd23 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8e4:	2043      	movs	r0, #67	@ 0x43
 800a8e6:	f7f7 fd3c 	bl	8002362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8ea:	bf00      	nop
 800a8ec:	3728      	adds	r7, #40	@ 0x28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	40023800 	.word	0x40023800
 800a8f8:	40020000 	.word	0x40020000

0800a8fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe ff73 	bl	80097f6 <USBH_LL_IncTimer>
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe ffab 	bl	8009882 <USBH_LL_Connect>
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe ffb4 	bl	80098b0 <USBH_LL_Disconnect>
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
 800a95c:	4613      	mov	r3, r2
 800a95e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fe ff65 	bl	800984a <USBH_LL_PortEnabled>
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a996:	4618      	mov	r0, r3
 800a998:	f7fe ff65 	bl	8009866 <USBH_LL_PortDisabled>
}
 800a99c:	bf00      	nop
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d12a      	bne.n	800aa0c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a9b6:	4a18      	ldr	r2, [pc, #96]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a15      	ldr	r2, [pc, #84]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9c2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a9c6:	4b14      	ldr	r3, [pc, #80]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a9cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a9ce:	4b12      	ldr	r3, [pc, #72]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9d0:	2208      	movs	r2, #8
 800a9d2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a9d4:	4b10      	ldr	r3, [pc, #64]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9da:	4b0f      	ldr	r3, [pc, #60]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a9ec:	480a      	ldr	r0, [pc, #40]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9ee:	f7f8 f9f8 	bl	8002de2 <HAL_HCD_Init>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a9f8:	f7f6 fa92 	bl	8000f20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a9fc:	4806      	ldr	r0, [pc, #24]	@ (800aa18 <USBH_LL_Init+0x74>)
 800a9fe:	f7f8 fe59 	bl	80036b4 <HAL_HCD_GetCurrentFrame>
 800aa02:	4603      	mov	r3, r0
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7fe fee6 	bl	80097d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	200006d4 	.word	0x200006d4

0800aa1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7f8 fdc6 	bl	80035c4 <HAL_HCD_Start>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 f95e 	bl	800ad00 <USBH_Get_USB_Status>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7f8 fdce 	bl	800360a <HAL_HCD_Stop>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 f943 	bl	800ad00 <USBH_Get_USB_Status>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aa90:	2301      	movs	r3, #1
 800aa92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7f8 fe18 	bl	80036d0 <HAL_HCD_GetCurrentSpeed>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d00c      	beq.n	800aac0 <USBH_LL_GetSpeed+0x38>
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d80d      	bhi.n	800aac6 <USBH_LL_GetSpeed+0x3e>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <USBH_LL_GetSpeed+0x2c>
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d003      	beq.n	800aaba <USBH_LL_GetSpeed+0x32>
 800aab2:	e008      	b.n	800aac6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73fb      	strb	r3, [r7, #15]
    break;
 800aab8:	e008      	b.n	800aacc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aaba:	2301      	movs	r3, #1
 800aabc:	73fb      	strb	r3, [r7, #15]
    break;
 800aabe:	e005      	b.n	800aacc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800aac0:	2302      	movs	r3, #2
 800aac2:	73fb      	strb	r3, [r7, #15]
    break;
 800aac4:	e002      	b.n	800aacc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaca:	bf00      	nop
  }
  return  speed;
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7f8 fda9 	bl	8003644 <HAL_HCD_ResetPort>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 f901 	bl	800ad00 <USBH_Get_USB_Status>
 800aafe:	4603      	mov	r3, r0
 800ab00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	4611      	mov	r1, r2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7f8 fdb1 	bl	800368a <HAL_HCD_HC_GetXferCount>
 800ab28:	4603      	mov	r3, r0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab32:	b590      	push	{r4, r7, lr}
 800ab34:	b089      	sub	sp, #36	@ 0x24
 800ab36:	af04      	add	r7, sp, #16
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	4608      	mov	r0, r1
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	461a      	mov	r2, r3
 800ab40:	4603      	mov	r3, r0
 800ab42:	70fb      	strb	r3, [r7, #3]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70bb      	strb	r3, [r7, #2]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ab5a:	787c      	ldrb	r4, [r7, #1]
 800ab5c:	78ba      	ldrb	r2, [r7, #2]
 800ab5e:	78f9      	ldrb	r1, [r7, #3]
 800ab60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab62:	9302      	str	r3, [sp, #8]
 800ab64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	4623      	mov	r3, r4
 800ab72:	f7f8 f99d 	bl	8002eb0 <HAL_HCD_HC_Init>
 800ab76:	4603      	mov	r3, r0
 800ab78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 f8bf 	bl	800ad00 <USBH_Get_USB_Status>
 800ab82:	4603      	mov	r3, r0
 800ab84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd90      	pop	{r4, r7, pc}

0800ab90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800abaa:	78fa      	ldrb	r2, [r7, #3]
 800abac:	4611      	mov	r1, r2
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f8 fa36 	bl	8003020 <HAL_HCD_HC_Halt>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f8a0 	bl	800ad00 <USBH_Get_USB_Status>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800abce:	b590      	push	{r4, r7, lr}
 800abd0:	b089      	sub	sp, #36	@ 0x24
 800abd2:	af04      	add	r7, sp, #16
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	4608      	mov	r0, r1
 800abd8:	4611      	mov	r1, r2
 800abda:	461a      	mov	r2, r3
 800abdc:	4603      	mov	r3, r0
 800abde:	70fb      	strb	r3, [r7, #3]
 800abe0:	460b      	mov	r3, r1
 800abe2:	70bb      	strb	r3, [r7, #2]
 800abe4:	4613      	mov	r3, r2
 800abe6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800abf6:	787c      	ldrb	r4, [r7, #1]
 800abf8:	78ba      	ldrb	r2, [r7, #2]
 800abfa:	78f9      	ldrb	r1, [r7, #3]
 800abfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ac00:	9303      	str	r3, [sp, #12]
 800ac02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac04:	9302      	str	r3, [sp, #8]
 800ac06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4623      	mov	r3, r4
 800ac12:	f7f8 fa29 	bl	8003068 <HAL_HCD_HC_SubmitRequest>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 f86f 	bl	800ad00 <USBH_Get_USB_Status>
 800ac22:	4603      	mov	r3, r0
 800ac24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd90      	pop	{r4, r7, pc}

0800ac30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac42:	78fa      	ldrb	r2, [r7, #3]
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7f8 fd0a 	bl	8003660 <HAL_HCD_HC_GetURBState>
 800ac4c:	4603      	mov	r3, r0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d103      	bne.n	800ac74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 f872 	bl	800ad58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ac74:	20c8      	movs	r0, #200	@ 0xc8
 800ac76:	f7f6 fd2d 	bl	80016d4 <HAL_Delay>
  return USBH_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
 800ac90:	4613      	mov	r3, r2
 800ac92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ac9c:	78fa      	ldrb	r2, [r7, #3]
 800ac9e:	68f9      	ldr	r1, [r7, #12]
 800aca0:	4613      	mov	r3, r2
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	1a9b      	subs	r3, r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	3317      	adds	r3, #23
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800acb2:	78fa      	ldrb	r2, [r7, #3]
 800acb4:	68f9      	ldr	r1, [r7, #12]
 800acb6:	4613      	mov	r3, r2
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	1a9b      	subs	r3, r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	440b      	add	r3, r1
 800acc0:	333c      	adds	r3, #60	@ 0x3c
 800acc2:	78ba      	ldrb	r2, [r7, #2]
 800acc4:	701a      	strb	r2, [r3, #0]
 800acc6:	e009      	b.n	800acdc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800acc8:	78fa      	ldrb	r2, [r7, #3]
 800acca:	68f9      	ldr	r1, [r7, #12]
 800accc:	4613      	mov	r3, r2
 800acce:	011b      	lsls	r3, r3, #4
 800acd0:	1a9b      	subs	r3, r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	440b      	add	r3, r1
 800acd6:	333d      	adds	r3, #61	@ 0x3d
 800acd8:	78ba      	ldrb	r2, [r7, #2]
 800acda:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7f6 fcee 	bl	80016d4 <HAL_Delay>
}
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad0e:	79fb      	ldrb	r3, [r7, #7]
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d817      	bhi.n	800ad44 <USBH_Get_USB_Status+0x44>
 800ad14:	a201      	add	r2, pc, #4	@ (adr r2, 800ad1c <USBH_Get_USB_Status+0x1c>)
 800ad16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1a:	bf00      	nop
 800ad1c:	0800ad2d 	.word	0x0800ad2d
 800ad20:	0800ad33 	.word	0x0800ad33
 800ad24:	0800ad39 	.word	0x0800ad39
 800ad28:	0800ad3f 	.word	0x0800ad3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad30:	e00b      	b.n	800ad4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ad32:	2302      	movs	r3, #2
 800ad34:	73fb      	strb	r3, [r7, #15]
    break;
 800ad36:	e008      	b.n	800ad4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3c:	e005      	b.n	800ad4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	73fb      	strb	r3, [r7, #15]
    break;
 800ad42:	e002      	b.n	800ad4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ad44:	2302      	movs	r3, #2
 800ad46:	73fb      	strb	r3, [r7, #15]
    break;
 800ad48:	bf00      	nop
  }
  return usb_status;
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ad62:	79fb      	ldrb	r3, [r7, #7]
 800ad64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d102      	bne.n	800ad72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	73fb      	strb	r3, [r7, #15]
 800ad70:	e001      	b.n	800ad76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ad72:	2301      	movs	r3, #1
 800ad74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	4803      	ldr	r0, [pc, #12]	@ (800ad8c <MX_DriverVbusFS+0x34>)
 800ad7e:	f7f8 f817 	bl	8002db0 <HAL_GPIO_WritePin>
}
 800ad82:	bf00      	nop
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	40020800 	.word	0x40020800

0800ad90 <malloc>:
 800ad90:	4b02      	ldr	r3, [pc, #8]	@ (800ad9c <malloc+0xc>)
 800ad92:	4601      	mov	r1, r0
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	f000 b82d 	b.w	800adf4 <_malloc_r>
 800ad9a:	bf00      	nop
 800ad9c:	20000048 	.word	0x20000048

0800ada0 <free>:
 800ada0:	4b02      	ldr	r3, [pc, #8]	@ (800adac <free+0xc>)
 800ada2:	4601      	mov	r1, r0
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	f000 bb47 	b.w	800b438 <_free_r>
 800adaa:	bf00      	nop
 800adac:	20000048 	.word	0x20000048

0800adb0 <sbrk_aligned>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4e0f      	ldr	r6, [pc, #60]	@ (800adf0 <sbrk_aligned+0x40>)
 800adb4:	460c      	mov	r4, r1
 800adb6:	6831      	ldr	r1, [r6, #0]
 800adb8:	4605      	mov	r5, r0
 800adba:	b911      	cbnz	r1, 800adc2 <sbrk_aligned+0x12>
 800adbc:	f000 faec 	bl	800b398 <_sbrk_r>
 800adc0:	6030      	str	r0, [r6, #0]
 800adc2:	4621      	mov	r1, r4
 800adc4:	4628      	mov	r0, r5
 800adc6:	f000 fae7 	bl	800b398 <_sbrk_r>
 800adca:	1c43      	adds	r3, r0, #1
 800adcc:	d103      	bne.n	800add6 <sbrk_aligned+0x26>
 800adce:	f04f 34ff 	mov.w	r4, #4294967295
 800add2:	4620      	mov	r0, r4
 800add4:	bd70      	pop	{r4, r5, r6, pc}
 800add6:	1cc4      	adds	r4, r0, #3
 800add8:	f024 0403 	bic.w	r4, r4, #3
 800addc:	42a0      	cmp	r0, r4
 800adde:	d0f8      	beq.n	800add2 <sbrk_aligned+0x22>
 800ade0:	1a21      	subs	r1, r4, r0
 800ade2:	4628      	mov	r0, r5
 800ade4:	f000 fad8 	bl	800b398 <_sbrk_r>
 800ade8:	3001      	adds	r0, #1
 800adea:	d1f2      	bne.n	800add2 <sbrk_aligned+0x22>
 800adec:	e7ef      	b.n	800adce <sbrk_aligned+0x1e>
 800adee:	bf00      	nop
 800adf0:	20000ab4 	.word	0x20000ab4

0800adf4 <_malloc_r>:
 800adf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf8:	1ccd      	adds	r5, r1, #3
 800adfa:	f025 0503 	bic.w	r5, r5, #3
 800adfe:	3508      	adds	r5, #8
 800ae00:	2d0c      	cmp	r5, #12
 800ae02:	bf38      	it	cc
 800ae04:	250c      	movcc	r5, #12
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	4606      	mov	r6, r0
 800ae0a:	db01      	blt.n	800ae10 <_malloc_r+0x1c>
 800ae0c:	42a9      	cmp	r1, r5
 800ae0e:	d904      	bls.n	800ae1a <_malloc_r+0x26>
 800ae10:	230c      	movs	r3, #12
 800ae12:	6033      	str	r3, [r6, #0]
 800ae14:	2000      	movs	r0, #0
 800ae16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aef0 <_malloc_r+0xfc>
 800ae1e:	f000 f869 	bl	800aef4 <__malloc_lock>
 800ae22:	f8d8 3000 	ldr.w	r3, [r8]
 800ae26:	461c      	mov	r4, r3
 800ae28:	bb44      	cbnz	r4, 800ae7c <_malloc_r+0x88>
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff ffbf 	bl	800adb0 <sbrk_aligned>
 800ae32:	1c43      	adds	r3, r0, #1
 800ae34:	4604      	mov	r4, r0
 800ae36:	d158      	bne.n	800aeea <_malloc_r+0xf6>
 800ae38:	f8d8 4000 	ldr.w	r4, [r8]
 800ae3c:	4627      	mov	r7, r4
 800ae3e:	2f00      	cmp	r7, #0
 800ae40:	d143      	bne.n	800aeca <_malloc_r+0xd6>
 800ae42:	2c00      	cmp	r4, #0
 800ae44:	d04b      	beq.n	800aede <_malloc_r+0xea>
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	4639      	mov	r1, r7
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	eb04 0903 	add.w	r9, r4, r3
 800ae50:	f000 faa2 	bl	800b398 <_sbrk_r>
 800ae54:	4581      	cmp	r9, r0
 800ae56:	d142      	bne.n	800aede <_malloc_r+0xea>
 800ae58:	6821      	ldr	r1, [r4, #0]
 800ae5a:	1a6d      	subs	r5, r5, r1
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7ff ffa6 	bl	800adb0 <sbrk_aligned>
 800ae64:	3001      	adds	r0, #1
 800ae66:	d03a      	beq.n	800aede <_malloc_r+0xea>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	442b      	add	r3, r5
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	bb62      	cbnz	r2, 800aed0 <_malloc_r+0xdc>
 800ae76:	f8c8 7000 	str.w	r7, [r8]
 800ae7a:	e00f      	b.n	800ae9c <_malloc_r+0xa8>
 800ae7c:	6822      	ldr	r2, [r4, #0]
 800ae7e:	1b52      	subs	r2, r2, r5
 800ae80:	d420      	bmi.n	800aec4 <_malloc_r+0xd0>
 800ae82:	2a0b      	cmp	r2, #11
 800ae84:	d917      	bls.n	800aeb6 <_malloc_r+0xc2>
 800ae86:	1961      	adds	r1, r4, r5
 800ae88:	42a3      	cmp	r3, r4
 800ae8a:	6025      	str	r5, [r4, #0]
 800ae8c:	bf18      	it	ne
 800ae8e:	6059      	strne	r1, [r3, #4]
 800ae90:	6863      	ldr	r3, [r4, #4]
 800ae92:	bf08      	it	eq
 800ae94:	f8c8 1000 	streq.w	r1, [r8]
 800ae98:	5162      	str	r2, [r4, r5]
 800ae9a:	604b      	str	r3, [r1, #4]
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f000 f82f 	bl	800af00 <__malloc_unlock>
 800aea2:	f104 000b 	add.w	r0, r4, #11
 800aea6:	1d23      	adds	r3, r4, #4
 800aea8:	f020 0007 	bic.w	r0, r0, #7
 800aeac:	1ac2      	subs	r2, r0, r3
 800aeae:	bf1c      	itt	ne
 800aeb0:	1a1b      	subne	r3, r3, r0
 800aeb2:	50a3      	strne	r3, [r4, r2]
 800aeb4:	e7af      	b.n	800ae16 <_malloc_r+0x22>
 800aeb6:	6862      	ldr	r2, [r4, #4]
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	bf0c      	ite	eq
 800aebc:	f8c8 2000 	streq.w	r2, [r8]
 800aec0:	605a      	strne	r2, [r3, #4]
 800aec2:	e7eb      	b.n	800ae9c <_malloc_r+0xa8>
 800aec4:	4623      	mov	r3, r4
 800aec6:	6864      	ldr	r4, [r4, #4]
 800aec8:	e7ae      	b.n	800ae28 <_malloc_r+0x34>
 800aeca:	463c      	mov	r4, r7
 800aecc:	687f      	ldr	r7, [r7, #4]
 800aece:	e7b6      	b.n	800ae3e <_malloc_r+0x4a>
 800aed0:	461a      	mov	r2, r3
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	42a3      	cmp	r3, r4
 800aed6:	d1fb      	bne.n	800aed0 <_malloc_r+0xdc>
 800aed8:	2300      	movs	r3, #0
 800aeda:	6053      	str	r3, [r2, #4]
 800aedc:	e7de      	b.n	800ae9c <_malloc_r+0xa8>
 800aede:	230c      	movs	r3, #12
 800aee0:	6033      	str	r3, [r6, #0]
 800aee2:	4630      	mov	r0, r6
 800aee4:	f000 f80c 	bl	800af00 <__malloc_unlock>
 800aee8:	e794      	b.n	800ae14 <_malloc_r+0x20>
 800aeea:	6005      	str	r5, [r0, #0]
 800aeec:	e7d6      	b.n	800ae9c <_malloc_r+0xa8>
 800aeee:	bf00      	nop
 800aef0:	20000ab8 	.word	0x20000ab8

0800aef4 <__malloc_lock>:
 800aef4:	4801      	ldr	r0, [pc, #4]	@ (800aefc <__malloc_lock+0x8>)
 800aef6:	f000 ba9c 	b.w	800b432 <__retarget_lock_acquire_recursive>
 800aefa:	bf00      	nop
 800aefc:	20000bfc 	.word	0x20000bfc

0800af00 <__malloc_unlock>:
 800af00:	4801      	ldr	r0, [pc, #4]	@ (800af08 <__malloc_unlock+0x8>)
 800af02:	f000 ba97 	b.w	800b434 <__retarget_lock_release_recursive>
 800af06:	bf00      	nop
 800af08:	20000bfc 	.word	0x20000bfc

0800af0c <std>:
 800af0c:	2300      	movs	r3, #0
 800af0e:	b510      	push	{r4, lr}
 800af10:	4604      	mov	r4, r0
 800af12:	e9c0 3300 	strd	r3, r3, [r0]
 800af16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af1a:	6083      	str	r3, [r0, #8]
 800af1c:	8181      	strh	r1, [r0, #12]
 800af1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800af20:	81c2      	strh	r2, [r0, #14]
 800af22:	6183      	str	r3, [r0, #24]
 800af24:	4619      	mov	r1, r3
 800af26:	2208      	movs	r2, #8
 800af28:	305c      	adds	r0, #92	@ 0x5c
 800af2a:	f000 f9f9 	bl	800b320 <memset>
 800af2e:	4b0d      	ldr	r3, [pc, #52]	@ (800af64 <std+0x58>)
 800af30:	6263      	str	r3, [r4, #36]	@ 0x24
 800af32:	4b0d      	ldr	r3, [pc, #52]	@ (800af68 <std+0x5c>)
 800af34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af36:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <std+0x60>)
 800af38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af3a:	4b0d      	ldr	r3, [pc, #52]	@ (800af70 <std+0x64>)
 800af3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800af3e:	4b0d      	ldr	r3, [pc, #52]	@ (800af74 <std+0x68>)
 800af40:	6224      	str	r4, [r4, #32]
 800af42:	429c      	cmp	r4, r3
 800af44:	d006      	beq.n	800af54 <std+0x48>
 800af46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af4a:	4294      	cmp	r4, r2
 800af4c:	d002      	beq.n	800af54 <std+0x48>
 800af4e:	33d0      	adds	r3, #208	@ 0xd0
 800af50:	429c      	cmp	r4, r3
 800af52:	d105      	bne.n	800af60 <std+0x54>
 800af54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af5c:	f000 ba68 	b.w	800b430 <__retarget_lock_init_recursive>
 800af60:	bd10      	pop	{r4, pc}
 800af62:	bf00      	nop
 800af64:	0800b171 	.word	0x0800b171
 800af68:	0800b193 	.word	0x0800b193
 800af6c:	0800b1cb 	.word	0x0800b1cb
 800af70:	0800b1ef 	.word	0x0800b1ef
 800af74:	20000abc 	.word	0x20000abc

0800af78 <stdio_exit_handler>:
 800af78:	4a02      	ldr	r2, [pc, #8]	@ (800af84 <stdio_exit_handler+0xc>)
 800af7a:	4903      	ldr	r1, [pc, #12]	@ (800af88 <stdio_exit_handler+0x10>)
 800af7c:	4803      	ldr	r0, [pc, #12]	@ (800af8c <stdio_exit_handler+0x14>)
 800af7e:	f000 b869 	b.w	800b054 <_fwalk_sglue>
 800af82:	bf00      	nop
 800af84:	2000003c 	.word	0x2000003c
 800af88:	0800bb75 	.word	0x0800bb75
 800af8c:	2000004c 	.word	0x2000004c

0800af90 <cleanup_stdio>:
 800af90:	6841      	ldr	r1, [r0, #4]
 800af92:	4b0c      	ldr	r3, [pc, #48]	@ (800afc4 <cleanup_stdio+0x34>)
 800af94:	4299      	cmp	r1, r3
 800af96:	b510      	push	{r4, lr}
 800af98:	4604      	mov	r4, r0
 800af9a:	d001      	beq.n	800afa0 <cleanup_stdio+0x10>
 800af9c:	f000 fdea 	bl	800bb74 <_fflush_r>
 800afa0:	68a1      	ldr	r1, [r4, #8]
 800afa2:	4b09      	ldr	r3, [pc, #36]	@ (800afc8 <cleanup_stdio+0x38>)
 800afa4:	4299      	cmp	r1, r3
 800afa6:	d002      	beq.n	800afae <cleanup_stdio+0x1e>
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fde3 	bl	800bb74 <_fflush_r>
 800afae:	68e1      	ldr	r1, [r4, #12]
 800afb0:	4b06      	ldr	r3, [pc, #24]	@ (800afcc <cleanup_stdio+0x3c>)
 800afb2:	4299      	cmp	r1, r3
 800afb4:	d004      	beq.n	800afc0 <cleanup_stdio+0x30>
 800afb6:	4620      	mov	r0, r4
 800afb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afbc:	f000 bdda 	b.w	800bb74 <_fflush_r>
 800afc0:	bd10      	pop	{r4, pc}
 800afc2:	bf00      	nop
 800afc4:	20000abc 	.word	0x20000abc
 800afc8:	20000b24 	.word	0x20000b24
 800afcc:	20000b8c 	.word	0x20000b8c

0800afd0 <global_stdio_init.part.0>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	4b0b      	ldr	r3, [pc, #44]	@ (800b000 <global_stdio_init.part.0+0x30>)
 800afd4:	4c0b      	ldr	r4, [pc, #44]	@ (800b004 <global_stdio_init.part.0+0x34>)
 800afd6:	4a0c      	ldr	r2, [pc, #48]	@ (800b008 <global_stdio_init.part.0+0x38>)
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	4620      	mov	r0, r4
 800afdc:	2200      	movs	r2, #0
 800afde:	2104      	movs	r1, #4
 800afe0:	f7ff ff94 	bl	800af0c <std>
 800afe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afe8:	2201      	movs	r2, #1
 800afea:	2109      	movs	r1, #9
 800afec:	f7ff ff8e 	bl	800af0c <std>
 800aff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aff4:	2202      	movs	r2, #2
 800aff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800affa:	2112      	movs	r1, #18
 800affc:	f7ff bf86 	b.w	800af0c <std>
 800b000:	20000bf4 	.word	0x20000bf4
 800b004:	20000abc 	.word	0x20000abc
 800b008:	0800af79 	.word	0x0800af79

0800b00c <__sfp_lock_acquire>:
 800b00c:	4801      	ldr	r0, [pc, #4]	@ (800b014 <__sfp_lock_acquire+0x8>)
 800b00e:	f000 ba10 	b.w	800b432 <__retarget_lock_acquire_recursive>
 800b012:	bf00      	nop
 800b014:	20000bfd 	.word	0x20000bfd

0800b018 <__sfp_lock_release>:
 800b018:	4801      	ldr	r0, [pc, #4]	@ (800b020 <__sfp_lock_release+0x8>)
 800b01a:	f000 ba0b 	b.w	800b434 <__retarget_lock_release_recursive>
 800b01e:	bf00      	nop
 800b020:	20000bfd 	.word	0x20000bfd

0800b024 <__sinit>:
 800b024:	b510      	push	{r4, lr}
 800b026:	4604      	mov	r4, r0
 800b028:	f7ff fff0 	bl	800b00c <__sfp_lock_acquire>
 800b02c:	6a23      	ldr	r3, [r4, #32]
 800b02e:	b11b      	cbz	r3, 800b038 <__sinit+0x14>
 800b030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b034:	f7ff bff0 	b.w	800b018 <__sfp_lock_release>
 800b038:	4b04      	ldr	r3, [pc, #16]	@ (800b04c <__sinit+0x28>)
 800b03a:	6223      	str	r3, [r4, #32]
 800b03c:	4b04      	ldr	r3, [pc, #16]	@ (800b050 <__sinit+0x2c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1f5      	bne.n	800b030 <__sinit+0xc>
 800b044:	f7ff ffc4 	bl	800afd0 <global_stdio_init.part.0>
 800b048:	e7f2      	b.n	800b030 <__sinit+0xc>
 800b04a:	bf00      	nop
 800b04c:	0800af91 	.word	0x0800af91
 800b050:	20000bf4 	.word	0x20000bf4

0800b054 <_fwalk_sglue>:
 800b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b058:	4607      	mov	r7, r0
 800b05a:	4688      	mov	r8, r1
 800b05c:	4614      	mov	r4, r2
 800b05e:	2600      	movs	r6, #0
 800b060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b064:	f1b9 0901 	subs.w	r9, r9, #1
 800b068:	d505      	bpl.n	800b076 <_fwalk_sglue+0x22>
 800b06a:	6824      	ldr	r4, [r4, #0]
 800b06c:	2c00      	cmp	r4, #0
 800b06e:	d1f7      	bne.n	800b060 <_fwalk_sglue+0xc>
 800b070:	4630      	mov	r0, r6
 800b072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b076:	89ab      	ldrh	r3, [r5, #12]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d907      	bls.n	800b08c <_fwalk_sglue+0x38>
 800b07c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b080:	3301      	adds	r3, #1
 800b082:	d003      	beq.n	800b08c <_fwalk_sglue+0x38>
 800b084:	4629      	mov	r1, r5
 800b086:	4638      	mov	r0, r7
 800b088:	47c0      	blx	r8
 800b08a:	4306      	orrs	r6, r0
 800b08c:	3568      	adds	r5, #104	@ 0x68
 800b08e:	e7e9      	b.n	800b064 <_fwalk_sglue+0x10>

0800b090 <iprintf>:
 800b090:	b40f      	push	{r0, r1, r2, r3}
 800b092:	b507      	push	{r0, r1, r2, lr}
 800b094:	4906      	ldr	r1, [pc, #24]	@ (800b0b0 <iprintf+0x20>)
 800b096:	ab04      	add	r3, sp, #16
 800b098:	6808      	ldr	r0, [r1, #0]
 800b09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09e:	6881      	ldr	r1, [r0, #8]
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	f000 fa3d 	bl	800b520 <_vfiprintf_r>
 800b0a6:	b003      	add	sp, #12
 800b0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ac:	b004      	add	sp, #16
 800b0ae:	4770      	bx	lr
 800b0b0:	20000048 	.word	0x20000048

0800b0b4 <_puts_r>:
 800b0b4:	6a03      	ldr	r3, [r0, #32]
 800b0b6:	b570      	push	{r4, r5, r6, lr}
 800b0b8:	6884      	ldr	r4, [r0, #8]
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	460e      	mov	r6, r1
 800b0be:	b90b      	cbnz	r3, 800b0c4 <_puts_r+0x10>
 800b0c0:	f7ff ffb0 	bl	800b024 <__sinit>
 800b0c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0c6:	07db      	lsls	r3, r3, #31
 800b0c8:	d405      	bmi.n	800b0d6 <_puts_r+0x22>
 800b0ca:	89a3      	ldrh	r3, [r4, #12]
 800b0cc:	0598      	lsls	r0, r3, #22
 800b0ce:	d402      	bmi.n	800b0d6 <_puts_r+0x22>
 800b0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0d2:	f000 f9ae 	bl	800b432 <__retarget_lock_acquire_recursive>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	0719      	lsls	r1, r3, #28
 800b0da:	d502      	bpl.n	800b0e2 <_puts_r+0x2e>
 800b0dc:	6923      	ldr	r3, [r4, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d135      	bne.n	800b14e <_puts_r+0x9a>
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f000 f8c5 	bl	800b274 <__swsetup_r>
 800b0ea:	b380      	cbz	r0, 800b14e <_puts_r+0x9a>
 800b0ec:	f04f 35ff 	mov.w	r5, #4294967295
 800b0f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0f2:	07da      	lsls	r2, r3, #31
 800b0f4:	d405      	bmi.n	800b102 <_puts_r+0x4e>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	059b      	lsls	r3, r3, #22
 800b0fa:	d402      	bmi.n	800b102 <_puts_r+0x4e>
 800b0fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0fe:	f000 f999 	bl	800b434 <__retarget_lock_release_recursive>
 800b102:	4628      	mov	r0, r5
 800b104:	bd70      	pop	{r4, r5, r6, pc}
 800b106:	2b00      	cmp	r3, #0
 800b108:	da04      	bge.n	800b114 <_puts_r+0x60>
 800b10a:	69a2      	ldr	r2, [r4, #24]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	dc17      	bgt.n	800b140 <_puts_r+0x8c>
 800b110:	290a      	cmp	r1, #10
 800b112:	d015      	beq.n	800b140 <_puts_r+0x8c>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	6022      	str	r2, [r4, #0]
 800b11a:	7019      	strb	r1, [r3, #0]
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b122:	3b01      	subs	r3, #1
 800b124:	60a3      	str	r3, [r4, #8]
 800b126:	2900      	cmp	r1, #0
 800b128:	d1ed      	bne.n	800b106 <_puts_r+0x52>
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	da11      	bge.n	800b152 <_puts_r+0x9e>
 800b12e:	4622      	mov	r2, r4
 800b130:	210a      	movs	r1, #10
 800b132:	4628      	mov	r0, r5
 800b134:	f000 f85f 	bl	800b1f6 <__swbuf_r>
 800b138:	3001      	adds	r0, #1
 800b13a:	d0d7      	beq.n	800b0ec <_puts_r+0x38>
 800b13c:	250a      	movs	r5, #10
 800b13e:	e7d7      	b.n	800b0f0 <_puts_r+0x3c>
 800b140:	4622      	mov	r2, r4
 800b142:	4628      	mov	r0, r5
 800b144:	f000 f857 	bl	800b1f6 <__swbuf_r>
 800b148:	3001      	adds	r0, #1
 800b14a:	d1e7      	bne.n	800b11c <_puts_r+0x68>
 800b14c:	e7ce      	b.n	800b0ec <_puts_r+0x38>
 800b14e:	3e01      	subs	r6, #1
 800b150:	e7e4      	b.n	800b11c <_puts_r+0x68>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	1c5a      	adds	r2, r3, #1
 800b156:	6022      	str	r2, [r4, #0]
 800b158:	220a      	movs	r2, #10
 800b15a:	701a      	strb	r2, [r3, #0]
 800b15c:	e7ee      	b.n	800b13c <_puts_r+0x88>
	...

0800b160 <puts>:
 800b160:	4b02      	ldr	r3, [pc, #8]	@ (800b16c <puts+0xc>)
 800b162:	4601      	mov	r1, r0
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f7ff bfa5 	b.w	800b0b4 <_puts_r>
 800b16a:	bf00      	nop
 800b16c:	20000048 	.word	0x20000048

0800b170 <__sread>:
 800b170:	b510      	push	{r4, lr}
 800b172:	460c      	mov	r4, r1
 800b174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b178:	f000 f8fc 	bl	800b374 <_read_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	bfab      	itete	ge
 800b180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b182:	89a3      	ldrhlt	r3, [r4, #12]
 800b184:	181b      	addge	r3, r3, r0
 800b186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b18a:	bfac      	ite	ge
 800b18c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b18e:	81a3      	strhlt	r3, [r4, #12]
 800b190:	bd10      	pop	{r4, pc}

0800b192 <__swrite>:
 800b192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b196:	461f      	mov	r7, r3
 800b198:	898b      	ldrh	r3, [r1, #12]
 800b19a:	05db      	lsls	r3, r3, #23
 800b19c:	4605      	mov	r5, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	d505      	bpl.n	800b1b0 <__swrite+0x1e>
 800b1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f000 f8d0 	bl	800b350 <_lseek_r>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c6:	f000 b8f7 	b.w	800b3b8 <_write_r>

0800b1ca <__sseek>:
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d2:	f000 f8bd 	bl	800b350 <_lseek_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	bf15      	itete	ne
 800b1dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1e6:	81a3      	strheq	r3, [r4, #12]
 800b1e8:	bf18      	it	ne
 800b1ea:	81a3      	strhne	r3, [r4, #12]
 800b1ec:	bd10      	pop	{r4, pc}

0800b1ee <__sclose>:
 800b1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f2:	f000 b89d 	b.w	800b330 <_close_r>

0800b1f6 <__swbuf_r>:
 800b1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f8:	460e      	mov	r6, r1
 800b1fa:	4614      	mov	r4, r2
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	b118      	cbz	r0, 800b208 <__swbuf_r+0x12>
 800b200:	6a03      	ldr	r3, [r0, #32]
 800b202:	b90b      	cbnz	r3, 800b208 <__swbuf_r+0x12>
 800b204:	f7ff ff0e 	bl	800b024 <__sinit>
 800b208:	69a3      	ldr	r3, [r4, #24]
 800b20a:	60a3      	str	r3, [r4, #8]
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	071a      	lsls	r2, r3, #28
 800b210:	d501      	bpl.n	800b216 <__swbuf_r+0x20>
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	b943      	cbnz	r3, 800b228 <__swbuf_r+0x32>
 800b216:	4621      	mov	r1, r4
 800b218:	4628      	mov	r0, r5
 800b21a:	f000 f82b 	bl	800b274 <__swsetup_r>
 800b21e:	b118      	cbz	r0, 800b228 <__swbuf_r+0x32>
 800b220:	f04f 37ff 	mov.w	r7, #4294967295
 800b224:	4638      	mov	r0, r7
 800b226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	6922      	ldr	r2, [r4, #16]
 800b22c:	1a98      	subs	r0, r3, r2
 800b22e:	6963      	ldr	r3, [r4, #20]
 800b230:	b2f6      	uxtb	r6, r6
 800b232:	4283      	cmp	r3, r0
 800b234:	4637      	mov	r7, r6
 800b236:	dc05      	bgt.n	800b244 <__swbuf_r+0x4e>
 800b238:	4621      	mov	r1, r4
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 fc9a 	bl	800bb74 <_fflush_r>
 800b240:	2800      	cmp	r0, #0
 800b242:	d1ed      	bne.n	800b220 <__swbuf_r+0x2a>
 800b244:	68a3      	ldr	r3, [r4, #8]
 800b246:	3b01      	subs	r3, #1
 800b248:	60a3      	str	r3, [r4, #8]
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	1c5a      	adds	r2, r3, #1
 800b24e:	6022      	str	r2, [r4, #0]
 800b250:	701e      	strb	r6, [r3, #0]
 800b252:	6962      	ldr	r2, [r4, #20]
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	429a      	cmp	r2, r3
 800b258:	d004      	beq.n	800b264 <__swbuf_r+0x6e>
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	07db      	lsls	r3, r3, #31
 800b25e:	d5e1      	bpl.n	800b224 <__swbuf_r+0x2e>
 800b260:	2e0a      	cmp	r6, #10
 800b262:	d1df      	bne.n	800b224 <__swbuf_r+0x2e>
 800b264:	4621      	mov	r1, r4
 800b266:	4628      	mov	r0, r5
 800b268:	f000 fc84 	bl	800bb74 <_fflush_r>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d0d9      	beq.n	800b224 <__swbuf_r+0x2e>
 800b270:	e7d6      	b.n	800b220 <__swbuf_r+0x2a>
	...

0800b274 <__swsetup_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4b29      	ldr	r3, [pc, #164]	@ (800b31c <__swsetup_r+0xa8>)
 800b278:	4605      	mov	r5, r0
 800b27a:	6818      	ldr	r0, [r3, #0]
 800b27c:	460c      	mov	r4, r1
 800b27e:	b118      	cbz	r0, 800b288 <__swsetup_r+0x14>
 800b280:	6a03      	ldr	r3, [r0, #32]
 800b282:	b90b      	cbnz	r3, 800b288 <__swsetup_r+0x14>
 800b284:	f7ff fece 	bl	800b024 <__sinit>
 800b288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b28c:	0719      	lsls	r1, r3, #28
 800b28e:	d422      	bmi.n	800b2d6 <__swsetup_r+0x62>
 800b290:	06da      	lsls	r2, r3, #27
 800b292:	d407      	bmi.n	800b2a4 <__swsetup_r+0x30>
 800b294:	2209      	movs	r2, #9
 800b296:	602a      	str	r2, [r5, #0]
 800b298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a2:	e033      	b.n	800b30c <__swsetup_r+0x98>
 800b2a4:	0758      	lsls	r0, r3, #29
 800b2a6:	d512      	bpl.n	800b2ce <__swsetup_r+0x5a>
 800b2a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2aa:	b141      	cbz	r1, 800b2be <__swsetup_r+0x4a>
 800b2ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2b0:	4299      	cmp	r1, r3
 800b2b2:	d002      	beq.n	800b2ba <__swsetup_r+0x46>
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	f000 f8bf 	bl	800b438 <_free_r>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	6063      	str	r3, [r4, #4]
 800b2ca:	6923      	ldr	r3, [r4, #16]
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	f043 0308 	orr.w	r3, r3, #8
 800b2d4:	81a3      	strh	r3, [r4, #12]
 800b2d6:	6923      	ldr	r3, [r4, #16]
 800b2d8:	b94b      	cbnz	r3, 800b2ee <__swsetup_r+0x7a>
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2e4:	d003      	beq.n	800b2ee <__swsetup_r+0x7a>
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	f000 fc91 	bl	800bc10 <__smakebuf_r>
 800b2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f2:	f013 0201 	ands.w	r2, r3, #1
 800b2f6:	d00a      	beq.n	800b30e <__swsetup_r+0x9a>
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	60a2      	str	r2, [r4, #8]
 800b2fc:	6962      	ldr	r2, [r4, #20]
 800b2fe:	4252      	negs	r2, r2
 800b300:	61a2      	str	r2, [r4, #24]
 800b302:	6922      	ldr	r2, [r4, #16]
 800b304:	b942      	cbnz	r2, 800b318 <__swsetup_r+0xa4>
 800b306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b30a:	d1c5      	bne.n	800b298 <__swsetup_r+0x24>
 800b30c:	bd38      	pop	{r3, r4, r5, pc}
 800b30e:	0799      	lsls	r1, r3, #30
 800b310:	bf58      	it	pl
 800b312:	6962      	ldrpl	r2, [r4, #20]
 800b314:	60a2      	str	r2, [r4, #8]
 800b316:	e7f4      	b.n	800b302 <__swsetup_r+0x8e>
 800b318:	2000      	movs	r0, #0
 800b31a:	e7f7      	b.n	800b30c <__swsetup_r+0x98>
 800b31c:	20000048 	.word	0x20000048

0800b320 <memset>:
 800b320:	4402      	add	r2, r0
 800b322:	4603      	mov	r3, r0
 800b324:	4293      	cmp	r3, r2
 800b326:	d100      	bne.n	800b32a <memset+0xa>
 800b328:	4770      	bx	lr
 800b32a:	f803 1b01 	strb.w	r1, [r3], #1
 800b32e:	e7f9      	b.n	800b324 <memset+0x4>

0800b330 <_close_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4d06      	ldr	r5, [pc, #24]	@ (800b34c <_close_r+0x1c>)
 800b334:	2300      	movs	r3, #0
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	f7f6 f8b1 	bl	80014a2 <_close>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_close_r+0x1a>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_close_r+0x1a>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	20000bf8 	.word	0x20000bf8

0800b350 <_lseek_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d07      	ldr	r5, [pc, #28]	@ (800b370 <_lseek_r+0x20>)
 800b354:	4604      	mov	r4, r0
 800b356:	4608      	mov	r0, r1
 800b358:	4611      	mov	r1, r2
 800b35a:	2200      	movs	r2, #0
 800b35c:	602a      	str	r2, [r5, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	f7f6 f8c6 	bl	80014f0 <_lseek>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d102      	bne.n	800b36e <_lseek_r+0x1e>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b103      	cbz	r3, 800b36e <_lseek_r+0x1e>
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	20000bf8 	.word	0x20000bf8

0800b374 <_read_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d07      	ldr	r5, [pc, #28]	@ (800b394 <_read_r+0x20>)
 800b378:	4604      	mov	r4, r0
 800b37a:	4608      	mov	r0, r1
 800b37c:	4611      	mov	r1, r2
 800b37e:	2200      	movs	r2, #0
 800b380:	602a      	str	r2, [r5, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	f7f6 f870 	bl	8001468 <_read>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d102      	bne.n	800b392 <_read_r+0x1e>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	b103      	cbz	r3, 800b392 <_read_r+0x1e>
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	bd38      	pop	{r3, r4, r5, pc}
 800b394:	20000bf8 	.word	0x20000bf8

0800b398 <_sbrk_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4d06      	ldr	r5, [pc, #24]	@ (800b3b4 <_sbrk_r+0x1c>)
 800b39c:	2300      	movs	r3, #0
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	f7f6 f8b2 	bl	800150c <_sbrk>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_sbrk_r+0x1a>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_sbrk_r+0x1a>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	20000bf8 	.word	0x20000bf8

0800b3b8 <_write_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d07      	ldr	r5, [pc, #28]	@ (800b3d8 <_write_r+0x20>)
 800b3bc:	4604      	mov	r4, r0
 800b3be:	4608      	mov	r0, r1
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	602a      	str	r2, [r5, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f7f5 f8f1 	bl	80005ae <_write>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <_write_r+0x1e>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	b103      	cbz	r3, 800b3d6 <_write_r+0x1e>
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	20000bf8 	.word	0x20000bf8

0800b3dc <__errno>:
 800b3dc:	4b01      	ldr	r3, [pc, #4]	@ (800b3e4 <__errno+0x8>)
 800b3de:	6818      	ldr	r0, [r3, #0]
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	20000048 	.word	0x20000048

0800b3e8 <__libc_init_array>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	4d0d      	ldr	r5, [pc, #52]	@ (800b420 <__libc_init_array+0x38>)
 800b3ec:	4c0d      	ldr	r4, [pc, #52]	@ (800b424 <__libc_init_array+0x3c>)
 800b3ee:	1b64      	subs	r4, r4, r5
 800b3f0:	10a4      	asrs	r4, r4, #2
 800b3f2:	2600      	movs	r6, #0
 800b3f4:	42a6      	cmp	r6, r4
 800b3f6:	d109      	bne.n	800b40c <__libc_init_array+0x24>
 800b3f8:	4d0b      	ldr	r5, [pc, #44]	@ (800b428 <__libc_init_array+0x40>)
 800b3fa:	4c0c      	ldr	r4, [pc, #48]	@ (800b42c <__libc_init_array+0x44>)
 800b3fc:	f000 fc66 	bl	800bccc <_init>
 800b400:	1b64      	subs	r4, r4, r5
 800b402:	10a4      	asrs	r4, r4, #2
 800b404:	2600      	movs	r6, #0
 800b406:	42a6      	cmp	r6, r4
 800b408:	d105      	bne.n	800b416 <__libc_init_array+0x2e>
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b410:	4798      	blx	r3
 800b412:	3601      	adds	r6, #1
 800b414:	e7ee      	b.n	800b3f4 <__libc_init_array+0xc>
 800b416:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41a:	4798      	blx	r3
 800b41c:	3601      	adds	r6, #1
 800b41e:	e7f2      	b.n	800b406 <__libc_init_array+0x1e>
 800b420:	0800bda8 	.word	0x0800bda8
 800b424:	0800bda8 	.word	0x0800bda8
 800b428:	0800bda8 	.word	0x0800bda8
 800b42c:	0800bdac 	.word	0x0800bdac

0800b430 <__retarget_lock_init_recursive>:
 800b430:	4770      	bx	lr

0800b432 <__retarget_lock_acquire_recursive>:
 800b432:	4770      	bx	lr

0800b434 <__retarget_lock_release_recursive>:
 800b434:	4770      	bx	lr
	...

0800b438 <_free_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4605      	mov	r5, r0
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d041      	beq.n	800b4c4 <_free_r+0x8c>
 800b440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b444:	1f0c      	subs	r4, r1, #4
 800b446:	2b00      	cmp	r3, #0
 800b448:	bfb8      	it	lt
 800b44a:	18e4      	addlt	r4, r4, r3
 800b44c:	f7ff fd52 	bl	800aef4 <__malloc_lock>
 800b450:	4a1d      	ldr	r2, [pc, #116]	@ (800b4c8 <_free_r+0x90>)
 800b452:	6813      	ldr	r3, [r2, #0]
 800b454:	b933      	cbnz	r3, 800b464 <_free_r+0x2c>
 800b456:	6063      	str	r3, [r4, #4]
 800b458:	6014      	str	r4, [r2, #0]
 800b45a:	4628      	mov	r0, r5
 800b45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b460:	f7ff bd4e 	b.w	800af00 <__malloc_unlock>
 800b464:	42a3      	cmp	r3, r4
 800b466:	d908      	bls.n	800b47a <_free_r+0x42>
 800b468:	6820      	ldr	r0, [r4, #0]
 800b46a:	1821      	adds	r1, r4, r0
 800b46c:	428b      	cmp	r3, r1
 800b46e:	bf01      	itttt	eq
 800b470:	6819      	ldreq	r1, [r3, #0]
 800b472:	685b      	ldreq	r3, [r3, #4]
 800b474:	1809      	addeq	r1, r1, r0
 800b476:	6021      	streq	r1, [r4, #0]
 800b478:	e7ed      	b.n	800b456 <_free_r+0x1e>
 800b47a:	461a      	mov	r2, r3
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	b10b      	cbz	r3, 800b484 <_free_r+0x4c>
 800b480:	42a3      	cmp	r3, r4
 800b482:	d9fa      	bls.n	800b47a <_free_r+0x42>
 800b484:	6811      	ldr	r1, [r2, #0]
 800b486:	1850      	adds	r0, r2, r1
 800b488:	42a0      	cmp	r0, r4
 800b48a:	d10b      	bne.n	800b4a4 <_free_r+0x6c>
 800b48c:	6820      	ldr	r0, [r4, #0]
 800b48e:	4401      	add	r1, r0
 800b490:	1850      	adds	r0, r2, r1
 800b492:	4283      	cmp	r3, r0
 800b494:	6011      	str	r1, [r2, #0]
 800b496:	d1e0      	bne.n	800b45a <_free_r+0x22>
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	6053      	str	r3, [r2, #4]
 800b49e:	4408      	add	r0, r1
 800b4a0:	6010      	str	r0, [r2, #0]
 800b4a2:	e7da      	b.n	800b45a <_free_r+0x22>
 800b4a4:	d902      	bls.n	800b4ac <_free_r+0x74>
 800b4a6:	230c      	movs	r3, #12
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	e7d6      	b.n	800b45a <_free_r+0x22>
 800b4ac:	6820      	ldr	r0, [r4, #0]
 800b4ae:	1821      	adds	r1, r4, r0
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	bf04      	itt	eq
 800b4b4:	6819      	ldreq	r1, [r3, #0]
 800b4b6:	685b      	ldreq	r3, [r3, #4]
 800b4b8:	6063      	str	r3, [r4, #4]
 800b4ba:	bf04      	itt	eq
 800b4bc:	1809      	addeq	r1, r1, r0
 800b4be:	6021      	streq	r1, [r4, #0]
 800b4c0:	6054      	str	r4, [r2, #4]
 800b4c2:	e7ca      	b.n	800b45a <_free_r+0x22>
 800b4c4:	bd38      	pop	{r3, r4, r5, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20000ab8 	.word	0x20000ab8

0800b4cc <__sfputc_r>:
 800b4cc:	6893      	ldr	r3, [r2, #8]
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	b410      	push	{r4}
 800b4d4:	6093      	str	r3, [r2, #8]
 800b4d6:	da08      	bge.n	800b4ea <__sfputc_r+0x1e>
 800b4d8:	6994      	ldr	r4, [r2, #24]
 800b4da:	42a3      	cmp	r3, r4
 800b4dc:	db01      	blt.n	800b4e2 <__sfputc_r+0x16>
 800b4de:	290a      	cmp	r1, #10
 800b4e0:	d103      	bne.n	800b4ea <__sfputc_r+0x1e>
 800b4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4e6:	f7ff be86 	b.w	800b1f6 <__swbuf_r>
 800b4ea:	6813      	ldr	r3, [r2, #0]
 800b4ec:	1c58      	adds	r0, r3, #1
 800b4ee:	6010      	str	r0, [r2, #0]
 800b4f0:	7019      	strb	r1, [r3, #0]
 800b4f2:	4608      	mov	r0, r1
 800b4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <__sfputs_r>:
 800b4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	4614      	mov	r4, r2
 800b502:	18d5      	adds	r5, r2, r3
 800b504:	42ac      	cmp	r4, r5
 800b506:	d101      	bne.n	800b50c <__sfputs_r+0x12>
 800b508:	2000      	movs	r0, #0
 800b50a:	e007      	b.n	800b51c <__sfputs_r+0x22>
 800b50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b510:	463a      	mov	r2, r7
 800b512:	4630      	mov	r0, r6
 800b514:	f7ff ffda 	bl	800b4cc <__sfputc_r>
 800b518:	1c43      	adds	r3, r0, #1
 800b51a:	d1f3      	bne.n	800b504 <__sfputs_r+0xa>
 800b51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b520 <_vfiprintf_r>:
 800b520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	460d      	mov	r5, r1
 800b526:	b09d      	sub	sp, #116	@ 0x74
 800b528:	4614      	mov	r4, r2
 800b52a:	4698      	mov	r8, r3
 800b52c:	4606      	mov	r6, r0
 800b52e:	b118      	cbz	r0, 800b538 <_vfiprintf_r+0x18>
 800b530:	6a03      	ldr	r3, [r0, #32]
 800b532:	b90b      	cbnz	r3, 800b538 <_vfiprintf_r+0x18>
 800b534:	f7ff fd76 	bl	800b024 <__sinit>
 800b538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b53a:	07d9      	lsls	r1, r3, #31
 800b53c:	d405      	bmi.n	800b54a <_vfiprintf_r+0x2a>
 800b53e:	89ab      	ldrh	r3, [r5, #12]
 800b540:	059a      	lsls	r2, r3, #22
 800b542:	d402      	bmi.n	800b54a <_vfiprintf_r+0x2a>
 800b544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b546:	f7ff ff74 	bl	800b432 <__retarget_lock_acquire_recursive>
 800b54a:	89ab      	ldrh	r3, [r5, #12]
 800b54c:	071b      	lsls	r3, r3, #28
 800b54e:	d501      	bpl.n	800b554 <_vfiprintf_r+0x34>
 800b550:	692b      	ldr	r3, [r5, #16]
 800b552:	b99b      	cbnz	r3, 800b57c <_vfiprintf_r+0x5c>
 800b554:	4629      	mov	r1, r5
 800b556:	4630      	mov	r0, r6
 800b558:	f7ff fe8c 	bl	800b274 <__swsetup_r>
 800b55c:	b170      	cbz	r0, 800b57c <_vfiprintf_r+0x5c>
 800b55e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b560:	07dc      	lsls	r4, r3, #31
 800b562:	d504      	bpl.n	800b56e <_vfiprintf_r+0x4e>
 800b564:	f04f 30ff 	mov.w	r0, #4294967295
 800b568:	b01d      	add	sp, #116	@ 0x74
 800b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56e:	89ab      	ldrh	r3, [r5, #12]
 800b570:	0598      	lsls	r0, r3, #22
 800b572:	d4f7      	bmi.n	800b564 <_vfiprintf_r+0x44>
 800b574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b576:	f7ff ff5d 	bl	800b434 <__retarget_lock_release_recursive>
 800b57a:	e7f3      	b.n	800b564 <_vfiprintf_r+0x44>
 800b57c:	2300      	movs	r3, #0
 800b57e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b580:	2320      	movs	r3, #32
 800b582:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b586:	f8cd 800c 	str.w	r8, [sp, #12]
 800b58a:	2330      	movs	r3, #48	@ 0x30
 800b58c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b73c <_vfiprintf_r+0x21c>
 800b590:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b594:	f04f 0901 	mov.w	r9, #1
 800b598:	4623      	mov	r3, r4
 800b59a:	469a      	mov	sl, r3
 800b59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a0:	b10a      	cbz	r2, 800b5a6 <_vfiprintf_r+0x86>
 800b5a2:	2a25      	cmp	r2, #37	@ 0x25
 800b5a4:	d1f9      	bne.n	800b59a <_vfiprintf_r+0x7a>
 800b5a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b5aa:	d00b      	beq.n	800b5c4 <_vfiprintf_r+0xa4>
 800b5ac:	465b      	mov	r3, fp
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7ff ffa1 	bl	800b4fa <__sfputs_r>
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	f000 80a7 	beq.w	800b70c <_vfiprintf_r+0x1ec>
 800b5be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5c0:	445a      	add	r2, fp
 800b5c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 809f 	beq.w	800b70c <_vfiprintf_r+0x1ec>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5d8:	f10a 0a01 	add.w	sl, sl, #1
 800b5dc:	9304      	str	r3, [sp, #16]
 800b5de:	9307      	str	r3, [sp, #28]
 800b5e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5e6:	4654      	mov	r4, sl
 800b5e8:	2205      	movs	r2, #5
 800b5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ee:	4853      	ldr	r0, [pc, #332]	@ (800b73c <_vfiprintf_r+0x21c>)
 800b5f0:	f7f4 fdee 	bl	80001d0 <memchr>
 800b5f4:	9a04      	ldr	r2, [sp, #16]
 800b5f6:	b9d8      	cbnz	r0, 800b630 <_vfiprintf_r+0x110>
 800b5f8:	06d1      	lsls	r1, r2, #27
 800b5fa:	bf44      	itt	mi
 800b5fc:	2320      	movmi	r3, #32
 800b5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b602:	0713      	lsls	r3, r2, #28
 800b604:	bf44      	itt	mi
 800b606:	232b      	movmi	r3, #43	@ 0x2b
 800b608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b60c:	f89a 3000 	ldrb.w	r3, [sl]
 800b610:	2b2a      	cmp	r3, #42	@ 0x2a
 800b612:	d015      	beq.n	800b640 <_vfiprintf_r+0x120>
 800b614:	9a07      	ldr	r2, [sp, #28]
 800b616:	4654      	mov	r4, sl
 800b618:	2000      	movs	r0, #0
 800b61a:	f04f 0c0a 	mov.w	ip, #10
 800b61e:	4621      	mov	r1, r4
 800b620:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b624:	3b30      	subs	r3, #48	@ 0x30
 800b626:	2b09      	cmp	r3, #9
 800b628:	d94b      	bls.n	800b6c2 <_vfiprintf_r+0x1a2>
 800b62a:	b1b0      	cbz	r0, 800b65a <_vfiprintf_r+0x13a>
 800b62c:	9207      	str	r2, [sp, #28]
 800b62e:	e014      	b.n	800b65a <_vfiprintf_r+0x13a>
 800b630:	eba0 0308 	sub.w	r3, r0, r8
 800b634:	fa09 f303 	lsl.w	r3, r9, r3
 800b638:	4313      	orrs	r3, r2
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	46a2      	mov	sl, r4
 800b63e:	e7d2      	b.n	800b5e6 <_vfiprintf_r+0xc6>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	1d19      	adds	r1, r3, #4
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	9103      	str	r1, [sp, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bfbb      	ittet	lt
 800b64c:	425b      	neglt	r3, r3
 800b64e:	f042 0202 	orrlt.w	r2, r2, #2
 800b652:	9307      	strge	r3, [sp, #28]
 800b654:	9307      	strlt	r3, [sp, #28]
 800b656:	bfb8      	it	lt
 800b658:	9204      	strlt	r2, [sp, #16]
 800b65a:	7823      	ldrb	r3, [r4, #0]
 800b65c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b65e:	d10a      	bne.n	800b676 <_vfiprintf_r+0x156>
 800b660:	7863      	ldrb	r3, [r4, #1]
 800b662:	2b2a      	cmp	r3, #42	@ 0x2a
 800b664:	d132      	bne.n	800b6cc <_vfiprintf_r+0x1ac>
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	1d1a      	adds	r2, r3, #4
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	9203      	str	r2, [sp, #12]
 800b66e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b672:	3402      	adds	r4, #2
 800b674:	9305      	str	r3, [sp, #20]
 800b676:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b74c <_vfiprintf_r+0x22c>
 800b67a:	7821      	ldrb	r1, [r4, #0]
 800b67c:	2203      	movs	r2, #3
 800b67e:	4650      	mov	r0, sl
 800b680:	f7f4 fda6 	bl	80001d0 <memchr>
 800b684:	b138      	cbz	r0, 800b696 <_vfiprintf_r+0x176>
 800b686:	9b04      	ldr	r3, [sp, #16]
 800b688:	eba0 000a 	sub.w	r0, r0, sl
 800b68c:	2240      	movs	r2, #64	@ 0x40
 800b68e:	4082      	lsls	r2, r0
 800b690:	4313      	orrs	r3, r2
 800b692:	3401      	adds	r4, #1
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b69a:	4829      	ldr	r0, [pc, #164]	@ (800b740 <_vfiprintf_r+0x220>)
 800b69c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6a0:	2206      	movs	r2, #6
 800b6a2:	f7f4 fd95 	bl	80001d0 <memchr>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d03f      	beq.n	800b72a <_vfiprintf_r+0x20a>
 800b6aa:	4b26      	ldr	r3, [pc, #152]	@ (800b744 <_vfiprintf_r+0x224>)
 800b6ac:	bb1b      	cbnz	r3, 800b6f6 <_vfiprintf_r+0x1d6>
 800b6ae:	9b03      	ldr	r3, [sp, #12]
 800b6b0:	3307      	adds	r3, #7
 800b6b2:	f023 0307 	bic.w	r3, r3, #7
 800b6b6:	3308      	adds	r3, #8
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6bc:	443b      	add	r3, r7
 800b6be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6c0:	e76a      	b.n	800b598 <_vfiprintf_r+0x78>
 800b6c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	e7a8      	b.n	800b61e <_vfiprintf_r+0xfe>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	3401      	adds	r4, #1
 800b6d0:	9305      	str	r3, [sp, #20]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	f04f 0c0a 	mov.w	ip, #10
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6de:	3a30      	subs	r2, #48	@ 0x30
 800b6e0:	2a09      	cmp	r2, #9
 800b6e2:	d903      	bls.n	800b6ec <_vfiprintf_r+0x1cc>
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d0c6      	beq.n	800b676 <_vfiprintf_r+0x156>
 800b6e8:	9105      	str	r1, [sp, #20]
 800b6ea:	e7c4      	b.n	800b676 <_vfiprintf_r+0x156>
 800b6ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e7f0      	b.n	800b6d8 <_vfiprintf_r+0x1b8>
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4b12      	ldr	r3, [pc, #72]	@ (800b748 <_vfiprintf_r+0x228>)
 800b6fe:	a904      	add	r1, sp, #16
 800b700:	4630      	mov	r0, r6
 800b702:	f3af 8000 	nop.w
 800b706:	4607      	mov	r7, r0
 800b708:	1c78      	adds	r0, r7, #1
 800b70a:	d1d6      	bne.n	800b6ba <_vfiprintf_r+0x19a>
 800b70c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b70e:	07d9      	lsls	r1, r3, #31
 800b710:	d405      	bmi.n	800b71e <_vfiprintf_r+0x1fe>
 800b712:	89ab      	ldrh	r3, [r5, #12]
 800b714:	059a      	lsls	r2, r3, #22
 800b716:	d402      	bmi.n	800b71e <_vfiprintf_r+0x1fe>
 800b718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b71a:	f7ff fe8b 	bl	800b434 <__retarget_lock_release_recursive>
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	065b      	lsls	r3, r3, #25
 800b722:	f53f af1f 	bmi.w	800b564 <_vfiprintf_r+0x44>
 800b726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b728:	e71e      	b.n	800b568 <_vfiprintf_r+0x48>
 800b72a:	ab03      	add	r3, sp, #12
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	462a      	mov	r2, r5
 800b730:	4b05      	ldr	r3, [pc, #20]	@ (800b748 <_vfiprintf_r+0x228>)
 800b732:	a904      	add	r1, sp, #16
 800b734:	4630      	mov	r0, r6
 800b736:	f000 f879 	bl	800b82c <_printf_i>
 800b73a:	e7e4      	b.n	800b706 <_vfiprintf_r+0x1e6>
 800b73c:	0800bd6c 	.word	0x0800bd6c
 800b740:	0800bd76 	.word	0x0800bd76
 800b744:	00000000 	.word	0x00000000
 800b748:	0800b4fb 	.word	0x0800b4fb
 800b74c:	0800bd72 	.word	0x0800bd72

0800b750 <_printf_common>:
 800b750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b754:	4616      	mov	r6, r2
 800b756:	4698      	mov	r8, r3
 800b758:	688a      	ldr	r2, [r1, #8]
 800b75a:	690b      	ldr	r3, [r1, #16]
 800b75c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b760:	4293      	cmp	r3, r2
 800b762:	bfb8      	it	lt
 800b764:	4613      	movlt	r3, r2
 800b766:	6033      	str	r3, [r6, #0]
 800b768:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b76c:	4607      	mov	r7, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	b10a      	cbz	r2, 800b776 <_printf_common+0x26>
 800b772:	3301      	adds	r3, #1
 800b774:	6033      	str	r3, [r6, #0]
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	0699      	lsls	r1, r3, #26
 800b77a:	bf42      	ittt	mi
 800b77c:	6833      	ldrmi	r3, [r6, #0]
 800b77e:	3302      	addmi	r3, #2
 800b780:	6033      	strmi	r3, [r6, #0]
 800b782:	6825      	ldr	r5, [r4, #0]
 800b784:	f015 0506 	ands.w	r5, r5, #6
 800b788:	d106      	bne.n	800b798 <_printf_common+0x48>
 800b78a:	f104 0a19 	add.w	sl, r4, #25
 800b78e:	68e3      	ldr	r3, [r4, #12]
 800b790:	6832      	ldr	r2, [r6, #0]
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	42ab      	cmp	r3, r5
 800b796:	dc26      	bgt.n	800b7e6 <_printf_common+0x96>
 800b798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	3b00      	subs	r3, #0
 800b7a0:	bf18      	it	ne
 800b7a2:	2301      	movne	r3, #1
 800b7a4:	0692      	lsls	r2, r2, #26
 800b7a6:	d42b      	bmi.n	800b800 <_printf_common+0xb0>
 800b7a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7ac:	4641      	mov	r1, r8
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	47c8      	blx	r9
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d01e      	beq.n	800b7f4 <_printf_common+0xa4>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	6922      	ldr	r2, [r4, #16]
 800b7ba:	f003 0306 	and.w	r3, r3, #6
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	bf02      	ittt	eq
 800b7c2:	68e5      	ldreq	r5, [r4, #12]
 800b7c4:	6833      	ldreq	r3, [r6, #0]
 800b7c6:	1aed      	subeq	r5, r5, r3
 800b7c8:	68a3      	ldr	r3, [r4, #8]
 800b7ca:	bf0c      	ite	eq
 800b7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7d0:	2500      	movne	r5, #0
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	bfc4      	itt	gt
 800b7d6:	1a9b      	subgt	r3, r3, r2
 800b7d8:	18ed      	addgt	r5, r5, r3
 800b7da:	2600      	movs	r6, #0
 800b7dc:	341a      	adds	r4, #26
 800b7de:	42b5      	cmp	r5, r6
 800b7e0:	d11a      	bne.n	800b818 <_printf_common+0xc8>
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	e008      	b.n	800b7f8 <_printf_common+0xa8>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4652      	mov	r2, sl
 800b7ea:	4641      	mov	r1, r8
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	47c8      	blx	r9
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d103      	bne.n	800b7fc <_printf_common+0xac>
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	e7c6      	b.n	800b78e <_printf_common+0x3e>
 800b800:	18e1      	adds	r1, r4, r3
 800b802:	1c5a      	adds	r2, r3, #1
 800b804:	2030      	movs	r0, #48	@ 0x30
 800b806:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b80a:	4422      	add	r2, r4
 800b80c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b814:	3302      	adds	r3, #2
 800b816:	e7c7      	b.n	800b7a8 <_printf_common+0x58>
 800b818:	2301      	movs	r3, #1
 800b81a:	4622      	mov	r2, r4
 800b81c:	4641      	mov	r1, r8
 800b81e:	4638      	mov	r0, r7
 800b820:	47c8      	blx	r9
 800b822:	3001      	adds	r0, #1
 800b824:	d0e6      	beq.n	800b7f4 <_printf_common+0xa4>
 800b826:	3601      	adds	r6, #1
 800b828:	e7d9      	b.n	800b7de <_printf_common+0x8e>
	...

0800b82c <_printf_i>:
 800b82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b830:	7e0f      	ldrb	r7, [r1, #24]
 800b832:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b834:	2f78      	cmp	r7, #120	@ 0x78
 800b836:	4691      	mov	r9, r2
 800b838:	4680      	mov	r8, r0
 800b83a:	460c      	mov	r4, r1
 800b83c:	469a      	mov	sl, r3
 800b83e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b842:	d807      	bhi.n	800b854 <_printf_i+0x28>
 800b844:	2f62      	cmp	r7, #98	@ 0x62
 800b846:	d80a      	bhi.n	800b85e <_printf_i+0x32>
 800b848:	2f00      	cmp	r7, #0
 800b84a:	f000 80d2 	beq.w	800b9f2 <_printf_i+0x1c6>
 800b84e:	2f58      	cmp	r7, #88	@ 0x58
 800b850:	f000 80b9 	beq.w	800b9c6 <_printf_i+0x19a>
 800b854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b85c:	e03a      	b.n	800b8d4 <_printf_i+0xa8>
 800b85e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b862:	2b15      	cmp	r3, #21
 800b864:	d8f6      	bhi.n	800b854 <_printf_i+0x28>
 800b866:	a101      	add	r1, pc, #4	@ (adr r1, 800b86c <_printf_i+0x40>)
 800b868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b86c:	0800b8c5 	.word	0x0800b8c5
 800b870:	0800b8d9 	.word	0x0800b8d9
 800b874:	0800b855 	.word	0x0800b855
 800b878:	0800b855 	.word	0x0800b855
 800b87c:	0800b855 	.word	0x0800b855
 800b880:	0800b855 	.word	0x0800b855
 800b884:	0800b8d9 	.word	0x0800b8d9
 800b888:	0800b855 	.word	0x0800b855
 800b88c:	0800b855 	.word	0x0800b855
 800b890:	0800b855 	.word	0x0800b855
 800b894:	0800b855 	.word	0x0800b855
 800b898:	0800b9d9 	.word	0x0800b9d9
 800b89c:	0800b903 	.word	0x0800b903
 800b8a0:	0800b993 	.word	0x0800b993
 800b8a4:	0800b855 	.word	0x0800b855
 800b8a8:	0800b855 	.word	0x0800b855
 800b8ac:	0800b9fb 	.word	0x0800b9fb
 800b8b0:	0800b855 	.word	0x0800b855
 800b8b4:	0800b903 	.word	0x0800b903
 800b8b8:	0800b855 	.word	0x0800b855
 800b8bc:	0800b855 	.word	0x0800b855
 800b8c0:	0800b99b 	.word	0x0800b99b
 800b8c4:	6833      	ldr	r3, [r6, #0]
 800b8c6:	1d1a      	adds	r2, r3, #4
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6032      	str	r2, [r6, #0]
 800b8cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e09d      	b.n	800ba14 <_printf_i+0x1e8>
 800b8d8:	6833      	ldr	r3, [r6, #0]
 800b8da:	6820      	ldr	r0, [r4, #0]
 800b8dc:	1d19      	adds	r1, r3, #4
 800b8de:	6031      	str	r1, [r6, #0]
 800b8e0:	0606      	lsls	r6, r0, #24
 800b8e2:	d501      	bpl.n	800b8e8 <_printf_i+0xbc>
 800b8e4:	681d      	ldr	r5, [r3, #0]
 800b8e6:	e003      	b.n	800b8f0 <_printf_i+0xc4>
 800b8e8:	0645      	lsls	r5, r0, #25
 800b8ea:	d5fb      	bpl.n	800b8e4 <_printf_i+0xb8>
 800b8ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8f0:	2d00      	cmp	r5, #0
 800b8f2:	da03      	bge.n	800b8fc <_printf_i+0xd0>
 800b8f4:	232d      	movs	r3, #45	@ 0x2d
 800b8f6:	426d      	negs	r5, r5
 800b8f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8fc:	4859      	ldr	r0, [pc, #356]	@ (800ba64 <_printf_i+0x238>)
 800b8fe:	230a      	movs	r3, #10
 800b900:	e011      	b.n	800b926 <_printf_i+0xfa>
 800b902:	6821      	ldr	r1, [r4, #0]
 800b904:	6833      	ldr	r3, [r6, #0]
 800b906:	0608      	lsls	r0, r1, #24
 800b908:	f853 5b04 	ldr.w	r5, [r3], #4
 800b90c:	d402      	bmi.n	800b914 <_printf_i+0xe8>
 800b90e:	0649      	lsls	r1, r1, #25
 800b910:	bf48      	it	mi
 800b912:	b2ad      	uxthmi	r5, r5
 800b914:	2f6f      	cmp	r7, #111	@ 0x6f
 800b916:	4853      	ldr	r0, [pc, #332]	@ (800ba64 <_printf_i+0x238>)
 800b918:	6033      	str	r3, [r6, #0]
 800b91a:	bf14      	ite	ne
 800b91c:	230a      	movne	r3, #10
 800b91e:	2308      	moveq	r3, #8
 800b920:	2100      	movs	r1, #0
 800b922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b926:	6866      	ldr	r6, [r4, #4]
 800b928:	60a6      	str	r6, [r4, #8]
 800b92a:	2e00      	cmp	r6, #0
 800b92c:	bfa2      	ittt	ge
 800b92e:	6821      	ldrge	r1, [r4, #0]
 800b930:	f021 0104 	bicge.w	r1, r1, #4
 800b934:	6021      	strge	r1, [r4, #0]
 800b936:	b90d      	cbnz	r5, 800b93c <_printf_i+0x110>
 800b938:	2e00      	cmp	r6, #0
 800b93a:	d04b      	beq.n	800b9d4 <_printf_i+0x1a8>
 800b93c:	4616      	mov	r6, r2
 800b93e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b942:	fb03 5711 	mls	r7, r3, r1, r5
 800b946:	5dc7      	ldrb	r7, [r0, r7]
 800b948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b94c:	462f      	mov	r7, r5
 800b94e:	42bb      	cmp	r3, r7
 800b950:	460d      	mov	r5, r1
 800b952:	d9f4      	bls.n	800b93e <_printf_i+0x112>
 800b954:	2b08      	cmp	r3, #8
 800b956:	d10b      	bne.n	800b970 <_printf_i+0x144>
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	07df      	lsls	r7, r3, #31
 800b95c:	d508      	bpl.n	800b970 <_printf_i+0x144>
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	6861      	ldr	r1, [r4, #4]
 800b962:	4299      	cmp	r1, r3
 800b964:	bfde      	ittt	le
 800b966:	2330      	movle	r3, #48	@ 0x30
 800b968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b96c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b970:	1b92      	subs	r2, r2, r6
 800b972:	6122      	str	r2, [r4, #16]
 800b974:	f8cd a000 	str.w	sl, [sp]
 800b978:	464b      	mov	r3, r9
 800b97a:	aa03      	add	r2, sp, #12
 800b97c:	4621      	mov	r1, r4
 800b97e:	4640      	mov	r0, r8
 800b980:	f7ff fee6 	bl	800b750 <_printf_common>
 800b984:	3001      	adds	r0, #1
 800b986:	d14a      	bne.n	800ba1e <_printf_i+0x1f2>
 800b988:	f04f 30ff 	mov.w	r0, #4294967295
 800b98c:	b004      	add	sp, #16
 800b98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	f043 0320 	orr.w	r3, r3, #32
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	4833      	ldr	r0, [pc, #204]	@ (800ba68 <_printf_i+0x23c>)
 800b99c:	2778      	movs	r7, #120	@ 0x78
 800b99e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	6831      	ldr	r1, [r6, #0]
 800b9a6:	061f      	lsls	r7, r3, #24
 800b9a8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9ac:	d402      	bmi.n	800b9b4 <_printf_i+0x188>
 800b9ae:	065f      	lsls	r7, r3, #25
 800b9b0:	bf48      	it	mi
 800b9b2:	b2ad      	uxthmi	r5, r5
 800b9b4:	6031      	str	r1, [r6, #0]
 800b9b6:	07d9      	lsls	r1, r3, #31
 800b9b8:	bf44      	itt	mi
 800b9ba:	f043 0320 	orrmi.w	r3, r3, #32
 800b9be:	6023      	strmi	r3, [r4, #0]
 800b9c0:	b11d      	cbz	r5, 800b9ca <_printf_i+0x19e>
 800b9c2:	2310      	movs	r3, #16
 800b9c4:	e7ac      	b.n	800b920 <_printf_i+0xf4>
 800b9c6:	4827      	ldr	r0, [pc, #156]	@ (800ba64 <_printf_i+0x238>)
 800b9c8:	e7e9      	b.n	800b99e <_printf_i+0x172>
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	f023 0320 	bic.w	r3, r3, #32
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	e7f6      	b.n	800b9c2 <_printf_i+0x196>
 800b9d4:	4616      	mov	r6, r2
 800b9d6:	e7bd      	b.n	800b954 <_printf_i+0x128>
 800b9d8:	6833      	ldr	r3, [r6, #0]
 800b9da:	6825      	ldr	r5, [r4, #0]
 800b9dc:	6961      	ldr	r1, [r4, #20]
 800b9de:	1d18      	adds	r0, r3, #4
 800b9e0:	6030      	str	r0, [r6, #0]
 800b9e2:	062e      	lsls	r6, r5, #24
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	d501      	bpl.n	800b9ec <_printf_i+0x1c0>
 800b9e8:	6019      	str	r1, [r3, #0]
 800b9ea:	e002      	b.n	800b9f2 <_printf_i+0x1c6>
 800b9ec:	0668      	lsls	r0, r5, #25
 800b9ee:	d5fb      	bpl.n	800b9e8 <_printf_i+0x1bc>
 800b9f0:	8019      	strh	r1, [r3, #0]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	6123      	str	r3, [r4, #16]
 800b9f6:	4616      	mov	r6, r2
 800b9f8:	e7bc      	b.n	800b974 <_printf_i+0x148>
 800b9fa:	6833      	ldr	r3, [r6, #0]
 800b9fc:	1d1a      	adds	r2, r3, #4
 800b9fe:	6032      	str	r2, [r6, #0]
 800ba00:	681e      	ldr	r6, [r3, #0]
 800ba02:	6862      	ldr	r2, [r4, #4]
 800ba04:	2100      	movs	r1, #0
 800ba06:	4630      	mov	r0, r6
 800ba08:	f7f4 fbe2 	bl	80001d0 <memchr>
 800ba0c:	b108      	cbz	r0, 800ba12 <_printf_i+0x1e6>
 800ba0e:	1b80      	subs	r0, r0, r6
 800ba10:	6060      	str	r0, [r4, #4]
 800ba12:	6863      	ldr	r3, [r4, #4]
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	2300      	movs	r3, #0
 800ba18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba1c:	e7aa      	b.n	800b974 <_printf_i+0x148>
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	4632      	mov	r2, r6
 800ba22:	4649      	mov	r1, r9
 800ba24:	4640      	mov	r0, r8
 800ba26:	47d0      	blx	sl
 800ba28:	3001      	adds	r0, #1
 800ba2a:	d0ad      	beq.n	800b988 <_printf_i+0x15c>
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	079b      	lsls	r3, r3, #30
 800ba30:	d413      	bmi.n	800ba5a <_printf_i+0x22e>
 800ba32:	68e0      	ldr	r0, [r4, #12]
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	4298      	cmp	r0, r3
 800ba38:	bfb8      	it	lt
 800ba3a:	4618      	movlt	r0, r3
 800ba3c:	e7a6      	b.n	800b98c <_printf_i+0x160>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	4632      	mov	r2, r6
 800ba42:	4649      	mov	r1, r9
 800ba44:	4640      	mov	r0, r8
 800ba46:	47d0      	blx	sl
 800ba48:	3001      	adds	r0, #1
 800ba4a:	d09d      	beq.n	800b988 <_printf_i+0x15c>
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	68e3      	ldr	r3, [r4, #12]
 800ba50:	9903      	ldr	r1, [sp, #12]
 800ba52:	1a5b      	subs	r3, r3, r1
 800ba54:	42ab      	cmp	r3, r5
 800ba56:	dcf2      	bgt.n	800ba3e <_printf_i+0x212>
 800ba58:	e7eb      	b.n	800ba32 <_printf_i+0x206>
 800ba5a:	2500      	movs	r5, #0
 800ba5c:	f104 0619 	add.w	r6, r4, #25
 800ba60:	e7f5      	b.n	800ba4e <_printf_i+0x222>
 800ba62:	bf00      	nop
 800ba64:	0800bd7d 	.word	0x0800bd7d
 800ba68:	0800bd8e 	.word	0x0800bd8e

0800ba6c <__sflush_r>:
 800ba6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba74:	0716      	lsls	r6, r2, #28
 800ba76:	4605      	mov	r5, r0
 800ba78:	460c      	mov	r4, r1
 800ba7a:	d454      	bmi.n	800bb26 <__sflush_r+0xba>
 800ba7c:	684b      	ldr	r3, [r1, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	dc02      	bgt.n	800ba88 <__sflush_r+0x1c>
 800ba82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dd48      	ble.n	800bb1a <__sflush_r+0xae>
 800ba88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba8a:	2e00      	cmp	r6, #0
 800ba8c:	d045      	beq.n	800bb1a <__sflush_r+0xae>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba94:	682f      	ldr	r7, [r5, #0]
 800ba96:	6a21      	ldr	r1, [r4, #32]
 800ba98:	602b      	str	r3, [r5, #0]
 800ba9a:	d030      	beq.n	800bafe <__sflush_r+0x92>
 800ba9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	0759      	lsls	r1, r3, #29
 800baa2:	d505      	bpl.n	800bab0 <__sflush_r+0x44>
 800baa4:	6863      	ldr	r3, [r4, #4]
 800baa6:	1ad2      	subs	r2, r2, r3
 800baa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800baaa:	b10b      	cbz	r3, 800bab0 <__sflush_r+0x44>
 800baac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800baae:	1ad2      	subs	r2, r2, r3
 800bab0:	2300      	movs	r3, #0
 800bab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bab4:	6a21      	ldr	r1, [r4, #32]
 800bab6:	4628      	mov	r0, r5
 800bab8:	47b0      	blx	r6
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	d106      	bne.n	800bace <__sflush_r+0x62>
 800bac0:	6829      	ldr	r1, [r5, #0]
 800bac2:	291d      	cmp	r1, #29
 800bac4:	d82b      	bhi.n	800bb1e <__sflush_r+0xb2>
 800bac6:	4a2a      	ldr	r2, [pc, #168]	@ (800bb70 <__sflush_r+0x104>)
 800bac8:	410a      	asrs	r2, r1
 800baca:	07d6      	lsls	r6, r2, #31
 800bacc:	d427      	bmi.n	800bb1e <__sflush_r+0xb2>
 800bace:	2200      	movs	r2, #0
 800bad0:	6062      	str	r2, [r4, #4]
 800bad2:	04d9      	lsls	r1, r3, #19
 800bad4:	6922      	ldr	r2, [r4, #16]
 800bad6:	6022      	str	r2, [r4, #0]
 800bad8:	d504      	bpl.n	800bae4 <__sflush_r+0x78>
 800bada:	1c42      	adds	r2, r0, #1
 800badc:	d101      	bne.n	800bae2 <__sflush_r+0x76>
 800bade:	682b      	ldr	r3, [r5, #0]
 800bae0:	b903      	cbnz	r3, 800bae4 <__sflush_r+0x78>
 800bae2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bae6:	602f      	str	r7, [r5, #0]
 800bae8:	b1b9      	cbz	r1, 800bb1a <__sflush_r+0xae>
 800baea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800baee:	4299      	cmp	r1, r3
 800baf0:	d002      	beq.n	800baf8 <__sflush_r+0x8c>
 800baf2:	4628      	mov	r0, r5
 800baf4:	f7ff fca0 	bl	800b438 <_free_r>
 800baf8:	2300      	movs	r3, #0
 800bafa:	6363      	str	r3, [r4, #52]	@ 0x34
 800bafc:	e00d      	b.n	800bb1a <__sflush_r+0xae>
 800bafe:	2301      	movs	r3, #1
 800bb00:	4628      	mov	r0, r5
 800bb02:	47b0      	blx	r6
 800bb04:	4602      	mov	r2, r0
 800bb06:	1c50      	adds	r0, r2, #1
 800bb08:	d1c9      	bne.n	800ba9e <__sflush_r+0x32>
 800bb0a:	682b      	ldr	r3, [r5, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0c6      	beq.n	800ba9e <__sflush_r+0x32>
 800bb10:	2b1d      	cmp	r3, #29
 800bb12:	d001      	beq.n	800bb18 <__sflush_r+0xac>
 800bb14:	2b16      	cmp	r3, #22
 800bb16:	d11e      	bne.n	800bb56 <__sflush_r+0xea>
 800bb18:	602f      	str	r7, [r5, #0]
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	e022      	b.n	800bb64 <__sflush_r+0xf8>
 800bb1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb22:	b21b      	sxth	r3, r3
 800bb24:	e01b      	b.n	800bb5e <__sflush_r+0xf2>
 800bb26:	690f      	ldr	r7, [r1, #16]
 800bb28:	2f00      	cmp	r7, #0
 800bb2a:	d0f6      	beq.n	800bb1a <__sflush_r+0xae>
 800bb2c:	0793      	lsls	r3, r2, #30
 800bb2e:	680e      	ldr	r6, [r1, #0]
 800bb30:	bf08      	it	eq
 800bb32:	694b      	ldreq	r3, [r1, #20]
 800bb34:	600f      	str	r7, [r1, #0]
 800bb36:	bf18      	it	ne
 800bb38:	2300      	movne	r3, #0
 800bb3a:	eba6 0807 	sub.w	r8, r6, r7
 800bb3e:	608b      	str	r3, [r1, #8]
 800bb40:	f1b8 0f00 	cmp.w	r8, #0
 800bb44:	dde9      	ble.n	800bb1a <__sflush_r+0xae>
 800bb46:	6a21      	ldr	r1, [r4, #32]
 800bb48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb4a:	4643      	mov	r3, r8
 800bb4c:	463a      	mov	r2, r7
 800bb4e:	4628      	mov	r0, r5
 800bb50:	47b0      	blx	r6
 800bb52:	2800      	cmp	r0, #0
 800bb54:	dc08      	bgt.n	800bb68 <__sflush_r+0xfc>
 800bb56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb5e:	81a3      	strh	r3, [r4, #12]
 800bb60:	f04f 30ff 	mov.w	r0, #4294967295
 800bb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb68:	4407      	add	r7, r0
 800bb6a:	eba8 0800 	sub.w	r8, r8, r0
 800bb6e:	e7e7      	b.n	800bb40 <__sflush_r+0xd4>
 800bb70:	dfbffffe 	.word	0xdfbffffe

0800bb74 <_fflush_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	690b      	ldr	r3, [r1, #16]
 800bb78:	4605      	mov	r5, r0
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	b913      	cbnz	r3, 800bb84 <_fflush_r+0x10>
 800bb7e:	2500      	movs	r5, #0
 800bb80:	4628      	mov	r0, r5
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	b118      	cbz	r0, 800bb8e <_fflush_r+0x1a>
 800bb86:	6a03      	ldr	r3, [r0, #32]
 800bb88:	b90b      	cbnz	r3, 800bb8e <_fflush_r+0x1a>
 800bb8a:	f7ff fa4b 	bl	800b024 <__sinit>
 800bb8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d0f3      	beq.n	800bb7e <_fflush_r+0xa>
 800bb96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb98:	07d0      	lsls	r0, r2, #31
 800bb9a:	d404      	bmi.n	800bba6 <_fflush_r+0x32>
 800bb9c:	0599      	lsls	r1, r3, #22
 800bb9e:	d402      	bmi.n	800bba6 <_fflush_r+0x32>
 800bba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bba2:	f7ff fc46 	bl	800b432 <__retarget_lock_acquire_recursive>
 800bba6:	4628      	mov	r0, r5
 800bba8:	4621      	mov	r1, r4
 800bbaa:	f7ff ff5f 	bl	800ba6c <__sflush_r>
 800bbae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbb0:	07da      	lsls	r2, r3, #31
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	d4e4      	bmi.n	800bb80 <_fflush_r+0xc>
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	059b      	lsls	r3, r3, #22
 800bbba:	d4e1      	bmi.n	800bb80 <_fflush_r+0xc>
 800bbbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbbe:	f7ff fc39 	bl	800b434 <__retarget_lock_release_recursive>
 800bbc2:	e7dd      	b.n	800bb80 <_fflush_r+0xc>

0800bbc4 <__swhatbuf_r>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbcc:	2900      	cmp	r1, #0
 800bbce:	b096      	sub	sp, #88	@ 0x58
 800bbd0:	4615      	mov	r5, r2
 800bbd2:	461e      	mov	r6, r3
 800bbd4:	da0d      	bge.n	800bbf2 <__swhatbuf_r+0x2e>
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bbdc:	f04f 0100 	mov.w	r1, #0
 800bbe0:	bf14      	ite	ne
 800bbe2:	2340      	movne	r3, #64	@ 0x40
 800bbe4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bbe8:	2000      	movs	r0, #0
 800bbea:	6031      	str	r1, [r6, #0]
 800bbec:	602b      	str	r3, [r5, #0]
 800bbee:	b016      	add	sp, #88	@ 0x58
 800bbf0:	bd70      	pop	{r4, r5, r6, pc}
 800bbf2:	466a      	mov	r2, sp
 800bbf4:	f000 f848 	bl	800bc88 <_fstat_r>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	dbec      	blt.n	800bbd6 <__swhatbuf_r+0x12>
 800bbfc:	9901      	ldr	r1, [sp, #4]
 800bbfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc06:	4259      	negs	r1, r3
 800bc08:	4159      	adcs	r1, r3
 800bc0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc0e:	e7eb      	b.n	800bbe8 <__swhatbuf_r+0x24>

0800bc10 <__smakebuf_r>:
 800bc10:	898b      	ldrh	r3, [r1, #12]
 800bc12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc14:	079d      	lsls	r5, r3, #30
 800bc16:	4606      	mov	r6, r0
 800bc18:	460c      	mov	r4, r1
 800bc1a:	d507      	bpl.n	800bc2c <__smakebuf_r+0x1c>
 800bc1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	6123      	str	r3, [r4, #16]
 800bc24:	2301      	movs	r3, #1
 800bc26:	6163      	str	r3, [r4, #20]
 800bc28:	b003      	add	sp, #12
 800bc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc2c:	ab01      	add	r3, sp, #4
 800bc2e:	466a      	mov	r2, sp
 800bc30:	f7ff ffc8 	bl	800bbc4 <__swhatbuf_r>
 800bc34:	9f00      	ldr	r7, [sp, #0]
 800bc36:	4605      	mov	r5, r0
 800bc38:	4639      	mov	r1, r7
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7ff f8da 	bl	800adf4 <_malloc_r>
 800bc40:	b948      	cbnz	r0, 800bc56 <__smakebuf_r+0x46>
 800bc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc46:	059a      	lsls	r2, r3, #22
 800bc48:	d4ee      	bmi.n	800bc28 <__smakebuf_r+0x18>
 800bc4a:	f023 0303 	bic.w	r3, r3, #3
 800bc4e:	f043 0302 	orr.w	r3, r3, #2
 800bc52:	81a3      	strh	r3, [r4, #12]
 800bc54:	e7e2      	b.n	800bc1c <__smakebuf_r+0xc>
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	6020      	str	r0, [r4, #0]
 800bc5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc5e:	81a3      	strh	r3, [r4, #12]
 800bc60:	9b01      	ldr	r3, [sp, #4]
 800bc62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc66:	b15b      	cbz	r3, 800bc80 <__smakebuf_r+0x70>
 800bc68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f000 f81d 	bl	800bcac <_isatty_r>
 800bc72:	b128      	cbz	r0, 800bc80 <__smakebuf_r+0x70>
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f023 0303 	bic.w	r3, r3, #3
 800bc7a:	f043 0301 	orr.w	r3, r3, #1
 800bc7e:	81a3      	strh	r3, [r4, #12]
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	431d      	orrs	r5, r3
 800bc84:	81a5      	strh	r5, [r4, #12]
 800bc86:	e7cf      	b.n	800bc28 <__smakebuf_r+0x18>

0800bc88 <_fstat_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	@ (800bca8 <_fstat_r+0x20>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	4611      	mov	r1, r2
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	f7f5 fc10 	bl	80014ba <_fstat>
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	d102      	bne.n	800bca4 <_fstat_r+0x1c>
 800bc9e:	682b      	ldr	r3, [r5, #0]
 800bca0:	b103      	cbz	r3, 800bca4 <_fstat_r+0x1c>
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	bd38      	pop	{r3, r4, r5, pc}
 800bca6:	bf00      	nop
 800bca8:	20000bf8 	.word	0x20000bf8

0800bcac <_isatty_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d06      	ldr	r5, [pc, #24]	@ (800bcc8 <_isatty_r+0x1c>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	602b      	str	r3, [r5, #0]
 800bcb8:	f7f5 fc0f 	bl	80014da <_isatty>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_isatty_r+0x1a>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_isatty_r+0x1a>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20000bf8 	.word	0x20000bf8

0800bccc <_init>:
 800bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcce:	bf00      	nop
 800bcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcd2:	bc08      	pop	{r3}
 800bcd4:	469e      	mov	lr, r3
 800bcd6:	4770      	bx	lr

0800bcd8 <_fini>:
 800bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcda:	bf00      	nop
 800bcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcde:	bc08      	pop	{r3}
 800bce0:	469e      	mov	lr, r3
 800bce2:	4770      	bx	lr
